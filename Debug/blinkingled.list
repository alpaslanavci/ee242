
blinkingled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043ac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800446c  0800446c  0000546c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045d4  080045d4  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080045d4  080045d4  000055d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045dc  080045dc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045dc  080045dc  000055dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045e0  080045e0  000055e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080045e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000068  0800464c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  0800464c  0000627c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c27  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001779  00000000  00000000  0000ecb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  00010430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ed  00000000  00000000  00010bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000153a4  00000000  00000000  000111e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ceb  00000000  00000000  00026589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080379  00000000  00000000  00030274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b05ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002458  00000000  00000000  000b0630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000b2a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004454 	.word	0x08004454

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004454 	.word	0x08004454

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	@ (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	@ (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4699      	mov	r9, r3
 800044e:	0c03      	lsrs	r3, r0, #16
 8000450:	469c      	mov	ip, r3
 8000452:	0413      	lsls	r3, r2, #16
 8000454:	4647      	mov	r7, r8
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	001d      	movs	r5, r3
 800045a:	000e      	movs	r6, r1
 800045c:	4661      	mov	r1, ip
 800045e:	0404      	lsls	r4, r0, #16
 8000460:	0c24      	lsrs	r4, r4, #16
 8000462:	b580      	push	{r7, lr}
 8000464:	0007      	movs	r7, r0
 8000466:	0c10      	lsrs	r0, r2, #16
 8000468:	434b      	muls	r3, r1
 800046a:	4365      	muls	r5, r4
 800046c:	4341      	muls	r1, r0
 800046e:	4360      	muls	r0, r4
 8000470:	0c2c      	lsrs	r4, r5, #16
 8000472:	18c0      	adds	r0, r0, r3
 8000474:	1824      	adds	r4, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	42a3      	cmp	r3, r4
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	@ 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4356      	muls	r6, r2
 800048a:	0c23      	lsrs	r3, r4, #16
 800048c:	042d      	lsls	r5, r5, #16
 800048e:	0c2d      	lsrs	r5, r5, #16
 8000490:	1989      	adds	r1, r1, r6
 8000492:	4463      	add	r3, ip
 8000494:	0424      	lsls	r4, r4, #16
 8000496:	1960      	adds	r0, r4, r5
 8000498:	18c9      	adds	r1, r1, r3
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8ba 	bl	800063c <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8b5 	bl	800063c <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	d434      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004da:	469b      	mov	fp, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	465a      	mov	r2, fp
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83b      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e079      	b.n	80005ea <__udivmoddi4+0x146>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e076      	b.n	80005f0 <__udivmoddi4+0x14c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e029      	b.n	8000570 <__udivmoddi4+0xcc>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	469b      	mov	fp, r3
 8000548:	2320      	movs	r3, #32
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	4652      	mov	r2, sl
 800054e:	40da      	lsrs	r2, r3
 8000550:	4641      	mov	r1, r8
 8000552:	0013      	movs	r3, r2
 8000554:	464a      	mov	r2, r9
 8000556:	408a      	lsls	r2, r1
 8000558:	0017      	movs	r7, r2
 800055a:	4642      	mov	r2, r8
 800055c:	431f      	orrs	r7, r3
 800055e:	4653      	mov	r3, sl
 8000560:	4093      	lsls	r3, r2
 8000562:	001e      	movs	r6, r3
 8000564:	42af      	cmp	r7, r5
 8000566:	d9c3      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000568:	2200      	movs	r2, #0
 800056a:	2300      	movs	r3, #0
 800056c:	9200      	str	r2, [sp, #0]
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	4643      	mov	r3, r8
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0d8      	beq.n	8000528 <__udivmoddi4+0x84>
 8000576:	07fb      	lsls	r3, r7, #31
 8000578:	0872      	lsrs	r2, r6, #1
 800057a:	431a      	orrs	r2, r3
 800057c:	4646      	mov	r6, r8
 800057e:	087b      	lsrs	r3, r7, #1
 8000580:	e00e      	b.n	80005a0 <__udivmoddi4+0xfc>
 8000582:	42ab      	cmp	r3, r5
 8000584:	d101      	bne.n	800058a <__udivmoddi4+0xe6>
 8000586:	42a2      	cmp	r2, r4
 8000588:	d80c      	bhi.n	80005a4 <__udivmoddi4+0x100>
 800058a:	1aa4      	subs	r4, r4, r2
 800058c:	419d      	sbcs	r5, r3
 800058e:	2001      	movs	r0, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2100      	movs	r1, #0
 8000596:	3e01      	subs	r6, #1
 8000598:	1824      	adds	r4, r4, r0
 800059a:	414d      	adcs	r5, r1
 800059c:	2e00      	cmp	r6, #0
 800059e:	d006      	beq.n	80005ae <__udivmoddi4+0x10a>
 80005a0:	42ab      	cmp	r3, r5
 80005a2:	d9ee      	bls.n	8000582 <__udivmoddi4+0xde>
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1924      	adds	r4, r4, r4
 80005a8:	416d      	adcs	r5, r5
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d1f8      	bne.n	80005a0 <__udivmoddi4+0xfc>
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	465b      	mov	r3, fp
 80005b4:	1900      	adds	r0, r0, r4
 80005b6:	4169      	adcs	r1, r5
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db24      	blt.n	8000606 <__udivmoddi4+0x162>
 80005bc:	002b      	movs	r3, r5
 80005be:	465a      	mov	r2, fp
 80005c0:	4644      	mov	r4, r8
 80005c2:	40d3      	lsrs	r3, r2
 80005c4:	002a      	movs	r2, r5
 80005c6:	40e2      	lsrs	r2, r4
 80005c8:	001c      	movs	r4, r3
 80005ca:	465b      	mov	r3, fp
 80005cc:	0015      	movs	r5, r2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db2a      	blt.n	8000628 <__udivmoddi4+0x184>
 80005d2:	0026      	movs	r6, r4
 80005d4:	409e      	lsls	r6, r3
 80005d6:	0033      	movs	r3, r6
 80005d8:	0026      	movs	r6, r4
 80005da:	4647      	mov	r7, r8
 80005dc:	40be      	lsls	r6, r7
 80005de:	0032      	movs	r2, r6
 80005e0:	1a80      	subs	r0, r0, r2
 80005e2:	4199      	sbcs	r1, r3
 80005e4:	9000      	str	r0, [sp, #0]
 80005e6:	9101      	str	r1, [sp, #4]
 80005e8:	e79e      	b.n	8000528 <__udivmoddi4+0x84>
 80005ea:	42a3      	cmp	r3, r4
 80005ec:	d8bc      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80005ee:	e782      	b.n	80004f6 <__udivmoddi4+0x52>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	9100      	str	r1, [sp, #0]
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	2201      	movs	r2, #1
 8000600:	40da      	lsrs	r2, r3
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	e785      	b.n	8000512 <__udivmoddi4+0x6e>
 8000606:	4642      	mov	r2, r8
 8000608:	2320      	movs	r3, #32
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4646      	mov	r6, r8
 8000610:	409a      	lsls	r2, r3
 8000612:	0023      	movs	r3, r4
 8000614:	40f3      	lsrs	r3, r6
 8000616:	4644      	mov	r4, r8
 8000618:	4313      	orrs	r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	40e2      	lsrs	r2, r4
 800061e:	001c      	movs	r4, r3
 8000620:	465b      	mov	r3, fp
 8000622:	0015      	movs	r5, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	dad4      	bge.n	80005d2 <__udivmoddi4+0x12e>
 8000628:	4642      	mov	r2, r8
 800062a:	002f      	movs	r7, r5
 800062c:	2320      	movs	r3, #32
 800062e:	0026      	movs	r6, r4
 8000630:	4097      	lsls	r7, r2
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	40de      	lsrs	r6, r3
 8000636:	003b      	movs	r3, r7
 8000638:	4333      	orrs	r3, r6
 800063a:	e7cd      	b.n	80005d8 <__udivmoddi4+0x134>

0800063c <__clzdi2>:
 800063c:	b510      	push	{r4, lr}
 800063e:	2900      	cmp	r1, #0
 8000640:	d103      	bne.n	800064a <__clzdi2+0xe>
 8000642:	f000 f807 	bl	8000654 <__clzsi2>
 8000646:	3020      	adds	r0, #32
 8000648:	e002      	b.n	8000650 <__clzdi2+0x14>
 800064a:	0008      	movs	r0, r1
 800064c:	f000 f802 	bl	8000654 <__clzsi2>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	46c0      	nop			@ (mov r8, r8)

08000654 <__clzsi2>:
 8000654:	211c      	movs	r1, #28
 8000656:	2301      	movs	r3, #1
 8000658:	041b      	lsls	r3, r3, #16
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0xe>
 800065e:	0c00      	lsrs	r0, r0, #16
 8000660:	3910      	subs	r1, #16
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	4298      	cmp	r0, r3
 8000666:	d301      	bcc.n	800066c <__clzsi2+0x18>
 8000668:	0a00      	lsrs	r0, r0, #8
 800066a:	3908      	subs	r1, #8
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	4298      	cmp	r0, r3
 8000670:	d301      	bcc.n	8000676 <__clzsi2+0x22>
 8000672:	0900      	lsrs	r0, r0, #4
 8000674:	3904      	subs	r1, #4
 8000676:	a202      	add	r2, pc, #8	@ (adr r2, 8000680 <__clzsi2+0x2c>)
 8000678:	5c10      	ldrb	r0, [r2, r0]
 800067a:	1840      	adds	r0, r0, r1
 800067c:	4770      	bx	lr
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	02020304 	.word	0x02020304
 8000684:	01010101 	.word	0x01010101
	...

08000690 <EnableGameButtonInterrupts>:
//EXTI0_1_IRQn handler for RED and GREEN buttons
//EXTI2_3_IRQn handler for YELLOW button
//EXTI4_15_IRQn handler for START button

static void EnableGameButtonInterrupts(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
    __HAL_GPIO_EXTI_CLEAR_IT(RED_BUTTON_Pin);
 8000694:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <EnableGameButtonInterrupts+0x28>)
 8000696:	2201      	movs	r2, #1
 8000698:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(GREEN_BUTTON_Pin);
 800069a:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <EnableGameButtonInterrupts+0x28>)
 800069c:	2202      	movs	r2, #2
 800069e:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(YELLOW_BUTTON_Pin);
 80006a0:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <EnableGameButtonInterrupts+0x28>)
 80006a2:	2208      	movs	r2, #8
 80006a4:	615a      	str	r2, [r3, #20]
    HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80006a6:	2005      	movs	r0, #5
 80006a8:	f001 f811 	bl	80016ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80006ac:	2006      	movs	r0, #6
 80006ae:	f001 f80e 	bl	80016ce <HAL_NVIC_EnableIRQ>
}
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40010400 	.word	0x40010400

080006bc <DisableGameButtonInterrupts>:

static void DisableGameButtonInterrupts(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 80006c0:	2005      	movs	r0, #5
 80006c2:	f001 f814 	bl	80016ee <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 80006c6:	2006      	movs	r0, #6
 80006c8:	f001 f811 	bl	80016ee <HAL_NVIC_DisableIRQ>
}
 80006cc:	46c0      	nop			@ (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <EnableStartButtonInterrupt>:

static void EnableStartButtonInterrupt(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
    __HAL_GPIO_EXTI_CLEAR_IT(START_BUTTON_Pin);
 80006d8:	4b04      	ldr	r3, [pc, #16]	@ (80006ec <EnableStartButtonInterrupt+0x18>)
 80006da:	2240      	movs	r2, #64	@ 0x40
 80006dc:	615a      	str	r2, [r3, #20]
    HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006de:	2007      	movs	r0, #7
 80006e0:	f000 fff5 	bl	80016ce <HAL_NVIC_EnableIRQ>
}
 80006e4:	46c0      	nop			@ (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	40010400 	.word	0x40010400

080006f0 <DisableStartButtonInterrupt>:

static void DisableStartButtonInterrupt(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80006f4:	2007      	movs	r0, #7
 80006f6:	f000 fffa 	bl	80016ee <HAL_NVIC_DisableIRQ>
}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <PrepareForNextInput>:

static void PrepareForNextInput(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
    if (g_currentPlayerInputIndex < SEQUENCE_LENGTH)
 8000704:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <PrepareForNextInput+0x18>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b03      	cmp	r3, #3
 800070c:	d801      	bhi.n	8000712 <PrepareForNextInput+0x12>
    {
        EnableGameButtonInterrupts();
 800070e:	f7ff ffbf 	bl	8000690 <EnableGameButtonInterrupts>
    }
}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000118 	.word	0x20000118

0800071c <BuzzerBeep>:

//Buzzer function to beep for a specified duration
static void BuzzerBeep(uint32_t duration)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 5; i++)
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	e016      	b.n	8000758 <BuzzerBeep+0x3c>
	{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <BuzzerBeep+0x4c>)
 800072c:	2201      	movs	r2, #1
 800072e:	2140      	movs	r1, #64	@ 0x40
 8000730:	0018      	movs	r0, r3
 8000732:	f001 f977 	bl	8001a24 <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fec1 	bl	80014c0 <HAL_Delay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800073e:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <BuzzerBeep+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	2140      	movs	r1, #64	@ 0x40
 8000744:	0018      	movs	r0, r3
 8000746:	f001 f96d 	bl	8001a24 <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	0018      	movs	r0, r3
 800074e:	f000 feb7 	bl	80014c0 <HAL_Delay>
	for (int i = 0; i < 5; i++)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3301      	adds	r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	2b04      	cmp	r3, #4
 800075c:	dde5      	ble.n	800072a <BuzzerBeep+0xe>
	}
}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	46c0      	nop			@ (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b004      	add	sp, #16
 8000766:	bd80      	pop	{r7, pc}
 8000768:	50000400 	.word	0x50000400

0800076c <DisplaySequence>:

static void DisplaySequence(uint8_t ledValue, uint32_t onDuration, uint32_t offDuration)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	210f      	movs	r1, #15
 8000778:	187b      	adds	r3, r7, r1
 800077a:	1c02      	adds	r2, r0, #0
 800077c:	701a      	strb	r2, [r3, #0]
  switch (ledValue)
 800077e:	187b      	adds	r3, r7, r1
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b02      	cmp	r3, #2
 8000784:	d037      	beq.n	80007f6 <DisplaySequence+0x8a>
 8000786:	dc4d      	bgt.n	8000824 <DisplaySequence+0xb8>
 8000788:	2b00      	cmp	r3, #0
 800078a:	d002      	beq.n	8000792 <DisplaySequence+0x26>
 800078c:	2b01      	cmp	r3, #1
 800078e:	d019      	beq.n	80007c4 <DisplaySequence+0x58>
      HAL_Delay(onDuration);
      HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
      HAL_Delay(offDuration);
      break;
  }
}
 8000790:	e048      	b.n	8000824 <DisplaySequence+0xb8>
      HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000792:	2380      	movs	r3, #128	@ 0x80
 8000794:	00d9      	lsls	r1, r3, #3
 8000796:	23a0      	movs	r3, #160	@ 0xa0
 8000798:	05db      	lsls	r3, r3, #23
 800079a:	2201      	movs	r2, #1
 800079c:	0018      	movs	r0, r3
 800079e:	f001 f941 	bl	8001a24 <HAL_GPIO_WritePin>
      HAL_Delay(onDuration);
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	0018      	movs	r0, r3
 80007a6:	f000 fe8b 	bl	80014c0 <HAL_Delay>
      HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80007aa:	2380      	movs	r3, #128	@ 0x80
 80007ac:	00d9      	lsls	r1, r3, #3
 80007ae:	23a0      	movs	r3, #160	@ 0xa0
 80007b0:	05db      	lsls	r3, r3, #23
 80007b2:	2200      	movs	r2, #0
 80007b4:	0018      	movs	r0, r3
 80007b6:	f001 f935 	bl	8001a24 <HAL_GPIO_WritePin>
      HAL_Delay(offDuration);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 fe7f 	bl	80014c0 <HAL_Delay>
      break;
 80007c2:	e02f      	b.n	8000824 <DisplaySequence+0xb8>
      HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80007c4:	2380      	movs	r3, #128	@ 0x80
 80007c6:	0099      	lsls	r1, r3, #2
 80007c8:	23a0      	movs	r3, #160	@ 0xa0
 80007ca:	05db      	lsls	r3, r3, #23
 80007cc:	2201      	movs	r2, #1
 80007ce:	0018      	movs	r0, r3
 80007d0:	f001 f928 	bl	8001a24 <HAL_GPIO_WritePin>
      HAL_Delay(onDuration);
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 fe72 	bl	80014c0 <HAL_Delay>
      HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80007dc:	2380      	movs	r3, #128	@ 0x80
 80007de:	0099      	lsls	r1, r3, #2
 80007e0:	23a0      	movs	r3, #160	@ 0xa0
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	2200      	movs	r2, #0
 80007e6:	0018      	movs	r0, r3
 80007e8:	f001 f91c 	bl	8001a24 <HAL_GPIO_WritePin>
      HAL_Delay(offDuration);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 fe66 	bl	80014c0 <HAL_Delay>
      break;
 80007f4:	e016      	b.n	8000824 <DisplaySequence+0xb8>
      HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET);
 80007f6:	2380      	movs	r3, #128	@ 0x80
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	480c      	ldr	r0, [pc, #48]	@ (800082c <DisplaySequence+0xc0>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	0019      	movs	r1, r3
 8000800:	f001 f910 	bl	8001a24 <HAL_GPIO_WritePin>
      HAL_Delay(onDuration);
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	0018      	movs	r0, r3
 8000808:	f000 fe5a 	bl	80014c0 <HAL_Delay>
      HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 800080c:	2380      	movs	r3, #128	@ 0x80
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	4806      	ldr	r0, [pc, #24]	@ (800082c <DisplaySequence+0xc0>)
 8000812:	2200      	movs	r2, #0
 8000814:	0019      	movs	r1, r3
 8000816:	f001 f905 	bl	8001a24 <HAL_GPIO_WritePin>
      HAL_Delay(offDuration);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	0018      	movs	r0, r3
 800081e:	f000 fe4f 	bl	80014c0 <HAL_Delay>
      break;
 8000822:	46c0      	nop			@ (mov r8, r8)
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b004      	add	sp, #16
 800082a:	bd80      	pop	{r7, pc}
 800082c:	50000400 	.word	0x50000400

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000836:	f000 fdd3 	bl	80013e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083a:	f000 f9ef 	bl	8000c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f000 fa89 	bl	8000d54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000842:	f000 fa57 	bl	8000cf4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  srand(HAL_GetTick());
 8000846:	f000 fe31 	bl	80014ac <HAL_GetTick>
 800084a:	0003      	movs	r3, r0
 800084c:	0018      	movs	r0, r3
 800084e:	f002 fdbb 	bl	80033c8 <srand>

  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000852:	2380      	movs	r3, #128	@ 0x80
 8000854:	00d9      	lsls	r1, r3, #3
 8000856:	23a0      	movs	r3, #160	@ 0xa0
 8000858:	05db      	lsls	r3, r3, #23
 800085a:	2200      	movs	r2, #0
 800085c:	0018      	movs	r0, r3
 800085e:	f001 f8e1 	bl	8001a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000862:	2380      	movs	r3, #128	@ 0x80
 8000864:	0099      	lsls	r1, r3, #2
 8000866:	23a0      	movs	r3, #160	@ 0xa0
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	2200      	movs	r2, #0
 800086c:	0018      	movs	r0, r3
 800086e:	f001 f8d9 	bl	8001a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000872:	2380      	movs	r3, #128	@ 0x80
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	48e0      	ldr	r0, [pc, #896]	@ (8000bf8 <main+0x3c8>)
 8000878:	2200      	movs	r2, #0
 800087a:	0019      	movs	r1, r3
 800087c:	f001 f8d2 	bl	8001a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000880:	4bdd      	ldr	r3, [pc, #884]	@ (8000bf8 <main+0x3c8>)
 8000882:	2200      	movs	r2, #0
 8000884:	2140      	movs	r1, #64	@ 0x40
 8000886:	0018      	movs	r0, r3
 8000888:	f001 f8cc 	bl	8001a24 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    switch (g_gameState)
 800088c:	4bdb      	ldr	r3, [pc, #876]	@ (8000bfc <main+0x3cc>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2b06      	cmp	r3, #6
 8000894:	d8fa      	bhi.n	800088c <main+0x5c>
 8000896:	009a      	lsls	r2, r3, #2
 8000898:	4bd9      	ldr	r3, [pc, #868]	@ (8000c00 <main+0x3d0>)
 800089a:	18d3      	adds	r3, r2, r3
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	469f      	mov	pc, r3
    {
      case STATE_IDLE:

        DisableGameButtonInterrupts();
 80008a0:	f7ff ff0c 	bl	80006bc <DisableGameButtonInterrupts>
        EnableStartButtonInterrupt();
 80008a4:	f7ff ff16 	bl	80006d4 <EnableStartButtonInterrupt>
        g_gameRunning = false;
 80008a8:	4bd6      	ldr	r3, [pc, #856]	@ (8000c04 <main+0x3d4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
        g_currentPlayerInputIndex = 0;
 80008ae:	4bd6      	ldr	r3, [pc, #856]	@ (8000c08 <main+0x3d8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < SEQUENCE_LENGTH; i++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80008b8:	e007      	b.n	80008ca <main+0x9a>
        {
          g_playerSequence[i] = 0;
 80008ba:	4ad4      	ldr	r2, [pc, #848]	@ (8000c0c <main+0x3dc>)
 80008bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008be:	18d3      	adds	r3, r2, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < SEQUENCE_LENGTH; i++)
 80008c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c6:	3301      	adds	r3, #1
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80008ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	ddf4      	ble.n	80008ba <main+0x8a>
        }
        HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80008d0:	2380      	movs	r3, #128	@ 0x80
 80008d2:	00d9      	lsls	r1, r3, #3
 80008d4:	23a0      	movs	r3, #160	@ 0xa0
 80008d6:	05db      	lsls	r3, r3, #23
 80008d8:	2200      	movs	r2, #0
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 f8a2 	bl	8001a24 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80008e0:	2380      	movs	r3, #128	@ 0x80
 80008e2:	0099      	lsls	r1, r3, #2
 80008e4:	23a0      	movs	r3, #160	@ 0xa0
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	2200      	movs	r2, #0
 80008ea:	0018      	movs	r0, r3
 80008ec:	f001 f89a 	bl	8001a24 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 80008f0:	2380      	movs	r3, #128	@ 0x80
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	48c0      	ldr	r0, [pc, #768]	@ (8000bf8 <main+0x3c8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	0019      	movs	r1, r3
 80008fa:	f001 f893 	bl	8001a24 <HAL_GPIO_WritePin>
        break;
 80008fe:	e179      	b.n	8000bf4 <main+0x3c4>

      case STATE_STARTUP:

        DisableGameButtonInterrupts();
 8000900:	f7ff fedc 	bl	80006bc <DisableGameButtonInterrupts>
        for (int i = 0; i < 3; i++)
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
 8000908:	e03f      	b.n	800098a <main+0x15a>
        {
          HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800090a:	2380      	movs	r3, #128	@ 0x80
 800090c:	00d9      	lsls	r1, r3, #3
 800090e:	23a0      	movs	r3, #160	@ 0xa0
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	2201      	movs	r2, #1
 8000914:	0018      	movs	r0, r3
 8000916:	f001 f885 	bl	8001a24 <HAL_GPIO_WritePin>
          HAL_Delay(500);
 800091a:	23fa      	movs	r3, #250	@ 0xfa
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	0018      	movs	r0, r3
 8000920:	f000 fdce 	bl	80014c0 <HAL_Delay>
          HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000924:	2380      	movs	r3, #128	@ 0x80
 8000926:	00d9      	lsls	r1, r3, #3
 8000928:	23a0      	movs	r3, #160	@ 0xa0
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	2200      	movs	r2, #0
 800092e:	0018      	movs	r0, r3
 8000930:	f001 f878 	bl	8001a24 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8000934:	2380      	movs	r3, #128	@ 0x80
 8000936:	0099      	lsls	r1, r3, #2
 8000938:	23a0      	movs	r3, #160	@ 0xa0
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	2201      	movs	r2, #1
 800093e:	0018      	movs	r0, r3
 8000940:	f001 f870 	bl	8001a24 <HAL_GPIO_WritePin>
          HAL_Delay(500);
 8000944:	23fa      	movs	r3, #250	@ 0xfa
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	0018      	movs	r0, r3
 800094a:	f000 fdb9 	bl	80014c0 <HAL_Delay>
          HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800094e:	2380      	movs	r3, #128	@ 0x80
 8000950:	0099      	lsls	r1, r3, #2
 8000952:	23a0      	movs	r3, #160	@ 0xa0
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	2200      	movs	r2, #0
 8000958:	0018      	movs	r0, r3
 800095a:	f001 f863 	bl	8001a24 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET);
 800095e:	2380      	movs	r3, #128	@ 0x80
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	48a5      	ldr	r0, [pc, #660]	@ (8000bf8 <main+0x3c8>)
 8000964:	2201      	movs	r2, #1
 8000966:	0019      	movs	r1, r3
 8000968:	f001 f85c 	bl	8001a24 <HAL_GPIO_WritePin>
          HAL_Delay(500);
 800096c:	23fa      	movs	r3, #250	@ 0xfa
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	0018      	movs	r0, r3
 8000972:	f000 fda5 	bl	80014c0 <HAL_Delay>
          HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000976:	2380      	movs	r3, #128	@ 0x80
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	489f      	ldr	r0, [pc, #636]	@ (8000bf8 <main+0x3c8>)
 800097c:	2200      	movs	r2, #0
 800097e:	0019      	movs	r1, r3
 8000980:	f001 f850 	bl	8001a24 <HAL_GPIO_WritePin>
        for (int i = 0; i < 3; i++)
 8000984:	6a3b      	ldr	r3, [r7, #32]
 8000986:	3301      	adds	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	2b02      	cmp	r3, #2
 800098e:	ddbc      	ble.n	800090a <main+0xda>
        }
        HAL_Delay(1000);
 8000990:	23fa      	movs	r3, #250	@ 0xfa
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	0018      	movs	r0, r3
 8000996:	f000 fd93 	bl	80014c0 <HAL_Delay>

        g_gameState = STATE_GENERATE_AND_DISPLAY_SEQUENCE;
 800099a:	4b98      	ldr	r3, [pc, #608]	@ (8000bfc <main+0x3cc>)
 800099c:	2202      	movs	r2, #2
 800099e:	701a      	strb	r2, [r3, #0]
        break;
 80009a0:	e128      	b.n	8000bf4 <main+0x3c4>

      case STATE_GENERATE_AND_DISPLAY_SEQUENCE:

        DisableGameButtonInterrupts();
 80009a2:	f7ff fe8b 	bl	80006bc <DisableGameButtonInterrupts>
        g_currentPlayerInputIndex = 0;
 80009a6:	4b98      	ldr	r3, [pc, #608]	@ (8000c08 <main+0x3d8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]

        for (int i = 0; i < SEQUENCE_LENGTH; i++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
 80009b0:	e010      	b.n	80009d4 <main+0x1a4>
        {
          g_generatedSequence[i] = rand() % 3;
 80009b2:	f002 fd39 	bl	8003428 <rand>
 80009b6:	0003      	movs	r3, r0
 80009b8:	2103      	movs	r1, #3
 80009ba:	0018      	movs	r0, r3
 80009bc:	f7ff fd1e 	bl	80003fc <__aeabi_idivmod>
 80009c0:	000b      	movs	r3, r1
 80009c2:	b2d9      	uxtb	r1, r3
 80009c4:	4a92      	ldr	r2, [pc, #584]	@ (8000c10 <main+0x3e0>)
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	18d3      	adds	r3, r2, r3
 80009ca:	1c0a      	adds	r2, r1, #0
 80009cc:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < SEQUENCE_LENGTH; i++)
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3301      	adds	r3, #1
 80009d2:	61fb      	str	r3, [r7, #28]
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	ddeb      	ble.n	80009b2 <main+0x182>
        }

        for (int i = 0; i < SEQUENCE_LENGTH; i++)
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
 80009de:	e00d      	b.n	80009fc <main+0x1cc>
        {
          DisplaySequence(g_generatedSequence[i], 500, 500); // Display each LED in the sequence
 80009e0:	4a8b      	ldr	r2, [pc, #556]	@ (8000c10 <main+0x3e0>)
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	18d3      	adds	r3, r2, r3
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	22fa      	movs	r2, #250	@ 0xfa
 80009ea:	0052      	lsls	r2, r2, #1
 80009ec:	21fa      	movs	r1, #250	@ 0xfa
 80009ee:	0049      	lsls	r1, r1, #1
 80009f0:	0018      	movs	r0, r3
 80009f2:	f7ff febb 	bl	800076c <DisplaySequence>
        for (int i = 0; i < SEQUENCE_LENGTH; i++)
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	3301      	adds	r3, #1
 80009fa:	61bb      	str	r3, [r7, #24]
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	ddee      	ble.n	80009e0 <main+0x1b0>
        }
        HAL_Delay(2000);
 8000a02:	23fa      	movs	r3, #250	@ 0xfa
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 fd5a 	bl	80014c0 <HAL_Delay>
        g_gameState = STATE_WAIT_FOR_PLAYER_INPUT;
 8000a0c:	4b7b      	ldr	r3, [pc, #492]	@ (8000bfc <main+0x3cc>)
 8000a0e:	2203      	movs	r2, #3
 8000a10:	701a      	strb	r2, [r3, #0]
        break;
 8000a12:	e0ef      	b.n	8000bf4 <main+0x3c4>

      case STATE_WAIT_FOR_PLAYER_INPUT:

        PrepareForNextInput();
 8000a14:	f7ff fe74 	bl	8000700 <PrepareForNextInput>

        if (g_ledFeedbackActive > 0 && g_currentPlayerInputIndex < SEQUENCE_LENGTH)
 8000a18:	4b7e      	ldr	r3, [pc, #504]	@ (8000c14 <main+0x3e4>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d100      	bne.n	8000a24 <main+0x1f4>
 8000a22:	e0e6      	b.n	8000bf2 <main+0x3c2>
 8000a24:	4b78      	ldr	r3, [pc, #480]	@ (8000c08 <main+0x3d8>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d900      	bls.n	8000a30 <main+0x200>
 8000a2e:	e0e0      	b.n	8000bf2 <main+0x3c2>
        {
          uint32_t currentTime = HAL_GetTick();
 8000a30:	f000 fd3c 	bl	80014ac <HAL_GetTick>
 8000a34:	0003      	movs	r3, r0
 8000a36:	603b      	str	r3, [r7, #0]
          if (currentTime - g_ledFeedbackStartTime >= LED_FEEDBACK_DURATION_MS)
 8000a38:	4b77      	ldr	r3, [pc, #476]	@ (8000c18 <main+0x3e8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	1ad2      	subs	r2, r2, r3
 8000a40:	2396      	movs	r3, #150	@ 0x96
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d200      	bcs.n	8000a4a <main+0x21a>
 8000a48:	e0d3      	b.n	8000bf2 <main+0x3c2>
          {

            HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000a4a:	2380      	movs	r3, #128	@ 0x80
 8000a4c:	00d9      	lsls	r1, r3, #3
 8000a4e:	23a0      	movs	r3, #160	@ 0xa0
 8000a50:	05db      	lsls	r3, r3, #23
 8000a52:	2200      	movs	r2, #0
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 ffe5 	bl	8001a24 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000a5a:	2380      	movs	r3, #128	@ 0x80
 8000a5c:	0099      	lsls	r1, r3, #2
 8000a5e:	23a0      	movs	r3, #160	@ 0xa0
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	2200      	movs	r2, #0
 8000a64:	0018      	movs	r0, r3
 8000a66:	f000 ffdd 	bl	8001a24 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000a6a:	2380      	movs	r3, #128	@ 0x80
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	4862      	ldr	r0, [pc, #392]	@ (8000bf8 <main+0x3c8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	0019      	movs	r1, r3
 8000a74:	f000 ffd6 	bl	8001a24 <HAL_GPIO_WritePin>
            g_ledFeedbackActive = 0;
 8000a78:	4b66      	ldr	r3, [pc, #408]	@ (8000c14 <main+0x3e4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 8000a7e:	e0b8      	b.n	8000bf2 <main+0x3c2>

      case STATE_EVALUATE_SEQUENCE:

        DisableGameButtonInterrupts();
 8000a80:	f7ff fe1c 	bl	80006bc <DisableGameButtonInterrupts>

        if (g_ledFeedbackActive > 0)
 8000a84:	4b63      	ldr	r3, [pc, #396]	@ (8000c14 <main+0x3e4>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d014      	beq.n	8000ab8 <main+0x288>
        {
            uint32_t currentTimeEval = HAL_GetTick();
 8000a8e:	f000 fd0d 	bl	80014ac <HAL_GetTick>
 8000a92:	0003      	movs	r3, r0
 8000a94:	607b      	str	r3, [r7, #4]
            if (currentTimeEval - g_ledFeedbackStartTime < LED_FEEDBACK_DURATION_MS)
 8000a96:	4b60      	ldr	r3, [pc, #384]	@ (8000c18 <main+0x3e8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	1ad2      	subs	r2, r2, r3
 8000a9e:	2396      	movs	r3, #150	@ 0x96
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d208      	bcs.n	8000ab8 <main+0x288>
            {
                HAL_Delay(LED_FEEDBACK_DURATION_MS - (currentTimeEval - g_ledFeedbackStartTime));
 8000aa6:	4b5c      	ldr	r3, [pc, #368]	@ (8000c18 <main+0x3e8>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	332d      	adds	r3, #45	@ 0x2d
 8000ab0:	33ff      	adds	r3, #255	@ 0xff
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fd04 	bl	80014c0 <HAL_Delay>
            }
        }

        HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000ab8:	2380      	movs	r3, #128	@ 0x80
 8000aba:	00d9      	lsls	r1, r3, #3
 8000abc:	23a0      	movs	r3, #160	@ 0xa0
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 ffae 	bl	8001a24 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000ac8:	2380      	movs	r3, #128	@ 0x80
 8000aca:	0099      	lsls	r1, r3, #2
 8000acc:	23a0      	movs	r3, #160	@ 0xa0
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 ffa6 	bl	8001a24 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000ad8:	2380      	movs	r3, #128	@ 0x80
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	4846      	ldr	r0, [pc, #280]	@ (8000bf8 <main+0x3c8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	f000 ff9f 	bl	8001a24 <HAL_GPIO_WritePin>
        g_ledFeedbackActive = 0;
 8000ae6:	4b4b      	ldr	r3, [pc, #300]	@ (8000c14 <main+0x3e4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]

        _Bool sequenceMatch = 1;
 8000aec:	2317      	movs	r3, #23
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < SEQUENCE_LENGTH; i++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	e011      	b.n	8000b1e <main+0x2ee>
        {
          if (g_generatedSequence[i] != g_playerSequence[i])
 8000afa:	4a45      	ldr	r2, [pc, #276]	@ (8000c10 <main+0x3e0>)
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	18d3      	adds	r3, r2, r3
 8000b00:	781a      	ldrb	r2, [r3, #0]
 8000b02:	4942      	ldr	r1, [pc, #264]	@ (8000c0c <main+0x3dc>)
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	18cb      	adds	r3, r1, r3
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d004      	beq.n	8000b18 <main+0x2e8>
          {
            sequenceMatch = 0;
 8000b0e:	2317      	movs	r3, #23
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
            break;
 8000b16:	e005      	b.n	8000b24 <main+0x2f4>
        for (int i = 0; i < SEQUENCE_LENGTH; i++)
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	ddea      	ble.n	8000afa <main+0x2ca>
          }
        }

        HAL_Delay(1000);
 8000b24:	23fa      	movs	r3, #250	@ 0xfa
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f000 fcc9 	bl	80014c0 <HAL_Delay>
        if (sequenceMatch) { g_gameState = STATE_SUCCESS_BLINK; }
 8000b2e:	2317      	movs	r3, #23
 8000b30:	18fb      	adds	r3, r7, r3
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <main+0x310>
 8000b38:	4b30      	ldr	r3, [pc, #192]	@ (8000bfc <main+0x3cc>)
 8000b3a:	2205      	movs	r2, #5
 8000b3c:	701a      	strb	r2, [r3, #0]
        else { g_gameState = STATE_FAILURE_BLINK; }
        break;
 8000b3e:	e059      	b.n	8000bf4 <main+0x3c4>
        else { g_gameState = STATE_FAILURE_BLINK; }
 8000b40:	4b2e      	ldr	r3, [pc, #184]	@ (8000bfc <main+0x3cc>)
 8000b42:	2206      	movs	r2, #6
 8000b44:	701a      	strb	r2, [r3, #0]
        break;
 8000b46:	e055      	b.n	8000bf4 <main+0x3c4>

      case STATE_SUCCESS_BLINK:

    	EnableStartButtonInterrupt();
 8000b48:	f7ff fdc4 	bl	80006d4 <EnableStartButtonInterrupt>
        for (int i = 0; i < 2; i++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	e018      	b.n	8000b84 <main+0x354>
        {
          HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8000b52:	2380      	movs	r3, #128	@ 0x80
 8000b54:	0059      	lsls	r1, r3, #1
 8000b56:	23a0      	movs	r3, #160	@ 0xa0
 8000b58:	05db      	lsls	r3, r3, #23
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f000 ff61 	bl	8001a24 <HAL_GPIO_WritePin>
          HAL_Delay(250);
 8000b62:	20fa      	movs	r0, #250	@ 0xfa
 8000b64:	f000 fcac 	bl	80014c0 <HAL_Delay>
          HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8000b68:	2380      	movs	r3, #128	@ 0x80
 8000b6a:	0059      	lsls	r1, r3, #1
 8000b6c:	23a0      	movs	r3, #160	@ 0xa0
 8000b6e:	05db      	lsls	r3, r3, #23
 8000b70:	2200      	movs	r2, #0
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 ff56 	bl	8001a24 <HAL_GPIO_WritePin>
          HAL_Delay(250);
 8000b78:	20fa      	movs	r0, #250	@ 0xfa
 8000b7a:	f000 fca1 	bl	80014c0 <HAL_Delay>
        for (int i = 0; i < 2; i++)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	3301      	adds	r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	dde3      	ble.n	8000b52 <main+0x322>
        }
        HAL_Delay(1000);
 8000b8a:	23fa      	movs	r3, #250	@ 0xfa
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 fc96 	bl	80014c0 <HAL_Delay>
        g_gameState = STATE_GENERATE_AND_DISPLAY_SEQUENCE;
 8000b94:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <main+0x3cc>)
 8000b96:	2202      	movs	r2, #2
 8000b98:	701a      	strb	r2, [r3, #0]
        break;
 8000b9a:	e02b      	b.n	8000bf4 <main+0x3c4>

      case STATE_FAILURE_BLINK:

    	  BuzzerBeep(BUZZER_DURATION);
 8000b9c:	20c8      	movs	r0, #200	@ 0xc8
 8000b9e:	f7ff fdbd 	bl	800071c <BuzzerBeep>
        for (int i = 0; i < 3; i++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	e018      	b.n	8000bda <main+0x3aa>
        {
          HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8000ba8:	2380      	movs	r3, #128	@ 0x80
 8000baa:	0059      	lsls	r1, r3, #1
 8000bac:	23a0      	movs	r3, #160	@ 0xa0
 8000bae:	05db      	lsls	r3, r3, #23
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 ff36 	bl	8001a24 <HAL_GPIO_WritePin>
          HAL_Delay(250);
 8000bb8:	20fa      	movs	r0, #250	@ 0xfa
 8000bba:	f000 fc81 	bl	80014c0 <HAL_Delay>
          HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8000bbe:	2380      	movs	r3, #128	@ 0x80
 8000bc0:	0059      	lsls	r1, r3, #1
 8000bc2:	23a0      	movs	r3, #160	@ 0xa0
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 ff2b 	bl	8001a24 <HAL_GPIO_WritePin>
          HAL_Delay(250);
 8000bce:	20fa      	movs	r0, #250	@ 0xfa
 8000bd0:	f000 fc76 	bl	80014c0 <HAL_Delay>
        for (int i = 0; i < 3; i++)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	dde3      	ble.n	8000ba8 <main+0x378>
        }
        HAL_Delay(1000);
 8000be0:	23fa      	movs	r3, #250	@ 0xfa
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 fc6b 	bl	80014c0 <HAL_Delay>
        g_gameState = STATE_GENERATE_AND_DISPLAY_SEQUENCE;
 8000bea:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <main+0x3cc>)
 8000bec:	2202      	movs	r2, #2
 8000bee:	701a      	strb	r2, [r3, #0]
        break;
 8000bf0:	e000      	b.n	8000bf4 <main+0x3c4>
        break;
 8000bf2:	46c0      	nop			@ (mov r8, r8)
    switch (g_gameState)
 8000bf4:	e64a      	b.n	800088c <main+0x5c>
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	50000400 	.word	0x50000400
 8000bfc:	2000010c 	.word	0x2000010c
 8000c00:	0800446c 	.word	0x0800446c
 8000c04:	2000010d 	.word	0x2000010d
 8000c08:	20000118 	.word	0x20000118
 8000c0c:	20000114 	.word	0x20000114
 8000c10:	20000110 	.word	0x20000110
 8000c14:	20000119 	.word	0x20000119
 8000c18:	2000011c 	.word	0x2000011c

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b09f      	sub	sp, #124	@ 0x7c
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	2440      	movs	r4, #64	@ 0x40
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	0018      	movs	r0, r3
 8000c28:	2338      	movs	r3, #56	@ 0x38
 8000c2a:	001a      	movs	r2, r3
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f002 fcfd 	bl	800362c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c32:	232c      	movs	r3, #44	@ 0x2c
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	0018      	movs	r0, r3
 8000c38:	2314      	movs	r3, #20
 8000c3a:	001a      	movs	r2, r3
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	f002 fcf5 	bl	800362c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	0018      	movs	r0, r3
 8000c46:	2328      	movs	r3, #40	@ 0x28
 8000c48:	001a      	movs	r2, r3
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	f002 fcee 	bl	800362c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c50:	4b26      	ldr	r3, [pc, #152]	@ (8000cec <SystemClock_Config+0xd0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a26      	ldr	r2, [pc, #152]	@ (8000cf0 <SystemClock_Config+0xd4>)
 8000c56:	401a      	ands	r2, r3
 8000c58:	4b24      	ldr	r3, [pc, #144]	@ (8000cec <SystemClock_Config+0xd0>)
 8000c5a:	2180      	movs	r1, #128	@ 0x80
 8000c5c:	0109      	lsls	r1, r1, #4
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c62:	0021      	movs	r1, r4
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2210      	movs	r2, #16
 8000c68:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	22a0      	movs	r2, #160	@ 0xa0
 8000c7a:	0212      	lsls	r2, r2, #8
 8000c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2200      	movs	r2, #0
 8000c82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 ff06 	bl	8001a98 <HAL_RCC_OscConfig>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c90:	f000 fa26 	bl	80010e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c94:	212c      	movs	r1, #44	@ 0x2c
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	220f      	movs	r2, #15
 8000c9a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f001 fac1 	bl	8002240 <HAL_RCC_ClockConfig>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000cc2:	f000 fa0d 	bl	80010e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2202      	movs	r2, #2
 8000cca:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f001 fcb7 	bl	8002648 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	1e03      	subs	r3, r0, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000cde:	f000 f9ff 	bl	80010e0 <Error_Handler>
  }
}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b01f      	add	sp, #124	@ 0x7c
 8000ce8:	bd90      	pop	{r4, r7, pc}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	40007000 	.word	0x40007000
 8000cf0:	ffffe7ff 	.word	0xffffe7ff

08000cf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_USART2_UART_Init+0x58>)
 8000cfa:	4a15      	ldr	r2, [pc, #84]	@ (8000d50 <MX_USART2_UART_Init+0x5c>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <MX_USART2_UART_Init+0x58>)
 8000d00:	22e1      	movs	r2, #225	@ 0xe1
 8000d02:	0252      	lsls	r2, r2, #9
 8000d04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <MX_USART2_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_USART2_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_USART2_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_USART2_UART_Init+0x58>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <MX_USART2_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_USART2_UART_Init+0x58>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <MX_USART2_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_USART2_UART_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d36:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <MX_USART2_UART_Init+0x58>)
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f001 fe23 	bl	8002984 <HAL_UART_Init>
 8000d3e:	1e03      	subs	r3, r0, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d42:	f000 f9cd 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000084 	.word	0x20000084
 8000d50:	40004400 	.word	0x40004400

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b08b      	sub	sp, #44	@ 0x2c
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	2414      	movs	r4, #20
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	0018      	movs	r0, r3
 8000d60:	2314      	movs	r3, #20
 8000d62:	001a      	movs	r2, r3
 8000d64:	2100      	movs	r1, #0
 8000d66:	f002 fc61 	bl	800362c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8000edc <MX_GPIO_Init+0x188>)
 8000d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8000edc <MX_GPIO_Init+0x188>)
 8000d70:	2104      	movs	r1, #4
 8000d72:	430a      	orrs	r2, r1
 8000d74:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d76:	4b59      	ldr	r3, [pc, #356]	@ (8000edc <MX_GPIO_Init+0x188>)
 8000d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d82:	4b56      	ldr	r3, [pc, #344]	@ (8000edc <MX_GPIO_Init+0x188>)
 8000d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d86:	4b55      	ldr	r3, [pc, #340]	@ (8000edc <MX_GPIO_Init+0x188>)
 8000d88:	2180      	movs	r1, #128	@ 0x80
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d8e:	4b53      	ldr	r3, [pc, #332]	@ (8000edc <MX_GPIO_Init+0x188>)
 8000d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d92:	2280      	movs	r2, #128	@ 0x80
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b50      	ldr	r3, [pc, #320]	@ (8000edc <MX_GPIO_Init+0x188>)
 8000d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d9e:	4b4f      	ldr	r3, [pc, #316]	@ (8000edc <MX_GPIO_Init+0x188>)
 8000da0:	2101      	movs	r1, #1
 8000da2:	430a      	orrs	r2, r1
 8000da4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000da6:	4b4d      	ldr	r3, [pc, #308]	@ (8000edc <MX_GPIO_Init+0x188>)
 8000da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000daa:	2201      	movs	r2, #1
 8000dac:	4013      	ands	r3, r2
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b4a      	ldr	r3, [pc, #296]	@ (8000edc <MX_GPIO_Init+0x188>)
 8000db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000db6:	4b49      	ldr	r3, [pc, #292]	@ (8000edc <MX_GPIO_Init+0x188>)
 8000db8:	2102      	movs	r1, #2
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dbe:	4b47      	ldr	r3, [pc, #284]	@ (8000edc <MX_GPIO_Init+0x188>)
 8000dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|INDICATOR_LED_Pin|GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000dca:	23e4      	movs	r3, #228	@ 0xe4
 8000dcc:	00d9      	lsls	r1, r3, #3
 8000dce:	23a0      	movs	r3, #160	@ 0xa0
 8000dd0:	05db      	lsls	r3, r3, #23
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f000 fe25 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YELLOW_LED_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000dda:	2388      	movs	r3, #136	@ 0x88
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	4840      	ldr	r0, [pc, #256]	@ (8000ee0 <MX_GPIO_Init+0x18c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	0019      	movs	r1, r3
 8000de4:	f000 fe1e 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_BUTTON_Pin GREEN_BUTTON_Pin */
  GPIO_InitStruct.Pin = RED_BUTTON_Pin|GREEN_BUTTON_Pin;
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	2203      	movs	r2, #3
 8000dec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	2284      	movs	r2, #132	@ 0x84
 8000df2:	0392      	lsls	r2, r2, #14
 8000df4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	2201      	movs	r2, #1
 8000dfa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	4a39      	ldr	r2, [pc, #228]	@ (8000ee4 <MX_GPIO_Init+0x190>)
 8000e00:	0019      	movs	r1, r3
 8000e02:	0010      	movs	r0, r2
 8000e04:	f000 fc90 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin INDICATOR_LED_Pin GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|INDICATOR_LED_Pin|GREEN_LED_Pin|RED_LED_Pin;
 8000e08:	0021      	movs	r1, r4
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	22e4      	movs	r2, #228	@ 0xe4
 8000e0e:	00d2      	lsls	r2, r2, #3
 8000e10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	000c      	movs	r4, r1
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	2201      	movs	r2, #1
 8000e18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	193b      	adds	r3, r7, r4
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	193a      	adds	r2, r7, r4
 8000e28:	23a0      	movs	r3, #160	@ 0xa0
 8000e2a:	05db      	lsls	r3, r3, #23
 8000e2c:	0011      	movs	r1, r2
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f000 fc7a 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	2240      	movs	r2, #64	@ 0x40
 8000e38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	2284      	movs	r2, #132	@ 0x84
 8000e3e:	0392      	lsls	r2, r2, #14
 8000e40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e42:	193b      	adds	r3, r7, r4
 8000e44:	2201      	movs	r2, #1
 8000e46:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e48:	193a      	adds	r2, r7, r4
 8000e4a:	23a0      	movs	r3, #160	@ 0xa0
 8000e4c:	05db      	lsls	r3, r3, #23
 8000e4e:	0011      	movs	r1, r2
 8000e50:	0018      	movs	r0, r3
 8000e52:	f000 fc69 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : YELLOW_LED_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|BUZZER_Pin;
 8000e56:	0021      	movs	r1, r4
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2288      	movs	r2, #136	@ 0x88
 8000e5c:	00d2      	lsls	r2, r2, #3
 8000e5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	000c      	movs	r4, r1
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	2201      	movs	r2, #1
 8000e66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	2200      	movs	r2, #0
 8000e72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	4a1a      	ldr	r2, [pc, #104]	@ (8000ee0 <MX_GPIO_Init+0x18c>)
 8000e78:	0019      	movs	r1, r3
 8000e7a:	0010      	movs	r0, r2
 8000e7c:	f000 fc54 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : YELLOW_BUTTON_Pin */
  GPIO_InitStruct.Pin = YELLOW_BUTTON_Pin;
 8000e80:	0021      	movs	r1, r4
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2208      	movs	r2, #8
 8000e86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2284      	movs	r2, #132	@ 0x84
 8000e8c:	0392      	lsls	r2, r2, #14
 8000e8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2201      	movs	r2, #1
 8000e94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(YELLOW_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	4a11      	ldr	r2, [pc, #68]	@ (8000ee0 <MX_GPIO_Init+0x18c>)
 8000e9a:	0019      	movs	r1, r3
 8000e9c:	0010      	movs	r0, r2
 8000e9e:	f000 fc43 	bl	8001728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2005      	movs	r0, #5
 8000ea8:	f000 fbfc 	bl	80016a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000eac:	2005      	movs	r0, #5
 8000eae:	f000 fc0e 	bl	80016ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2006      	movs	r0, #6
 8000eb8:	f000 fbf4 	bl	80016a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000ebc:	2006      	movs	r0, #6
 8000ebe:	f000 fc06 	bl	80016ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2007      	movs	r0, #7
 8000ec8:	f000 fbec 	bl	80016a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ecc:	2007      	movs	r0, #7
 8000ece:	f000 fbfe 	bl	80016ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b00b      	add	sp, #44	@ 0x2c
 8000ed8:	bd90      	pop	{r4, r7, pc}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	50000400 	.word	0x50000400
 8000ee4:	50000800 	.word	0x50000800

08000ee8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	0002      	movs	r2, r0
 8000ef0:	1dbb      	adds	r3, r7, #6
 8000ef2:	801a      	strh	r2, [r3, #0]
  static uint32_t lastButtonPressTime = 0;
  static uint32_t startButtonPressTime = 0;
  uint32_t currentTime = HAL_GetTick();
 8000ef4:	f000 fada 	bl	80014ac <HAL_GetTick>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	60bb      	str	r3, [r7, #8]

  if (currentTime - lastButtonPressTime < DEBOUNCE_TIME_MS) 
 8000efc:	4b6e      	ldr	r3, [pc, #440]	@ (80010b8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2bc7      	cmp	r3, #199	@ 0xc7
 8000f06:	d804      	bhi.n	8000f12 <HAL_GPIO_EXTI_Callback+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f08:	4b6c      	ldr	r3, [pc, #432]	@ (80010bc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000f0a:	1dba      	adds	r2, r7, #6
 8000f0c:	8812      	ldrh	r2, [r2, #0]
 8000f0e:	615a      	str	r2, [r3, #20]
    return;
 8000f10:	e0ce      	b.n	80010b0 <HAL_GPIO_EXTI_Callback+0x1c8>
  }

  if (currentTime - startButtonPressTime < DEBOUNCE_TIME_MS)
 8000f12:	4b6b      	ldr	r3, [pc, #428]	@ (80010c0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2bc7      	cmp	r3, #199	@ 0xc7
 8000f1c:	d804      	bhi.n	8000f28 <HAL_GPIO_EXTI_Callback+0x40>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f1e:	4b67      	ldr	r3, [pc, #412]	@ (80010bc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000f20:	1dba      	adds	r2, r7, #6
 8000f22:	8812      	ldrh	r2, [r2, #0]
 8000f24:	615a      	str	r2, [r3, #20]
    return;
 8000f26:	e0c3      	b.n	80010b0 <HAL_GPIO_EXTI_Callback+0x1c8>
  }

  if (g_gameState == STATE_WAIT_FOR_PLAYER_INPUT && g_currentPlayerInputIndex < SEQUENCE_LENGTH)
 8000f28:	4b66      	ldr	r3, [pc, #408]	@ (80010c4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d000      	beq.n	8000f34 <HAL_GPIO_EXTI_Callback+0x4c>
 8000f32:	e06f      	b.n	8001014 <HAL_GPIO_EXTI_Callback+0x12c>
 8000f34:	4b64      	ldr	r3, [pc, #400]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d86a      	bhi.n	8001014 <HAL_GPIO_EXTI_Callback+0x12c>
  {
    DisableGameButtonInterrupts();
 8000f3e:	f7ff fbbd 	bl	80006bc <DisableGameButtonInterrupts>

    lastButtonPressTime = currentTime;
 8000f42:	4b5d      	ldr	r3, [pc, #372]	@ (80010b8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	601a      	str	r2, [r3, #0]

    if (GPIO_Pin == RED_BUTTON_Pin)
 8000f48:	1dbb      	adds	r3, r7, #6
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d115      	bne.n	8000f7c <HAL_GPIO_EXTI_Callback+0x94>
    {
      g_playerSequence[g_currentPlayerInputIndex] = 0;
 8000f50:	4b5d      	ldr	r3, [pc, #372]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	001a      	movs	r2, r3
 8000f58:	4b5c      	ldr	r3, [pc, #368]	@ (80010cc <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	5499      	strb	r1, [r3, r2]
      HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000f5e:	2380      	movs	r3, #128	@ 0x80
 8000f60:	00d9      	lsls	r1, r3, #3
 8000f62:	23a0      	movs	r3, #160	@ 0xa0
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	2201      	movs	r2, #1
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f000 fd5b 	bl	8001a24 <HAL_GPIO_WritePin>
      g_ledFeedbackActive = 1;
 8000f6e:	4b58      	ldr	r3, [pc, #352]	@ (80010d0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
      g_ledFeedbackStartTime = currentTime;
 8000f74:	4b57      	ldr	r3, [pc, #348]	@ (80010d4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	e037      	b.n	8000fec <HAL_GPIO_EXTI_Callback+0x104>
    }
    else if (GPIO_Pin == GREEN_BUTTON_Pin)
 8000f7c:	1dbb      	adds	r3, r7, #6
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d115      	bne.n	8000fb0 <HAL_GPIO_EXTI_Callback+0xc8>
    {
      g_playerSequence[g_currentPlayerInputIndex] = 1;
 8000f84:	4b50      	ldr	r3, [pc, #320]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	4b4f      	ldr	r3, [pc, #316]	@ (80010cc <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000f8e:	2101      	movs	r1, #1
 8000f90:	5499      	strb	r1, [r3, r2]
      HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8000f92:	2380      	movs	r3, #128	@ 0x80
 8000f94:	0099      	lsls	r1, r3, #2
 8000f96:	23a0      	movs	r3, #160	@ 0xa0
 8000f98:	05db      	lsls	r3, r3, #23
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 fd41 	bl	8001a24 <HAL_GPIO_WritePin>
      g_ledFeedbackActive = 2;
 8000fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80010d0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	701a      	strb	r2, [r3, #0]
      g_ledFeedbackStartTime = currentTime;
 8000fa8:	4b4a      	ldr	r3, [pc, #296]	@ (80010d4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	e01d      	b.n	8000fec <HAL_GPIO_EXTI_Callback+0x104>
    }
    else if (GPIO_Pin == YELLOW_BUTTON_Pin)
 8000fb0:	1dbb      	adds	r3, r7, #6
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d114      	bne.n	8000fe2 <HAL_GPIO_EXTI_Callback+0xfa>
    {
      g_playerSequence[g_currentPlayerInputIndex] = 2;
 8000fb8:	4b43      	ldr	r3, [pc, #268]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	4b42      	ldr	r3, [pc, #264]	@ (80010cc <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000fc2:	2102      	movs	r1, #2
 8000fc4:	5499      	strb	r1, [r3, r2]
      HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET);
 8000fc6:	2380      	movs	r3, #128	@ 0x80
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	4843      	ldr	r0, [pc, #268]	@ (80010d8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	0019      	movs	r1, r3
 8000fd0:	f000 fd28 	bl	8001a24 <HAL_GPIO_WritePin>
      g_ledFeedbackActive = 3;
 8000fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80010d0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	701a      	strb	r2, [r3, #0]
      g_ledFeedbackStartTime = currentTime;
 8000fda:	4b3e      	ldr	r3, [pc, #248]	@ (80010d4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	e004      	b.n	8000fec <HAL_GPIO_EXTI_Callback+0x104>
    }
    else
    {
      __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fe2:	4b36      	ldr	r3, [pc, #216]	@ (80010bc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000fe4:	1dba      	adds	r2, r7, #6
 8000fe6:	8812      	ldrh	r2, [r2, #0]
 8000fe8:	615a      	str	r2, [r3, #20]
      return;
 8000fea:	e061      	b.n	80010b0 <HAL_GPIO_EXTI_Callback+0x1c8>
    }

    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fec:	4b33      	ldr	r3, [pc, #204]	@ (80010bc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000fee:	1dba      	adds	r2, r7, #6
 8000ff0:	8812      	ldrh	r2, [r2, #0]
 8000ff2:	615a      	str	r2, [r3, #20]

    g_currentPlayerInputIndex++;
 8000ff4:	4b34      	ldr	r3, [pc, #208]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b32      	ldr	r3, [pc, #200]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001000:	701a      	strb	r2, [r3, #0]

    if ( g_currentPlayerInputIndex >= SEQUENCE_LENGTH )
 8001002:	4b31      	ldr	r3, [pc, #196]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b03      	cmp	r3, #3
 800100a:	d951      	bls.n	80010b0 <HAL_GPIO_EXTI_Callback+0x1c8>
    {
      g_gameState = STATE_EVALUATE_SEQUENCE;
 800100c:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800100e:	2204      	movs	r2, #4
 8001010:	701a      	strb	r2, [r3, #0]
    if ( g_currentPlayerInputIndex >= SEQUENCE_LENGTH )
 8001012:	e04d      	b.n	80010b0 <HAL_GPIO_EXTI_Callback+0x1c8>
    }
  }
  else if ( g_gameState == STATE_IDLE )
 8001014:	4b2b      	ldr	r3, [pc, #172]	@ (80010c4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d144      	bne.n	80010a8 <HAL_GPIO_EXTI_Callback+0x1c0>
  {
    DisableStartButtonInterrupt();
 800101e:	f7ff fb67 	bl	80006f0 <DisableStartButtonInterrupt>

    if (GPIO_Pin == RED_BUTTON_Pin || GPIO_Pin == GREEN_BUTTON_Pin || GPIO_Pin == YELLOW_BUTTON_Pin)
 8001022:	1dbb      	adds	r3, r7, #6
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d007      	beq.n	800103a <HAL_GPIO_EXTI_Callback+0x152>
 800102a:	1dbb      	adds	r3, r7, #6
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d003      	beq.n	800103a <HAL_GPIO_EXTI_Callback+0x152>
 8001032:	1dbb      	adds	r3, r7, #6
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	2b08      	cmp	r3, #8
 8001038:	d104      	bne.n	8001044 <HAL_GPIO_EXTI_Callback+0x15c>
    {
      __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800103a:	4b20      	ldr	r3, [pc, #128]	@ (80010bc <HAL_GPIO_EXTI_Callback+0x1d4>)
 800103c:	1dba      	adds	r2, r7, #6
 800103e:	8812      	ldrh	r2, [r2, #0]
 8001040:	615a      	str	r2, [r3, #20]
      return;
 8001042:	e035      	b.n	80010b0 <HAL_GPIO_EXTI_Callback+0x1c8>
    }
    else if (GPIO_Pin == START_BUTTON_Pin)
 8001044:	1dbb      	adds	r3, r7, #6
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	2b40      	cmp	r3, #64	@ 0x40
 800104a:	d128      	bne.n	800109e <HAL_GPIO_EXTI_Callback+0x1b6>
    {
      startButtonPressTime = currentTime;
 800104c:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	601a      	str	r2, [r3, #0]
      if (!g_gameRunning)
 8001052:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2201      	movs	r2, #1
 800105a:	4053      	eors	r3, r2
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d017      	beq.n	8001092 <HAL_GPIO_EXTI_Callback+0x1aa>
      {
        g_gameRunning = true;
 8001062:	4b1e      	ldr	r3, [pc, #120]	@ (80010dc <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
        g_gameState = STATE_STARTUP;
 8001068:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
        g_currentPlayerInputIndex = 0;
 800106e:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < SEQUENCE_LENGTH; i++)
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e007      	b.n	800108a <HAL_GPIO_EXTI_Callback+0x1a2>
        {
          g_playerSequence[i] = 0;
 800107a:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <HAL_GPIO_EXTI_Callback+0x1e4>)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	18d3      	adds	r3, r2, r3
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < SEQUENCE_LENGTH; i++)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3301      	adds	r3, #1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2b03      	cmp	r3, #3
 800108e:	ddf4      	ble.n	800107a <HAL_GPIO_EXTI_Callback+0x192>
 8001090:	e005      	b.n	800109e <HAL_GPIO_EXTI_Callback+0x1b6>
        }
      }
      else
      {
        g_gameRunning = false;
 8001092:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
        g_gameState = STATE_IDLE;
 8001098:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800109e:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <HAL_GPIO_EXTI_Callback+0x1d4>)
 80010a0:	1dba      	adds	r2, r7, #6
 80010a2:	8812      	ldrh	r2, [r2, #0]
 80010a4:	615a      	str	r2, [r3, #20]
 80010a6:	e003      	b.n	80010b0 <HAL_GPIO_EXTI_Callback+0x1c8>
  }
  else
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010a8:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <HAL_GPIO_EXTI_Callback+0x1d4>)
 80010aa:	1dba      	adds	r2, r7, #6
 80010ac:	8812      	ldrh	r2, [r2, #0]
 80010ae:	615a      	str	r2, [r3, #20]
  }
}
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b004      	add	sp, #16
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	20000120 	.word	0x20000120
 80010bc:	40010400 	.word	0x40010400
 80010c0:	20000124 	.word	0x20000124
 80010c4:	2000010c 	.word	0x2000010c
 80010c8:	20000118 	.word	0x20000118
 80010cc:	20000114 	.word	0x20000114
 80010d0:	20000119 	.word	0x20000119
 80010d4:	2000011c 	.word	0x2000011c
 80010d8:	50000400 	.word	0x50000400
 80010dc:	2000010d 	.word	0x2000010d

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e8:	46c0      	nop			@ (mov r8, r8)
 80010ea:	e7fd      	b.n	80010e8 <Error_Handler+0x8>

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f0:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <HAL_MspInit+0x24>)
 80010f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_MspInit+0x24>)
 80010f6:	2101      	movs	r1, #1
 80010f8:	430a      	orrs	r2, r1
 80010fa:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <HAL_MspInit+0x24>)
 80010fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001100:	4b03      	ldr	r3, [pc, #12]	@ (8001110 <HAL_MspInit+0x24>)
 8001102:	2180      	movs	r1, #128	@ 0x80
 8001104:	0549      	lsls	r1, r1, #21
 8001106:	430a      	orrs	r2, r1
 8001108:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40021000 	.word	0x40021000

08001114 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b089      	sub	sp, #36	@ 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	240c      	movs	r4, #12
 800111e:	193b      	adds	r3, r7, r4
 8001120:	0018      	movs	r0, r3
 8001122:	2314      	movs	r3, #20
 8001124:	001a      	movs	r2, r3
 8001126:	2100      	movs	r1, #0
 8001128:	f002 fa80 	bl	800362c <memset>
  if(huart->Instance==USART2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a18      	ldr	r2, [pc, #96]	@ (8001194 <HAL_UART_MspInit+0x80>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d129      	bne.n	800118a <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001136:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <HAL_UART_MspInit+0x84>)
 8001138:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <HAL_UART_MspInit+0x84>)
 800113c:	2180      	movs	r1, #128	@ 0x80
 800113e:	0289      	lsls	r1, r1, #10
 8001140:	430a      	orrs	r2, r1
 8001142:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <HAL_UART_MspInit+0x84>)
 8001146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001148:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <HAL_UART_MspInit+0x84>)
 800114a:	2101      	movs	r1, #1
 800114c:	430a      	orrs	r2, r1
 800114e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <HAL_UART_MspInit+0x84>)
 8001152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001154:	2201      	movs	r2, #1
 8001156:	4013      	ands	r3, r2
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800115c:	0021      	movs	r1, r4
 800115e:	187b      	adds	r3, r7, r1
 8001160:	220c      	movs	r2, #12
 8001162:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2202      	movs	r2, #2
 8001168:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	187b      	adds	r3, r7, r1
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	187b      	adds	r3, r7, r1
 8001172:	2203      	movs	r2, #3
 8001174:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2204      	movs	r2, #4
 800117a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	187a      	adds	r2, r7, r1
 800117e:	23a0      	movs	r3, #160	@ 0xa0
 8001180:	05db      	lsls	r3, r3, #23
 8001182:	0011      	movs	r1, r2
 8001184:	0018      	movs	r0, r3
 8001186:	f000 facf 	bl	8001728 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b009      	add	sp, #36	@ 0x24
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	40004400 	.word	0x40004400
 8001198:	40021000 	.word	0x40021000

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011a0:	46c0      	nop			@ (mov r8, r8)
 80011a2:	e7fd      	b.n	80011a0 <NMI_Handler+0x4>

080011a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a8:	46c0      	nop			@ (mov r8, r8)
 80011aa:	e7fd      	b.n	80011a8 <HardFault_Handler+0x4>

080011ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011b0:	46c0      	nop			@ (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c4:	f000 f960 	bl	8001488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RED_BUTTON_Pin);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f000 fc44 	bl	8001a60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GREEN_BUTTON_Pin);
 80011d8:	2002      	movs	r0, #2
 80011da:	f000 fc41 	bl	8001a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(YELLOW_BUTTON_Pin);
 80011e8:	2008      	movs	r0, #8
 80011ea:	f000 fc39 	bl	8001a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(START_BUTTON_Pin);
 80011f8:	2040      	movs	r0, #64	@ 0x40
 80011fa:	f000 fc31 	bl	8001a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  return 1;
 8001208:	2301      	movs	r3, #1
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_kill>:

int _kill(int pid, int sig)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800121a:	f002 fa0f 	bl	800363c <__errno>
 800121e:	0003      	movs	r3, r0
 8001220:	2216      	movs	r2, #22
 8001222:	601a      	str	r2, [r3, #0]
  return -1;
 8001224:	2301      	movs	r3, #1
 8001226:	425b      	negs	r3, r3
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}

08001230 <_exit>:

void _exit (int status)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001238:	2301      	movs	r3, #1
 800123a:	425a      	negs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	0011      	movs	r1, r2
 8001240:	0018      	movs	r0, r3
 8001242:	f7ff ffe5 	bl	8001210 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	e7fd      	b.n	8001246 <_exit+0x16>

0800124a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	e00a      	b.n	8001272 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800125c:	e000      	b.n	8001260 <_read+0x16>
 800125e:	bf00      	nop
 8001260:	0001      	movs	r1, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	60ba      	str	r2, [r7, #8]
 8001268:	b2ca      	uxtb	r2, r1
 800126a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	429a      	cmp	r2, r3
 8001278:	dbf0      	blt.n	800125c <_read+0x12>
  }

  return len;
 800127a:	687b      	ldr	r3, [r7, #4]
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b006      	add	sp, #24
 8001282:	bd80      	pop	{r7, pc}

08001284 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	e009      	b.n	80012aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	60ba      	str	r2, [r7, #8]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	0018      	movs	r0, r3
 80012a0:	e000      	b.n	80012a4 <_write+0x20>
 80012a2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3301      	adds	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	dbf1      	blt.n	8001296 <_write+0x12>
  }
  return len;
 80012b2:	687b      	ldr	r3, [r7, #4]
}
 80012b4:	0018      	movs	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b006      	add	sp, #24
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_close>:

int _close(int file)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	425b      	negs	r3, r3
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b002      	add	sp, #8
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	2280      	movs	r2, #128	@ 0x80
 80012de:	0192      	lsls	r2, r2, #6
 80012e0:	605a      	str	r2, [r3, #4]
  return 0;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	0018      	movs	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b002      	add	sp, #8
 80012ea:	bd80      	pop	{r7, pc}

080012ec <_isatty>:

int _isatty(int file)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	0018      	movs	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b002      	add	sp, #8
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800130a:	2300      	movs	r3, #0
}
 800130c:	0018      	movs	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	b004      	add	sp, #16
 8001312:	bd80      	pop	{r7, pc}

08001314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800131c:	4a14      	ldr	r2, [pc, #80]	@ (8001370 <_sbrk+0x5c>)
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <_sbrk+0x60>)
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001330:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <_sbrk+0x64>)
 8001332:	4a12      	ldr	r2, [pc, #72]	@ (800137c <_sbrk+0x68>)
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001336:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	18d3      	adds	r3, r2, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	429a      	cmp	r2, r3
 8001342:	d207      	bcs.n	8001354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001344:	f002 f97a 	bl	800363c <__errno>
 8001348:	0003      	movs	r3, r0
 800134a:	220c      	movs	r2, #12
 800134c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134e:	2301      	movs	r3, #1
 8001350:	425b      	negs	r3, r3
 8001352:	e009      	b.n	8001368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001354:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	18d2      	adds	r2, r2, r3
 8001362:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <_sbrk+0x64>)
 8001364:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	b006      	add	sp, #24
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20005000 	.word	0x20005000
 8001374:	00000400 	.word	0x00000400
 8001378:	20000128 	.word	0x20000128
 800137c:	20000280 	.word	0x20000280

08001380 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001384:	46c0      	nop			@ (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800138c:	480d      	ldr	r0, [pc, #52]	@ (80013c4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800138e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001390:	f7ff fff6 	bl	8001380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001394:	480c      	ldr	r0, [pc, #48]	@ (80013c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001396:	490d      	ldr	r1, [pc, #52]	@ (80013cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001398:	4a0d      	ldr	r2, [pc, #52]	@ (80013d0 <LoopForever+0xe>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ac:	4c0a      	ldr	r4, [pc, #40]	@ (80013d8 <LoopForever+0x16>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80013ba:	f002 f945 	bl	8003648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013be:	f7ff fa37 	bl	8000830 <main>

080013c2 <LoopForever>:

LoopForever:
    b LoopForever
 80013c2:	e7fe      	b.n	80013c2 <LoopForever>
   ldr   r0, =_estack
 80013c4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80013c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013cc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013d0:	080045e4 	.word	0x080045e4
  ldr r2, =_sbss
 80013d4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013d8:	2000027c 	.word	0x2000027c

080013dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013dc:	e7fe      	b.n	80013dc <ADC1_COMP_IRQHandler>
	...

080013e0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80013ec:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <HAL_Init+0x3c>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_Init+0x3c>)
 80013f2:	2140      	movs	r1, #64	@ 0x40
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f8:	2000      	movs	r0, #0
 80013fa:	f000 f811 	bl	8001420 <HAL_InitTick>
 80013fe:	1e03      	subs	r3, r0, #0
 8001400:	d003      	beq.n	800140a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	e001      	b.n	800140e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800140a:	f7ff fe6f 	bl	80010ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
}
 8001412:	0018      	movs	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	b002      	add	sp, #8
 8001418:	bd80      	pop	{r7, pc}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	40022000 	.word	0x40022000

08001420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001428:	4b14      	ldr	r3, [pc, #80]	@ (800147c <HAL_InitTick+0x5c>)
 800142a:	681c      	ldr	r4, [r3, #0]
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <HAL_InitTick+0x60>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	0019      	movs	r1, r3
 8001432:	23fa      	movs	r3, #250	@ 0xfa
 8001434:	0098      	lsls	r0, r3, #2
 8001436:	f7fe fe71 	bl	800011c <__udivsi3>
 800143a:	0003      	movs	r3, r0
 800143c:	0019      	movs	r1, r3
 800143e:	0020      	movs	r0, r4
 8001440:	f7fe fe6c 	bl	800011c <__udivsi3>
 8001444:	0003      	movs	r3, r0
 8001446:	0018      	movs	r0, r3
 8001448:	f000 f961 	bl	800170e <HAL_SYSTICK_Config>
 800144c:	1e03      	subs	r3, r0, #0
 800144e:	d001      	beq.n	8001454 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e00f      	b.n	8001474 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d80b      	bhi.n	8001472 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	2301      	movs	r3, #1
 800145e:	425b      	negs	r3, r3
 8001460:	2200      	movs	r2, #0
 8001462:	0018      	movs	r0, r3
 8001464:	f000 f91e 	bl	80016a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_InitTick+0x64>)
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e000      	b.n	8001474 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
}
 8001474:	0018      	movs	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	b003      	add	sp, #12
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	20000000 	.word	0x20000000
 8001480:	20000008 	.word	0x20000008
 8001484:	20000004 	.word	0x20000004

08001488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <HAL_IncTick+0x1c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	001a      	movs	r2, r3
 8001492:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <HAL_IncTick+0x20>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	18d2      	adds	r2, r2, r3
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <HAL_IncTick+0x20>)
 800149a:	601a      	str	r2, [r3, #0]
}
 800149c:	46c0      	nop			@ (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			@ (mov r8, r8)
 80014a4:	20000008 	.word	0x20000008
 80014a8:	2000012c 	.word	0x2000012c

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b02      	ldr	r3, [pc, #8]	@ (80014bc <HAL_GetTick+0x10>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	0018      	movs	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	2000012c 	.word	0x2000012c

080014c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff fff0 	bl	80014ac <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3301      	adds	r3, #1
 80014d8:	d005      	beq.n	80014e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014da:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <HAL_Delay+0x44>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	001a      	movs	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	189b      	adds	r3, r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	f7ff ffe0 	bl	80014ac <HAL_GetTick>
 80014ec:	0002      	movs	r2, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d8f7      	bhi.n	80014e8 <HAL_Delay+0x28>
  {
  }
}
 80014f8:	46c0      	nop			@ (mov r8, r8)
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b004      	add	sp, #16
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	20000008 	.word	0x20000008

08001508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	0002      	movs	r2, r0
 8001510:	1dfb      	adds	r3, r7, #7
 8001512:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001514:	1dfb      	adds	r3, r7, #7
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b7f      	cmp	r3, #127	@ 0x7f
 800151a:	d809      	bhi.n	8001530 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151c:	1dfb      	adds	r3, r7, #7
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	001a      	movs	r2, r3
 8001522:	231f      	movs	r3, #31
 8001524:	401a      	ands	r2, r3
 8001526:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <__NVIC_EnableIRQ+0x30>)
 8001528:	2101      	movs	r1, #1
 800152a:	4091      	lsls	r1, r2
 800152c:	000a      	movs	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
  }
}
 8001530:	46c0      	nop			@ (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	b002      	add	sp, #8
 8001536:	bd80      	pop	{r7, pc}
 8001538:	e000e100 	.word	0xe000e100

0800153c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	0002      	movs	r2, r0
 8001544:	1dfb      	adds	r3, r7, #7
 8001546:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001548:	1dfb      	adds	r3, r7, #7
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b7f      	cmp	r3, #127	@ 0x7f
 800154e:	d810      	bhi.n	8001572 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001550:	1dfb      	adds	r3, r7, #7
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	001a      	movs	r2, r3
 8001556:	231f      	movs	r3, #31
 8001558:	4013      	ands	r3, r2
 800155a:	4908      	ldr	r1, [pc, #32]	@ (800157c <__NVIC_DisableIRQ+0x40>)
 800155c:	2201      	movs	r2, #1
 800155e:	409a      	lsls	r2, r3
 8001560:	0013      	movs	r3, r2
 8001562:	2280      	movs	r2, #128	@ 0x80
 8001564:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001566:	f3bf 8f4f 	dsb	sy
}
 800156a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800156c:	f3bf 8f6f 	isb	sy
}
 8001570:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8001572:	46c0      	nop			@ (mov r8, r8)
 8001574:	46bd      	mov	sp, r7
 8001576:	b002      	add	sp, #8
 8001578:	bd80      	pop	{r7, pc}
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	0002      	movs	r2, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b7f      	cmp	r3, #127	@ 0x7f
 8001594:	d828      	bhi.n	80015e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001596:	4a2f      	ldr	r2, [pc, #188]	@ (8001654 <__NVIC_SetPriority+0xd4>)
 8001598:	1dfb      	adds	r3, r7, #7
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b25b      	sxtb	r3, r3
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	33c0      	adds	r3, #192	@ 0xc0
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	589b      	ldr	r3, [r3, r2]
 80015a6:	1dfa      	adds	r2, r7, #7
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	0011      	movs	r1, r2
 80015ac:	2203      	movs	r2, #3
 80015ae:	400a      	ands	r2, r1
 80015b0:	00d2      	lsls	r2, r2, #3
 80015b2:	21ff      	movs	r1, #255	@ 0xff
 80015b4:	4091      	lsls	r1, r2
 80015b6:	000a      	movs	r2, r1
 80015b8:	43d2      	mvns	r2, r2
 80015ba:	401a      	ands	r2, r3
 80015bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	019b      	lsls	r3, r3, #6
 80015c2:	22ff      	movs	r2, #255	@ 0xff
 80015c4:	401a      	ands	r2, r3
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	0018      	movs	r0, r3
 80015cc:	2303      	movs	r3, #3
 80015ce:	4003      	ands	r3, r0
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d4:	481f      	ldr	r0, [pc, #124]	@ (8001654 <__NVIC_SetPriority+0xd4>)
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	430a      	orrs	r2, r1
 80015e0:	33c0      	adds	r3, #192	@ 0xc0
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015e6:	e031      	b.n	800164c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001658 <__NVIC_SetPriority+0xd8>)
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	0019      	movs	r1, r3
 80015f0:	230f      	movs	r3, #15
 80015f2:	400b      	ands	r3, r1
 80015f4:	3b08      	subs	r3, #8
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3306      	adds	r3, #6
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	18d3      	adds	r3, r2, r3
 80015fe:	3304      	adds	r3, #4
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	1dfa      	adds	r2, r7, #7
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	0011      	movs	r1, r2
 8001608:	2203      	movs	r2, #3
 800160a:	400a      	ands	r2, r1
 800160c:	00d2      	lsls	r2, r2, #3
 800160e:	21ff      	movs	r1, #255	@ 0xff
 8001610:	4091      	lsls	r1, r2
 8001612:	000a      	movs	r2, r1
 8001614:	43d2      	mvns	r2, r2
 8001616:	401a      	ands	r2, r3
 8001618:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	019b      	lsls	r3, r3, #6
 800161e:	22ff      	movs	r2, #255	@ 0xff
 8001620:	401a      	ands	r2, r3
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	0018      	movs	r0, r3
 8001628:	2303      	movs	r3, #3
 800162a:	4003      	ands	r3, r0
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001630:	4809      	ldr	r0, [pc, #36]	@ (8001658 <__NVIC_SetPriority+0xd8>)
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	001c      	movs	r4, r3
 8001638:	230f      	movs	r3, #15
 800163a:	4023      	ands	r3, r4
 800163c:	3b08      	subs	r3, #8
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	430a      	orrs	r2, r1
 8001642:	3306      	adds	r3, #6
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	18c3      	adds	r3, r0, r3
 8001648:	3304      	adds	r3, #4
 800164a:	601a      	str	r2, [r3, #0]
}
 800164c:	46c0      	nop			@ (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b003      	add	sp, #12
 8001652:	bd90      	pop	{r4, r7, pc}
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	1e5a      	subs	r2, r3, #1
 8001668:	2380      	movs	r3, #128	@ 0x80
 800166a:	045b      	lsls	r3, r3, #17
 800166c:	429a      	cmp	r2, r3
 800166e:	d301      	bcc.n	8001674 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001670:	2301      	movs	r3, #1
 8001672:	e010      	b.n	8001696 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001674:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <SysTick_Config+0x44>)
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	3a01      	subs	r2, #1
 800167a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167c:	2301      	movs	r3, #1
 800167e:	425b      	negs	r3, r3
 8001680:	2103      	movs	r1, #3
 8001682:	0018      	movs	r0, r3
 8001684:	f7ff ff7c 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <SysTick_Config+0x44>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	4b04      	ldr	r3, [pc, #16]	@ (80016a0 <SysTick_Config+0x44>)
 8001690:	2207      	movs	r2, #7
 8001692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001694:	2300      	movs	r3, #0
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	e000e010 	.word	0xe000e010

080016a4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	210f      	movs	r1, #15
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	1c02      	adds	r2, r0, #0
 80016b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	0011      	movs	r1, r2
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff ff5d 	bl	8001580 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b004      	add	sp, #16
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	0002      	movs	r2, r0
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016da:	1dfb      	adds	r3, r7, #7
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7ff ff11 	bl	8001508 <__NVIC_EnableIRQ>
}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b002      	add	sp, #8
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	0002      	movs	r2, r0
 80016f6:	1dfb      	adds	r3, r7, #7
 80016f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff ff1b 	bl	800153c <__NVIC_DisableIRQ>
}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	46bd      	mov	sp, r7
 800170a:	b002      	add	sp, #8
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff ff9f 	bl	800165c <SysTick_Config>
 800171e:	0003      	movs	r3, r0
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b002      	add	sp, #8
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800173e:	e155      	b.n	80019ec <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2101      	movs	r1, #1
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4091      	lsls	r1, r2
 800174a:	000a      	movs	r2, r1
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d100      	bne.n	8001758 <HAL_GPIO_Init+0x30>
 8001756:	e146      	b.n	80019e6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2203      	movs	r2, #3
 800175e:	4013      	ands	r3, r2
 8001760:	2b01      	cmp	r3, #1
 8001762:	d005      	beq.n	8001770 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2203      	movs	r2, #3
 800176a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800176c:	2b02      	cmp	r3, #2
 800176e:	d130      	bne.n	80017d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	409a      	lsls	r2, r3
 800177e:	0013      	movs	r3, r2
 8001780:	43da      	mvns	r2, r3
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	409a      	lsls	r2, r3
 8001792:	0013      	movs	r3, r2
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a6:	2201      	movs	r2, #1
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	43da      	mvns	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	2201      	movs	r2, #1
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
 80017c4:	0013      	movs	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2203      	movs	r2, #3
 80017d8:	4013      	ands	r3, r2
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d017      	beq.n	800180e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	2203      	movs	r2, #3
 80017ea:	409a      	lsls	r2, r3
 80017ec:	0013      	movs	r3, r2
 80017ee:	43da      	mvns	r2, r3
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	409a      	lsls	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2203      	movs	r2, #3
 8001814:	4013      	ands	r3, r2
 8001816:	2b02      	cmp	r3, #2
 8001818:	d123      	bne.n	8001862 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	0092      	lsls	r2, r2, #2
 8001824:	58d3      	ldr	r3, [r2, r3]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2207      	movs	r2, #7
 800182c:	4013      	ands	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	43da      	mvns	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2107      	movs	r1, #7
 8001846:	400b      	ands	r3, r1
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	409a      	lsls	r2, r3
 800184c:	0013      	movs	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	08da      	lsrs	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3208      	adds	r2, #8
 800185c:	0092      	lsls	r2, r2, #2
 800185e:	6939      	ldr	r1, [r7, #16]
 8001860:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	409a      	lsls	r2, r3
 8001870:	0013      	movs	r3, r2
 8001872:	43da      	mvns	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2203      	movs	r2, #3
 8001880:	401a      	ands	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	409a      	lsls	r2, r3
 8001888:	0013      	movs	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	23c0      	movs	r3, #192	@ 0xc0
 800189c:	029b      	lsls	r3, r3, #10
 800189e:	4013      	ands	r3, r2
 80018a0:	d100      	bne.n	80018a4 <HAL_GPIO_Init+0x17c>
 80018a2:	e0a0      	b.n	80019e6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a4:	4b57      	ldr	r3, [pc, #348]	@ (8001a04 <HAL_GPIO_Init+0x2dc>)
 80018a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018a8:	4b56      	ldr	r3, [pc, #344]	@ (8001a04 <HAL_GPIO_Init+0x2dc>)
 80018aa:	2101      	movs	r1, #1
 80018ac:	430a      	orrs	r2, r1
 80018ae:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b0:	4a55      	ldr	r2, [pc, #340]	@ (8001a08 <HAL_GPIO_Init+0x2e0>)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	589b      	ldr	r3, [r3, r2]
 80018bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2203      	movs	r2, #3
 80018c2:	4013      	ands	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	409a      	lsls	r2, r3
 80018ca:	0013      	movs	r3, r2
 80018cc:	43da      	mvns	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	23a0      	movs	r3, #160	@ 0xa0
 80018d8:	05db      	lsls	r3, r3, #23
 80018da:	429a      	cmp	r2, r3
 80018dc:	d01f      	beq.n	800191e <HAL_GPIO_Init+0x1f6>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4a      	ldr	r2, [pc, #296]	@ (8001a0c <HAL_GPIO_Init+0x2e4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d019      	beq.n	800191a <HAL_GPIO_Init+0x1f2>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a49      	ldr	r2, [pc, #292]	@ (8001a10 <HAL_GPIO_Init+0x2e8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d013      	beq.n	8001916 <HAL_GPIO_Init+0x1ee>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a48      	ldr	r2, [pc, #288]	@ (8001a14 <HAL_GPIO_Init+0x2ec>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00d      	beq.n	8001912 <HAL_GPIO_Init+0x1ea>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a47      	ldr	r2, [pc, #284]	@ (8001a18 <HAL_GPIO_Init+0x2f0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d007      	beq.n	800190e <HAL_GPIO_Init+0x1e6>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a46      	ldr	r2, [pc, #280]	@ (8001a1c <HAL_GPIO_Init+0x2f4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d101      	bne.n	800190a <HAL_GPIO_Init+0x1e2>
 8001906:	2305      	movs	r3, #5
 8001908:	e00a      	b.n	8001920 <HAL_GPIO_Init+0x1f8>
 800190a:	2306      	movs	r3, #6
 800190c:	e008      	b.n	8001920 <HAL_GPIO_Init+0x1f8>
 800190e:	2304      	movs	r3, #4
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x1f8>
 8001912:	2303      	movs	r3, #3
 8001914:	e004      	b.n	8001920 <HAL_GPIO_Init+0x1f8>
 8001916:	2302      	movs	r3, #2
 8001918:	e002      	b.n	8001920 <HAL_GPIO_Init+0x1f8>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_GPIO_Init+0x1f8>
 800191e:	2300      	movs	r3, #0
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	2103      	movs	r1, #3
 8001924:	400a      	ands	r2, r1
 8001926:	0092      	lsls	r2, r2, #2
 8001928:	4093      	lsls	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001930:	4935      	ldr	r1, [pc, #212]	@ (8001a08 <HAL_GPIO_Init+0x2e0>)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	3302      	adds	r3, #2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800193e:	4b38      	ldr	r3, [pc, #224]	@ (8001a20 <HAL_GPIO_Init+0x2f8>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	43da      	mvns	r2, r3
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	2380      	movs	r3, #128	@ 0x80
 8001954:	035b      	lsls	r3, r3, #13
 8001956:	4013      	ands	r3, r2
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001962:	4b2f      	ldr	r3, [pc, #188]	@ (8001a20 <HAL_GPIO_Init+0x2f8>)
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001968:	4b2d      	ldr	r3, [pc, #180]	@ (8001a20 <HAL_GPIO_Init+0x2f8>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	43da      	mvns	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	2380      	movs	r3, #128	@ 0x80
 800197e:	039b      	lsls	r3, r3, #14
 8001980:	4013      	ands	r3, r2
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800198c:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <HAL_GPIO_Init+0x2f8>)
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001992:	4b23      	ldr	r3, [pc, #140]	@ (8001a20 <HAL_GPIO_Init+0x2f8>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	43da      	mvns	r2, r3
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	2380      	movs	r3, #128	@ 0x80
 80019a8:	029b      	lsls	r3, r3, #10
 80019aa:	4013      	ands	r3, r2
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <HAL_GPIO_Init+0x2f8>)
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019bc:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <HAL_GPIO_Init+0x2f8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	43da      	mvns	r2, r3
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	2380      	movs	r3, #128	@ 0x80
 80019d2:	025b      	lsls	r3, r3, #9
 80019d4:	4013      	ands	r3, r2
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <HAL_GPIO_Init+0x2f8>)
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3301      	adds	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	40da      	lsrs	r2, r3
 80019f4:	1e13      	subs	r3, r2, #0
 80019f6:	d000      	beq.n	80019fa <HAL_GPIO_Init+0x2d2>
 80019f8:	e6a2      	b.n	8001740 <HAL_GPIO_Init+0x18>
  }
}
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	46c0      	nop			@ (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b006      	add	sp, #24
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010000 	.word	0x40010000
 8001a0c:	50000400 	.word	0x50000400
 8001a10:	50000800 	.word	0x50000800
 8001a14:	50000c00 	.word	0x50000c00
 8001a18:	50001000 	.word	0x50001000
 8001a1c:	50001c00 	.word	0x50001c00
 8001a20:	40010400 	.word	0x40010400

08001a24 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	0008      	movs	r0, r1
 8001a2e:	0011      	movs	r1, r2
 8001a30:	1cbb      	adds	r3, r7, #2
 8001a32:	1c02      	adds	r2, r0, #0
 8001a34:	801a      	strh	r2, [r3, #0]
 8001a36:	1c7b      	adds	r3, r7, #1
 8001a38:	1c0a      	adds	r2, r1, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a3c:	1c7b      	adds	r3, r7, #1
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a44:	1cbb      	adds	r3, r7, #2
 8001a46:	881a      	ldrh	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001a4c:	e003      	b.n	8001a56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001a4e:	1cbb      	adds	r3, r7, #2
 8001a50:	881a      	ldrh	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a56:	46c0      	nop			@ (mov r8, r8)
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b002      	add	sp, #8
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	0002      	movs	r2, r0
 8001a68:	1dbb      	adds	r3, r7, #6
 8001a6a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a6c:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	1dba      	adds	r2, r7, #6
 8001a72:	8812      	ldrh	r2, [r2, #0]
 8001a74:	4013      	ands	r3, r2
 8001a76:	d008      	beq.n	8001a8a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001a7a:	1dba      	adds	r2, r7, #6
 8001a7c:	8812      	ldrh	r2, [r2, #0]
 8001a7e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a80:	1dbb      	adds	r3, r7, #6
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff fa2f 	bl	8000ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b002      	add	sp, #8
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	40010400 	.word	0x40010400

08001a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a98:	b5b0      	push	{r4, r5, r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f000 fbbf 	bl	800222a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aac:	4bc9      	ldr	r3, [pc, #804]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	220c      	movs	r2, #12
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab6:	4bc7      	ldr	r3, [pc, #796]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	2380      	movs	r3, #128	@ 0x80
 8001abc:	025b      	lsls	r3, r3, #9
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d100      	bne.n	8001ace <HAL_RCC_OscConfig+0x36>
 8001acc:	e07e      	b.n	8001bcc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d007      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	d112      	bne.n	8001b00 <HAL_RCC_OscConfig+0x68>
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	025b      	lsls	r3, r3, #9
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d10d      	bne.n	8001b00 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae4:	4bbb      	ldr	r3, [pc, #748]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	029b      	lsls	r3, r3, #10
 8001aec:	4013      	ands	r3, r2
 8001aee:	d100      	bne.n	8001af2 <HAL_RCC_OscConfig+0x5a>
 8001af0:	e06b      	b.n	8001bca <HAL_RCC_OscConfig+0x132>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d167      	bne.n	8001bca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f000 fb95 	bl	800222a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	2380      	movs	r3, #128	@ 0x80
 8001b06:	025b      	lsls	r3, r3, #9
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d107      	bne.n	8001b1c <HAL_RCC_OscConfig+0x84>
 8001b0c:	4bb1      	ldr	r3, [pc, #708]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4bb0      	ldr	r3, [pc, #704]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001b12:	2180      	movs	r1, #128	@ 0x80
 8001b14:	0249      	lsls	r1, r1, #9
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e027      	b.n	8001b6c <HAL_RCC_OscConfig+0xd4>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	23a0      	movs	r3, #160	@ 0xa0
 8001b22:	02db      	lsls	r3, r3, #11
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d10e      	bne.n	8001b46 <HAL_RCC_OscConfig+0xae>
 8001b28:	4baa      	ldr	r3, [pc, #680]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4ba9      	ldr	r3, [pc, #676]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001b2e:	2180      	movs	r1, #128	@ 0x80
 8001b30:	02c9      	lsls	r1, r1, #11
 8001b32:	430a      	orrs	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	4ba7      	ldr	r3, [pc, #668]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4ba6      	ldr	r3, [pc, #664]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001b3c:	2180      	movs	r1, #128	@ 0x80
 8001b3e:	0249      	lsls	r1, r1, #9
 8001b40:	430a      	orrs	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e012      	b.n	8001b6c <HAL_RCC_OscConfig+0xd4>
 8001b46:	4ba3      	ldr	r3, [pc, #652]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4ba2      	ldr	r3, [pc, #648]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001b4c:	49a2      	ldr	r1, [pc, #648]	@ (8001dd8 <HAL_RCC_OscConfig+0x340>)
 8001b4e:	400a      	ands	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	4ba0      	ldr	r3, [pc, #640]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	2380      	movs	r3, #128	@ 0x80
 8001b58:	025b      	lsls	r3, r3, #9
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4b9c      	ldr	r3, [pc, #624]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b9b      	ldr	r3, [pc, #620]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001b66:	499d      	ldr	r1, [pc, #628]	@ (8001ddc <HAL_RCC_OscConfig+0x344>)
 8001b68:	400a      	ands	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d015      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fc9a 	bl	80014ac <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b7c:	e009      	b.n	8001b92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b7e:	f7ff fc95 	bl	80014ac <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b64      	cmp	r3, #100	@ 0x64
 8001b8a:	d902      	bls.n	8001b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	f000 fb4c 	bl	800222a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b92:	4b90      	ldr	r3, [pc, #576]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	2380      	movs	r3, #128	@ 0x80
 8001b98:	029b      	lsls	r3, r3, #10
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d0ef      	beq.n	8001b7e <HAL_RCC_OscConfig+0xe6>
 8001b9e:	e015      	b.n	8001bcc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fc84 	bl	80014ac <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001baa:	f7ff fc7f 	bl	80014ac <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b64      	cmp	r3, #100	@ 0x64
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e336      	b.n	800222a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bbc:	4b85      	ldr	r3, [pc, #532]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2380      	movs	r3, #128	@ 0x80
 8001bc2:	029b      	lsls	r3, r3, #10
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x112>
 8001bc8:	e000      	b.n	8001bcc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bca:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d100      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x140>
 8001bd6:	e099      	b.n	8001d0c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be0:	2220      	movs	r2, #32
 8001be2:	4013      	ands	r3, r2
 8001be4:	d009      	beq.n	8001bfa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001be6:	4b7b      	ldr	r3, [pc, #492]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4b7a      	ldr	r3, [pc, #488]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001bec:	2120      	movs	r1, #32
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	4393      	bics	r3, r2
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	2b0c      	cmp	r3, #12
 8001c04:	d13e      	bne.n	8001c84 <HAL_RCC_OscConfig+0x1ec>
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d13b      	bne.n	8001c84 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001c0c:	4b71      	ldr	r3, [pc, #452]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2204      	movs	r2, #4
 8001c12:	4013      	ands	r3, r2
 8001c14:	d004      	beq.n	8001c20 <HAL_RCC_OscConfig+0x188>
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e304      	b.n	800222a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	4b6c      	ldr	r3, [pc, #432]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4a6e      	ldr	r2, [pc, #440]	@ (8001de0 <HAL_RCC_OscConfig+0x348>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	0019      	movs	r1, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	021a      	lsls	r2, r3, #8
 8001c30:	4b68      	ldr	r3, [pc, #416]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c36:	4b67      	ldr	r3, [pc, #412]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2209      	movs	r2, #9
 8001c3c:	4393      	bics	r3, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	4b64      	ldr	r3, [pc, #400]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c44:	430a      	orrs	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c48:	f000 fc42 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8001c4c:	0001      	movs	r1, r0
 8001c4e:	4b61      	ldr	r3, [pc, #388]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	220f      	movs	r2, #15
 8001c56:	4013      	ands	r3, r2
 8001c58:	4a62      	ldr	r2, [pc, #392]	@ (8001de4 <HAL_RCC_OscConfig+0x34c>)
 8001c5a:	5cd3      	ldrb	r3, [r2, r3]
 8001c5c:	000a      	movs	r2, r1
 8001c5e:	40da      	lsrs	r2, r3
 8001c60:	4b61      	ldr	r3, [pc, #388]	@ (8001de8 <HAL_RCC_OscConfig+0x350>)
 8001c62:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001c64:	4b61      	ldr	r3, [pc, #388]	@ (8001dec <HAL_RCC_OscConfig+0x354>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2513      	movs	r5, #19
 8001c6a:	197c      	adds	r4, r7, r5
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff fbd7 	bl	8001420 <HAL_InitTick>
 8001c72:	0003      	movs	r3, r0
 8001c74:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c76:	197b      	adds	r3, r7, r5
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d046      	beq.n	8001d0c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001c7e:	197b      	adds	r3, r7, r5
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	e2d2      	b.n	800222a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d027      	beq.n	8001cda <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c8a:	4b52      	ldr	r3, [pc, #328]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2209      	movs	r2, #9
 8001c90:	4393      	bics	r3, r2
 8001c92:	0019      	movs	r1, r3
 8001c94:	4b4f      	ldr	r3, [pc, #316]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fc06 	bl	80014ac <HAL_GetTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fc01 	bl	80014ac <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e2b8      	b.n	800222a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cb8:	4b46      	ldr	r3, [pc, #280]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d0f1      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc2:	4b44      	ldr	r3, [pc, #272]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4a46      	ldr	r2, [pc, #280]	@ (8001de0 <HAL_RCC_OscConfig+0x348>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	021a      	lsls	r2, r3, #8
 8001cd2:	4b40      	ldr	r3, [pc, #256]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	e018      	b.n	8001d0c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cda:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	438a      	bics	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fbe1 	bl	80014ac <HAL_GetTick>
 8001cea:	0003      	movs	r3, r0
 8001cec:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf0:	f7ff fbdc 	bl	80014ac <HAL_GetTick>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e293      	b.n	800222a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d02:	4b34      	ldr	r3, [pc, #208]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2204      	movs	r2, #4
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d1f1      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2210      	movs	r2, #16
 8001d12:	4013      	ands	r3, r2
 8001d14:	d100      	bne.n	8001d18 <HAL_RCC_OscConfig+0x280>
 8001d16:	e0a2      	b.n	8001e5e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d140      	bne.n	8001da0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	2380      	movs	r3, #128	@ 0x80
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4013      	ands	r3, r2
 8001d28:	d005      	beq.n	8001d36 <HAL_RCC_OscConfig+0x29e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e279      	b.n	800222a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d36:	4b27      	ldr	r3, [pc, #156]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001df0 <HAL_RCC_OscConfig+0x358>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	0019      	movs	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d44:	4b23      	ldr	r3, [pc, #140]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001d46:	430a      	orrs	r2, r1
 8001d48:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d4a:	4b22      	ldr	r3, [pc, #136]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	0a19      	lsrs	r1, r3, #8
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	061a      	lsls	r2, r3, #24
 8001d58:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	0b5b      	lsrs	r3, r3, #13
 8001d64:	3301      	adds	r3, #1
 8001d66:	2280      	movs	r2, #128	@ 0x80
 8001d68:	0212      	lsls	r2, r2, #8
 8001d6a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d6c:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	210f      	movs	r1, #15
 8001d74:	400b      	ands	r3, r1
 8001d76:	491b      	ldr	r1, [pc, #108]	@ (8001de4 <HAL_RCC_OscConfig+0x34c>)
 8001d78:	5ccb      	ldrb	r3, [r1, r3]
 8001d7a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <HAL_RCC_OscConfig+0x350>)
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d80:	4b1a      	ldr	r3, [pc, #104]	@ (8001dec <HAL_RCC_OscConfig+0x354>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2513      	movs	r5, #19
 8001d86:	197c      	adds	r4, r7, r5
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7ff fb49 	bl	8001420 <HAL_InitTick>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d92:	197b      	adds	r3, r7, r5
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d061      	beq.n	8001e5e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001d9a:	197b      	adds	r3, r7, r5
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	e244      	b.n	800222a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d040      	beq.n	8001e2a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001da8:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_RCC_OscConfig+0x33c>)
 8001dae:	2180      	movs	r1, #128	@ 0x80
 8001db0:	0049      	lsls	r1, r1, #1
 8001db2:	430a      	orrs	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff fb79 	bl	80014ac <HAL_GetTick>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dbe:	e019      	b.n	8001df4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fb74 	bl	80014ac <HAL_GetTick>
 8001dc4:	0002      	movs	r2, r0
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d912      	bls.n	8001df4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e22b      	b.n	800222a <HAL_RCC_OscConfig+0x792>
 8001dd2:	46c0      	nop			@ (mov r8, r8)
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	fffeffff 	.word	0xfffeffff
 8001ddc:	fffbffff 	.word	0xfffbffff
 8001de0:	ffffe0ff 	.word	0xffffe0ff
 8001de4:	08004488 	.word	0x08004488
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000004 	.word	0x20000004
 8001df0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001df4:	4bca      	ldr	r3, [pc, #808]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d0df      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e00:	4bc7      	ldr	r3, [pc, #796]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4ac7      	ldr	r2, [pc, #796]	@ (8002124 <HAL_RCC_OscConfig+0x68c>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e0e:	4bc4      	ldr	r3, [pc, #784]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001e10:	430a      	orrs	r2, r1
 8001e12:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e14:	4bc2      	ldr	r3, [pc, #776]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	0a19      	lsrs	r1, r3, #8
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	061a      	lsls	r2, r3, #24
 8001e22:	4bbf      	ldr	r3, [pc, #764]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001e24:	430a      	orrs	r2, r1
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	e019      	b.n	8001e5e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e2a:	4bbd      	ldr	r3, [pc, #756]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4bbc      	ldr	r3, [pc, #752]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001e30:	49bd      	ldr	r1, [pc, #756]	@ (8002128 <HAL_RCC_OscConfig+0x690>)
 8001e32:	400a      	ands	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7ff fb39 	bl	80014ac <HAL_GetTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e40:	f7ff fb34 	bl	80014ac <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e1eb      	b.n	800222a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e52:	4bb3      	ldr	r3, [pc, #716]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	@ 0x80
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2208      	movs	r2, #8
 8001e64:	4013      	ands	r3, r2
 8001e66:	d036      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d019      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e70:	4bab      	ldr	r3, [pc, #684]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001e72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e74:	4baa      	ldr	r3, [pc, #680]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7c:	f7ff fb16 	bl	80014ac <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e86:	f7ff fb11 	bl	80014ac <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1c8      	b.n	800222a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e98:	4ba1      	ldr	r3, [pc, #644]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d0f1      	beq.n	8001e86 <HAL_RCC_OscConfig+0x3ee>
 8001ea2:	e018      	b.n	8001ed6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea4:	4b9e      	ldr	r3, [pc, #632]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001ea6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ea8:	4b9d      	ldr	r3, [pc, #628]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	438a      	bics	r2, r1
 8001eae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb0:	f7ff fafc 	bl	80014ac <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eba:	f7ff faf7 	bl	80014ac <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1ae      	b.n	800222a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ecc:	4b94      	ldr	r3, [pc, #592]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d1f1      	bne.n	8001eba <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2204      	movs	r2, #4
 8001edc:	4013      	ands	r3, r2
 8001ede:	d100      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x44a>
 8001ee0:	e0ae      	b.n	8002040 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee2:	2023      	movs	r0, #35	@ 0x23
 8001ee4:	183b      	adds	r3, r7, r0
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eea:	4b8d      	ldr	r3, [pc, #564]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001eec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001eee:	2380      	movs	r3, #128	@ 0x80
 8001ef0:	055b      	lsls	r3, r3, #21
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d109      	bne.n	8001f0a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	4b8a      	ldr	r3, [pc, #552]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001ef8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001efa:	4b89      	ldr	r3, [pc, #548]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001efc:	2180      	movs	r1, #128	@ 0x80
 8001efe:	0549      	lsls	r1, r1, #21
 8001f00:	430a      	orrs	r2, r1
 8001f02:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001f04:	183b      	adds	r3, r7, r0
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0a:	4b88      	ldr	r3, [pc, #544]	@ (800212c <HAL_RCC_OscConfig+0x694>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	2380      	movs	r3, #128	@ 0x80
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4013      	ands	r3, r2
 8001f14:	d11a      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f16:	4b85      	ldr	r3, [pc, #532]	@ (800212c <HAL_RCC_OscConfig+0x694>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4b84      	ldr	r3, [pc, #528]	@ (800212c <HAL_RCC_OscConfig+0x694>)
 8001f1c:	2180      	movs	r1, #128	@ 0x80
 8001f1e:	0049      	lsls	r1, r1, #1
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f24:	f7ff fac2 	bl	80014ac <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2e:	f7ff fabd 	bl	80014ac <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b64      	cmp	r3, #100	@ 0x64
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e174      	b.n	800222a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	4b7a      	ldr	r3, [pc, #488]	@ (800212c <HAL_RCC_OscConfig+0x694>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	2380      	movs	r3, #128	@ 0x80
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4d0>
 8001f58:	4b71      	ldr	r3, [pc, #452]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001f5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f5c:	4b70      	ldr	r3, [pc, #448]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001f5e:	2180      	movs	r1, #128	@ 0x80
 8001f60:	0049      	lsls	r1, r1, #1
 8001f62:	430a      	orrs	r2, r1
 8001f64:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f66:	e031      	b.n	8001fcc <HAL_RCC_OscConfig+0x534>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10c      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4f2>
 8001f70:	4b6b      	ldr	r3, [pc, #428]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001f72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f74:	4b6a      	ldr	r3, [pc, #424]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001f76:	496c      	ldr	r1, [pc, #432]	@ (8002128 <HAL_RCC_OscConfig+0x690>)
 8001f78:	400a      	ands	r2, r1
 8001f7a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f7c:	4b68      	ldr	r3, [pc, #416]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001f7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f80:	4b67      	ldr	r3, [pc, #412]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001f82:	496b      	ldr	r1, [pc, #428]	@ (8002130 <HAL_RCC_OscConfig+0x698>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f88:	e020      	b.n	8001fcc <HAL_RCC_OscConfig+0x534>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	23a0      	movs	r3, #160	@ 0xa0
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d10e      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x51c>
 8001f96:	4b62      	ldr	r3, [pc, #392]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001f98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f9a:	4b61      	ldr	r3, [pc, #388]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001f9c:	2180      	movs	r1, #128	@ 0x80
 8001f9e:	00c9      	lsls	r1, r1, #3
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fa4:	4b5e      	ldr	r3, [pc, #376]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001fa6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fa8:	4b5d      	ldr	r3, [pc, #372]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001faa:	2180      	movs	r1, #128	@ 0x80
 8001fac:	0049      	lsls	r1, r1, #1
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fb2:	e00b      	b.n	8001fcc <HAL_RCC_OscConfig+0x534>
 8001fb4:	4b5a      	ldr	r3, [pc, #360]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001fb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fb8:	4b59      	ldr	r3, [pc, #356]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001fba:	495b      	ldr	r1, [pc, #364]	@ (8002128 <HAL_RCC_OscConfig+0x690>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fc0:	4b57      	ldr	r3, [pc, #348]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001fc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fc4:	4b56      	ldr	r3, [pc, #344]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001fc6:	495a      	ldr	r1, [pc, #360]	@ (8002130 <HAL_RCC_OscConfig+0x698>)
 8001fc8:	400a      	ands	r2, r1
 8001fca:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d015      	beq.n	8002000 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd4:	f7ff fa6a 	bl	80014ac <HAL_GetTick>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fdc:	e009      	b.n	8001ff2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7ff fa65 	bl	80014ac <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	4a52      	ldr	r2, [pc, #328]	@ (8002134 <HAL_RCC_OscConfig+0x69c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e11b      	b.n	800222a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8001ff4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ff6:	2380      	movs	r3, #128	@ 0x80
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d0ef      	beq.n	8001fde <HAL_RCC_OscConfig+0x546>
 8001ffe:	e014      	b.n	800202a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002000:	f7ff fa54 	bl	80014ac <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002008:	e009      	b.n	800201e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7ff fa4f 	bl	80014ac <HAL_GetTick>
 800200e:	0002      	movs	r2, r0
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	4a47      	ldr	r2, [pc, #284]	@ (8002134 <HAL_RCC_OscConfig+0x69c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e105      	b.n	800222a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800201e:	4b40      	ldr	r3, [pc, #256]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8002020:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002022:	2380      	movs	r3, #128	@ 0x80
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4013      	ands	r3, r2
 8002028:	d1ef      	bne.n	800200a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800202a:	2323      	movs	r3, #35	@ 0x23
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d105      	bne.n	8002040 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002034:	4b3a      	ldr	r3, [pc, #232]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8002036:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002038:	4b39      	ldr	r3, [pc, #228]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 800203a:	493f      	ldr	r1, [pc, #252]	@ (8002138 <HAL_RCC_OscConfig+0x6a0>)
 800203c:	400a      	ands	r2, r1
 800203e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2220      	movs	r2, #32
 8002046:	4013      	ands	r3, r2
 8002048:	d049      	beq.n	80020de <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d026      	beq.n	80020a0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002052:	4b33      	ldr	r3, [pc, #204]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	4b32      	ldr	r3, [pc, #200]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8002058:	2101      	movs	r1, #1
 800205a:	430a      	orrs	r2, r1
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	4b30      	ldr	r3, [pc, #192]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8002060:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002062:	4b2f      	ldr	r3, [pc, #188]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8002064:	2101      	movs	r1, #1
 8002066:	430a      	orrs	r2, r1
 8002068:	635a      	str	r2, [r3, #52]	@ 0x34
 800206a:	4b34      	ldr	r3, [pc, #208]	@ (800213c <HAL_RCC_OscConfig+0x6a4>)
 800206c:	6a1a      	ldr	r2, [r3, #32]
 800206e:	4b33      	ldr	r3, [pc, #204]	@ (800213c <HAL_RCC_OscConfig+0x6a4>)
 8002070:	2180      	movs	r1, #128	@ 0x80
 8002072:	0189      	lsls	r1, r1, #6
 8002074:	430a      	orrs	r2, r1
 8002076:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff fa18 	bl	80014ac <HAL_GetTick>
 800207c:	0003      	movs	r3, r0
 800207e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002082:	f7ff fa13 	bl	80014ac <HAL_GetTick>
 8002086:	0002      	movs	r2, r0
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e0ca      	b.n	800222a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002094:	4b22      	ldr	r3, [pc, #136]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2202      	movs	r2, #2
 800209a:	4013      	ands	r3, r2
 800209c:	d0f1      	beq.n	8002082 <HAL_RCC_OscConfig+0x5ea>
 800209e:	e01e      	b.n	80020de <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80020a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 80020a6:	2101      	movs	r1, #1
 80020a8:	438a      	bics	r2, r1
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	4b23      	ldr	r3, [pc, #140]	@ (800213c <HAL_RCC_OscConfig+0x6a4>)
 80020ae:	6a1a      	ldr	r2, [r3, #32]
 80020b0:	4b22      	ldr	r3, [pc, #136]	@ (800213c <HAL_RCC_OscConfig+0x6a4>)
 80020b2:	4923      	ldr	r1, [pc, #140]	@ (8002140 <HAL_RCC_OscConfig+0x6a8>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff f9f8 	bl	80014ac <HAL_GetTick>
 80020bc:	0003      	movs	r3, r0
 80020be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c2:	f7ff f9f3 	bl	80014ac <HAL_GetTick>
 80020c6:	0002      	movs	r2, r0
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0aa      	b.n	800222a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020d4:	4b12      	ldr	r3, [pc, #72]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2202      	movs	r2, #2
 80020da:	4013      	ands	r3, r2
 80020dc:	d1f1      	bne.n	80020c2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d100      	bne.n	80020e8 <HAL_RCC_OscConfig+0x650>
 80020e6:	e09f      	b.n	8002228 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d100      	bne.n	80020f0 <HAL_RCC_OscConfig+0x658>
 80020ee:	e078      	b.n	80021e2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d159      	bne.n	80021ac <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f8:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <HAL_RCC_OscConfig+0x688>)
 80020fe:	4911      	ldr	r1, [pc, #68]	@ (8002144 <HAL_RCC_OscConfig+0x6ac>)
 8002100:	400a      	ands	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff f9d2 	bl	80014ac <HAL_GetTick>
 8002108:	0003      	movs	r3, r0
 800210a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800210c:	e01c      	b.n	8002148 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210e:	f7ff f9cd 	bl	80014ac <HAL_GetTick>
 8002112:	0002      	movs	r2, r0
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d915      	bls.n	8002148 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e084      	b.n	800222a <HAL_RCC_OscConfig+0x792>
 8002120:	40021000 	.word	0x40021000
 8002124:	ffff1fff 	.word	0xffff1fff
 8002128:	fffffeff 	.word	0xfffffeff
 800212c:	40007000 	.word	0x40007000
 8002130:	fffffbff 	.word	0xfffffbff
 8002134:	00001388 	.word	0x00001388
 8002138:	efffffff 	.word	0xefffffff
 800213c:	40010000 	.word	0x40010000
 8002140:	ffffdfff 	.word	0xffffdfff
 8002144:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002148:	4b3a      	ldr	r3, [pc, #232]	@ (8002234 <HAL_RCC_OscConfig+0x79c>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2380      	movs	r3, #128	@ 0x80
 800214e:	049b      	lsls	r3, r3, #18
 8002150:	4013      	ands	r3, r2
 8002152:	d1dc      	bne.n	800210e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002154:	4b37      	ldr	r3, [pc, #220]	@ (8002234 <HAL_RCC_OscConfig+0x79c>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a37      	ldr	r2, [pc, #220]	@ (8002238 <HAL_RCC_OscConfig+0x7a0>)
 800215a:	4013      	ands	r3, r2
 800215c:	0019      	movs	r1, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800216c:	431a      	orrs	r2, r3
 800216e:	4b31      	ldr	r3, [pc, #196]	@ (8002234 <HAL_RCC_OscConfig+0x79c>)
 8002170:	430a      	orrs	r2, r1
 8002172:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002174:	4b2f      	ldr	r3, [pc, #188]	@ (8002234 <HAL_RCC_OscConfig+0x79c>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b2e      	ldr	r3, [pc, #184]	@ (8002234 <HAL_RCC_OscConfig+0x79c>)
 800217a:	2180      	movs	r1, #128	@ 0x80
 800217c:	0449      	lsls	r1, r1, #17
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7ff f993 	bl	80014ac <HAL_GetTick>
 8002186:	0003      	movs	r3, r0
 8002188:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218c:	f7ff f98e 	bl	80014ac <HAL_GetTick>
 8002190:	0002      	movs	r2, r0
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e045      	b.n	800222a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800219e:	4b25      	ldr	r3, [pc, #148]	@ (8002234 <HAL_RCC_OscConfig+0x79c>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	2380      	movs	r3, #128	@ 0x80
 80021a4:	049b      	lsls	r3, r3, #18
 80021a6:	4013      	ands	r3, r2
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x6f4>
 80021aa:	e03d      	b.n	8002228 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ac:	4b21      	ldr	r3, [pc, #132]	@ (8002234 <HAL_RCC_OscConfig+0x79c>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b20      	ldr	r3, [pc, #128]	@ (8002234 <HAL_RCC_OscConfig+0x79c>)
 80021b2:	4922      	ldr	r1, [pc, #136]	@ (800223c <HAL_RCC_OscConfig+0x7a4>)
 80021b4:	400a      	ands	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff f978 	bl	80014ac <HAL_GetTick>
 80021bc:	0003      	movs	r3, r0
 80021be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c2:	f7ff f973 	bl	80014ac <HAL_GetTick>
 80021c6:	0002      	movs	r2, r0
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e02a      	b.n	800222a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021d4:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <HAL_RCC_OscConfig+0x79c>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	2380      	movs	r3, #128	@ 0x80
 80021da:	049b      	lsls	r3, r3, #18
 80021dc:	4013      	ands	r3, r2
 80021de:	d1f0      	bne.n	80021c2 <HAL_RCC_OscConfig+0x72a>
 80021e0:	e022      	b.n	8002228 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e01d      	b.n	800222a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021ee:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <HAL_RCC_OscConfig+0x79c>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	2380      	movs	r3, #128	@ 0x80
 80021f8:	025b      	lsls	r3, r3, #9
 80021fa:	401a      	ands	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002200:	429a      	cmp	r2, r3
 8002202:	d10f      	bne.n	8002224 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	23f0      	movs	r3, #240	@ 0xf0
 8002208:	039b      	lsls	r3, r3, #14
 800220a:	401a      	ands	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002210:	429a      	cmp	r2, r3
 8002212:	d107      	bne.n	8002224 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	23c0      	movs	r3, #192	@ 0xc0
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	401a      	ands	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	0018      	movs	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	b00a      	add	sp, #40	@ 0x28
 8002230:	bdb0      	pop	{r4, r5, r7, pc}
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	40021000 	.word	0x40021000
 8002238:	ff02ffff 	.word	0xff02ffff
 800223c:	feffffff 	.word	0xfeffffff

08002240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002240:	b5b0      	push	{r4, r5, r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e128      	b.n	80024a6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002254:	4b96      	ldr	r3, [pc, #600]	@ (80024b0 <HAL_RCC_ClockConfig+0x270>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2201      	movs	r2, #1
 800225a:	4013      	ands	r3, r2
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d91e      	bls.n	80022a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b93      	ldr	r3, [pc, #588]	@ (80024b0 <HAL_RCC_ClockConfig+0x270>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2201      	movs	r2, #1
 8002268:	4393      	bics	r3, r2
 800226a:	0019      	movs	r1, r3
 800226c:	4b90      	ldr	r3, [pc, #576]	@ (80024b0 <HAL_RCC_ClockConfig+0x270>)
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002274:	f7ff f91a 	bl	80014ac <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227c:	e009      	b.n	8002292 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227e:	f7ff f915 	bl	80014ac <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	4a8a      	ldr	r2, [pc, #552]	@ (80024b4 <HAL_RCC_ClockConfig+0x274>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e109      	b.n	80024a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002292:	4b87      	ldr	r3, [pc, #540]	@ (80024b0 <HAL_RCC_ClockConfig+0x270>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2201      	movs	r2, #1
 8002298:	4013      	ands	r3, r2
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d1ee      	bne.n	800227e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2202      	movs	r2, #2
 80022a6:	4013      	ands	r3, r2
 80022a8:	d009      	beq.n	80022be <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022aa:	4b83      	ldr	r3, [pc, #524]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	22f0      	movs	r2, #240	@ 0xf0
 80022b0:	4393      	bics	r3, r2
 80022b2:	0019      	movs	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	4b7f      	ldr	r3, [pc, #508]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 80022ba:	430a      	orrs	r2, r1
 80022bc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2201      	movs	r2, #1
 80022c4:	4013      	ands	r3, r2
 80022c6:	d100      	bne.n	80022ca <HAL_RCC_ClockConfig+0x8a>
 80022c8:	e089      	b.n	80023de <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022d2:	4b79      	ldr	r3, [pc, #484]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	2380      	movs	r3, #128	@ 0x80
 80022d8:	029b      	lsls	r3, r3, #10
 80022da:	4013      	ands	r3, r2
 80022dc:	d120      	bne.n	8002320 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0e1      	b.n	80024a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d107      	bne.n	80022fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022ea:	4b73      	ldr	r3, [pc, #460]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	2380      	movs	r3, #128	@ 0x80
 80022f0:	049b      	lsls	r3, r3, #18
 80022f2:	4013      	ands	r3, r2
 80022f4:	d114      	bne.n	8002320 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0d5      	b.n	80024a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d106      	bne.n	8002310 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002302:	4b6d      	ldr	r3, [pc, #436]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2204      	movs	r2, #4
 8002308:	4013      	ands	r3, r2
 800230a:	d109      	bne.n	8002320 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0ca      	b.n	80024a6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002310:	4b69      	ldr	r3, [pc, #420]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4013      	ands	r3, r2
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0c2      	b.n	80024a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002320:	4b65      	ldr	r3, [pc, #404]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2203      	movs	r2, #3
 8002326:	4393      	bics	r3, r2
 8002328:	0019      	movs	r1, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	4b62      	ldr	r3, [pc, #392]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 8002330:	430a      	orrs	r2, r1
 8002332:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002334:	f7ff f8ba 	bl	80014ac <HAL_GetTick>
 8002338:	0003      	movs	r3, r0
 800233a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d111      	bne.n	8002368 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002344:	e009      	b.n	800235a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002346:	f7ff f8b1 	bl	80014ac <HAL_GetTick>
 800234a:	0002      	movs	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	4a58      	ldr	r2, [pc, #352]	@ (80024b4 <HAL_RCC_ClockConfig+0x274>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e0a5      	b.n	80024a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800235a:	4b57      	ldr	r3, [pc, #348]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	220c      	movs	r2, #12
 8002360:	4013      	ands	r3, r2
 8002362:	2b08      	cmp	r3, #8
 8002364:	d1ef      	bne.n	8002346 <HAL_RCC_ClockConfig+0x106>
 8002366:	e03a      	b.n	80023de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d111      	bne.n	8002394 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002370:	e009      	b.n	8002386 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002372:	f7ff f89b 	bl	80014ac <HAL_GetTick>
 8002376:	0002      	movs	r2, r0
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	4a4d      	ldr	r2, [pc, #308]	@ (80024b4 <HAL_RCC_ClockConfig+0x274>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e08f      	b.n	80024a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002386:	4b4c      	ldr	r3, [pc, #304]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	220c      	movs	r2, #12
 800238c:	4013      	ands	r3, r2
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d1ef      	bne.n	8002372 <HAL_RCC_ClockConfig+0x132>
 8002392:	e024      	b.n	80023de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d11b      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800239c:	e009      	b.n	80023b2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239e:	f7ff f885 	bl	80014ac <HAL_GetTick>
 80023a2:	0002      	movs	r2, r0
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	4a42      	ldr	r2, [pc, #264]	@ (80024b4 <HAL_RCC_ClockConfig+0x274>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e079      	b.n	80024a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023b2:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	220c      	movs	r2, #12
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d1ef      	bne.n	800239e <HAL_RCC_ClockConfig+0x15e>
 80023be:	e00e      	b.n	80023de <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c0:	f7ff f874 	bl	80014ac <HAL_GetTick>
 80023c4:	0002      	movs	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	4a3a      	ldr	r2, [pc, #232]	@ (80024b4 <HAL_RCC_ClockConfig+0x274>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e068      	b.n	80024a6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80023d4:	4b38      	ldr	r3, [pc, #224]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	220c      	movs	r2, #12
 80023da:	4013      	ands	r3, r2
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023de:	4b34      	ldr	r3, [pc, #208]	@ (80024b0 <HAL_RCC_ClockConfig+0x270>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2201      	movs	r2, #1
 80023e4:	4013      	ands	r3, r2
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d21e      	bcs.n	800242a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ec:	4b30      	ldr	r3, [pc, #192]	@ (80024b0 <HAL_RCC_ClockConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2201      	movs	r2, #1
 80023f2:	4393      	bics	r3, r2
 80023f4:	0019      	movs	r1, r3
 80023f6:	4b2e      	ldr	r3, [pc, #184]	@ (80024b0 <HAL_RCC_ClockConfig+0x270>)
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023fe:	f7ff f855 	bl	80014ac <HAL_GetTick>
 8002402:	0003      	movs	r3, r0
 8002404:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	e009      	b.n	800241c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002408:	f7ff f850 	bl	80014ac <HAL_GetTick>
 800240c:	0002      	movs	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	4a28      	ldr	r2, [pc, #160]	@ (80024b4 <HAL_RCC_ClockConfig+0x274>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d901      	bls.n	800241c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e044      	b.n	80024a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241c:	4b24      	ldr	r3, [pc, #144]	@ (80024b0 <HAL_RCC_ClockConfig+0x270>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2201      	movs	r2, #1
 8002422:	4013      	ands	r3, r2
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d1ee      	bne.n	8002408 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2204      	movs	r2, #4
 8002430:	4013      	ands	r3, r2
 8002432:	d009      	beq.n	8002448 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002434:	4b20      	ldr	r3, [pc, #128]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4a20      	ldr	r2, [pc, #128]	@ (80024bc <HAL_RCC_ClockConfig+0x27c>)
 800243a:	4013      	ands	r3, r2
 800243c:	0019      	movs	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	4b1d      	ldr	r3, [pc, #116]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 8002444:	430a      	orrs	r2, r1
 8002446:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2208      	movs	r2, #8
 800244e:	4013      	ands	r3, r2
 8002450:	d00a      	beq.n	8002468 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002452:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	4a1a      	ldr	r2, [pc, #104]	@ (80024c0 <HAL_RCC_ClockConfig+0x280>)
 8002458:	4013      	ands	r3, r2
 800245a:	0019      	movs	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	00da      	lsls	r2, r3, #3
 8002462:	4b15      	ldr	r3, [pc, #84]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 8002464:	430a      	orrs	r2, r1
 8002466:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002468:	f000 f832 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800246c:	0001      	movs	r1, r0
 800246e:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_RCC_ClockConfig+0x278>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	220f      	movs	r2, #15
 8002476:	4013      	ands	r3, r2
 8002478:	4a12      	ldr	r2, [pc, #72]	@ (80024c4 <HAL_RCC_ClockConfig+0x284>)
 800247a:	5cd3      	ldrb	r3, [r2, r3]
 800247c:	000a      	movs	r2, r1
 800247e:	40da      	lsrs	r2, r3
 8002480:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <HAL_RCC_ClockConfig+0x288>)
 8002482:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002484:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <HAL_RCC_ClockConfig+0x28c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	250b      	movs	r5, #11
 800248a:	197c      	adds	r4, r7, r5
 800248c:	0018      	movs	r0, r3
 800248e:	f7fe ffc7 	bl	8001420 <HAL_InitTick>
 8002492:	0003      	movs	r3, r0
 8002494:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002496:	197b      	adds	r3, r7, r5
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800249e:	197b      	adds	r3, r7, r5
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	0018      	movs	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b004      	add	sp, #16
 80024ac:	bdb0      	pop	{r4, r5, r7, pc}
 80024ae:	46c0      	nop			@ (mov r8, r8)
 80024b0:	40022000 	.word	0x40022000
 80024b4:	00001388 	.word	0x00001388
 80024b8:	40021000 	.word	0x40021000
 80024bc:	fffff8ff 	.word	0xfffff8ff
 80024c0:	ffffc7ff 	.word	0xffffc7ff
 80024c4:	08004488 	.word	0x08004488
 80024c8:	20000000 	.word	0x20000000
 80024cc:	20000004 	.word	0x20000004

080024d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80024d6:	4b3c      	ldr	r3, [pc, #240]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	220c      	movs	r2, #12
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b0c      	cmp	r3, #12
 80024e4:	d013      	beq.n	800250e <HAL_RCC_GetSysClockFreq+0x3e>
 80024e6:	d85c      	bhi.n	80025a2 <HAL_RCC_GetSysClockFreq+0xd2>
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d002      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x22>
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d00b      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x38>
 80024f0:	e057      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80024f2:	4b35      	ldr	r3, [pc, #212]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2210      	movs	r2, #16
 80024f8:	4013      	ands	r3, r2
 80024fa:	d002      	beq.n	8002502 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80024fc:	4b33      	ldr	r3, [pc, #204]	@ (80025cc <HAL_RCC_GetSysClockFreq+0xfc>)
 80024fe:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002500:	e05d      	b.n	80025be <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002502:	4b33      	ldr	r3, [pc, #204]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002504:	613b      	str	r3, [r7, #16]
      break;
 8002506:	e05a      	b.n	80025be <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002508:	4b32      	ldr	r3, [pc, #200]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x104>)
 800250a:	613b      	str	r3, [r7, #16]
      break;
 800250c:	e057      	b.n	80025be <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	0c9b      	lsrs	r3, r3, #18
 8002512:	220f      	movs	r2, #15
 8002514:	4013      	ands	r3, r2
 8002516:	4a30      	ldr	r2, [pc, #192]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002518:	5cd3      	ldrb	r3, [r2, r3]
 800251a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	0d9b      	lsrs	r3, r3, #22
 8002520:	2203      	movs	r2, #3
 8002522:	4013      	ands	r3, r2
 8002524:	3301      	adds	r3, #1
 8002526:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002528:	4b27      	ldr	r3, [pc, #156]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	2380      	movs	r3, #128	@ 0x80
 800252e:	025b      	lsls	r3, r3, #9
 8002530:	4013      	ands	r3, r2
 8002532:	d00f      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	000a      	movs	r2, r1
 8002538:	0152      	lsls	r2, r2, #5
 800253a:	1a52      	subs	r2, r2, r1
 800253c:	0193      	lsls	r3, r2, #6
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	185b      	adds	r3, r3, r1
 8002544:	025b      	lsls	r3, r3, #9
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	0018      	movs	r0, r3
 800254a:	f7fd fde7 	bl	800011c <__udivsi3>
 800254e:	0003      	movs	r3, r0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e023      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002554:	4b1c      	ldr	r3, [pc, #112]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2210      	movs	r2, #16
 800255a:	4013      	ands	r3, r2
 800255c:	d00f      	beq.n	800257e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	000a      	movs	r2, r1
 8002562:	0152      	lsls	r2, r2, #5
 8002564:	1a52      	subs	r2, r2, r1
 8002566:	0193      	lsls	r3, r2, #6
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	185b      	adds	r3, r3, r1
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	0018      	movs	r0, r3
 8002574:	f7fd fdd2 	bl	800011c <__udivsi3>
 8002578:	0003      	movs	r3, r0
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	e00e      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800257e:	68b9      	ldr	r1, [r7, #8]
 8002580:	000a      	movs	r2, r1
 8002582:	0152      	lsls	r2, r2, #5
 8002584:	1a52      	subs	r2, r2, r1
 8002586:	0193      	lsls	r3, r2, #6
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	185b      	adds	r3, r3, r1
 800258e:	029b      	lsls	r3, r3, #10
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	0018      	movs	r0, r3
 8002594:	f7fd fdc2 	bl	800011c <__udivsi3>
 8002598:	0003      	movs	r3, r0
 800259a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	613b      	str	r3, [r7, #16]
      break;
 80025a0:	e00d      	b.n	80025be <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80025a2:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	0b5b      	lsrs	r3, r3, #13
 80025a8:	2207      	movs	r2, #7
 80025aa:	4013      	ands	r3, r2
 80025ac:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	2280      	movs	r2, #128	@ 0x80
 80025b4:	0212      	lsls	r2, r2, #8
 80025b6:	409a      	lsls	r2, r3
 80025b8:	0013      	movs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
      break;
 80025bc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025be:	693b      	ldr	r3, [r7, #16]
}
 80025c0:	0018      	movs	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b006      	add	sp, #24
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	003d0900 	.word	0x003d0900
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	007a1200 	.word	0x007a1200
 80025d8:	080044a0 	.word	0x080044a0

080025dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e0:	4b02      	ldr	r3, [pc, #8]	@ (80025ec <HAL_RCC_GetHCLKFreq+0x10>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	20000000 	.word	0x20000000

080025f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f4:	f7ff fff2 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 80025f8:	0001      	movs	r1, r0
 80025fa:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	2207      	movs	r2, #7
 8002602:	4013      	ands	r3, r2
 8002604:	4a04      	ldr	r2, [pc, #16]	@ (8002618 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	40d9      	lsrs	r1, r3
 800260a:	000b      	movs	r3, r1
}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	46c0      	nop			@ (mov r8, r8)
 8002614:	40021000 	.word	0x40021000
 8002618:	08004498 	.word	0x08004498

0800261c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002620:	f7ff ffdc 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 8002624:	0001      	movs	r1, r0
 8002626:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	0adb      	lsrs	r3, r3, #11
 800262c:	2207      	movs	r2, #7
 800262e:	4013      	ands	r3, r2
 8002630:	4a04      	ldr	r2, [pc, #16]	@ (8002644 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002632:	5cd3      	ldrb	r3, [r2, r3]
 8002634:	40d9      	lsrs	r1, r3
 8002636:	000b      	movs	r3, r1
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			@ (mov r8, r8)
 8002640:	40021000 	.word	0x40021000
 8002644:	08004498 	.word	0x08004498

08002648 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002650:	2317      	movs	r3, #23
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2220      	movs	r2, #32
 800265e:	4013      	ands	r3, r2
 8002660:	d106      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	4013      	ands	r3, r2
 800266c:	d100      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800266e:	e104      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002670:	4bb9      	ldr	r3, [pc, #740]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002674:	2380      	movs	r3, #128	@ 0x80
 8002676:	055b      	lsls	r3, r3, #21
 8002678:	4013      	ands	r3, r2
 800267a:	d10a      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267c:	4bb6      	ldr	r3, [pc, #728]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800267e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002680:	4bb5      	ldr	r3, [pc, #724]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002682:	2180      	movs	r1, #128	@ 0x80
 8002684:	0549      	lsls	r1, r1, #21
 8002686:	430a      	orrs	r2, r1
 8002688:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800268a:	2317      	movs	r3, #23
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4bb2      	ldr	r3, [pc, #712]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	2380      	movs	r3, #128	@ 0x80
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4013      	ands	r3, r2
 800269c:	d11a      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269e:	4baf      	ldr	r3, [pc, #700]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4bae      	ldr	r3, [pc, #696]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026a4:	2180      	movs	r1, #128	@ 0x80
 80026a6:	0049      	lsls	r1, r1, #1
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ac:	f7fe fefe 	bl	80014ac <HAL_GetTick>
 80026b0:	0003      	movs	r3, r0
 80026b2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	e008      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b6:	f7fe fef9 	bl	80014ac <HAL_GetTick>
 80026ba:	0002      	movs	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b64      	cmp	r3, #100	@ 0x64
 80026c2:	d901      	bls.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e143      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	4ba4      	ldr	r3, [pc, #656]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2380      	movs	r3, #128	@ 0x80
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4013      	ands	r3, r2
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80026d4:	4ba0      	ldr	r3, [pc, #640]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	23c0      	movs	r3, #192	@ 0xc0
 80026da:	039b      	lsls	r3, r3, #14
 80026dc:	4013      	ands	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	23c0      	movs	r3, #192	@ 0xc0
 80026e6:	039b      	lsls	r3, r3, #14
 80026e8:	4013      	ands	r3, r2
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d107      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	23c0      	movs	r3, #192	@ 0xc0
 80026f6:	039b      	lsls	r3, r3, #14
 80026f8:	4013      	ands	r3, r2
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d013      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	23c0      	movs	r3, #192	@ 0xc0
 8002706:	029b      	lsls	r3, r3, #10
 8002708:	401a      	ands	r2, r3
 800270a:	23c0      	movs	r3, #192	@ 0xc0
 800270c:	029b      	lsls	r3, r3, #10
 800270e:	429a      	cmp	r2, r3
 8002710:	d10a      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002712:	4b91      	ldr	r3, [pc, #580]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	2380      	movs	r3, #128	@ 0x80
 8002718:	029b      	lsls	r3, r3, #10
 800271a:	401a      	ands	r2, r3
 800271c:	2380      	movs	r3, #128	@ 0x80
 800271e:	029b      	lsls	r3, r3, #10
 8002720:	429a      	cmp	r2, r3
 8002722:	d101      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e113      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002728:	4b8b      	ldr	r3, [pc, #556]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800272a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800272c:	23c0      	movs	r3, #192	@ 0xc0
 800272e:	029b      	lsls	r3, r3, #10
 8002730:	4013      	ands	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d049      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x186>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	23c0      	movs	r3, #192	@ 0xc0
 8002740:	029b      	lsls	r3, r3, #10
 8002742:	4013      	ands	r3, r2
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	429a      	cmp	r2, r3
 8002748:	d004      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2220      	movs	r2, #32
 8002750:	4013      	ands	r3, r2
 8002752:	d10d      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	23c0      	movs	r3, #192	@ 0xc0
 800275a:	029b      	lsls	r3, r3, #10
 800275c:	4013      	ands	r3, r2
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	429a      	cmp	r2, r3
 8002762:	d034      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	2380      	movs	r3, #128	@ 0x80
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	4013      	ands	r3, r2
 800276e:	d02e      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002770:	4b79      	ldr	r3, [pc, #484]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002774:	4a7a      	ldr	r2, [pc, #488]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002776:	4013      	ands	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800277a:	4b77      	ldr	r3, [pc, #476]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800277c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800277e:	4b76      	ldr	r3, [pc, #472]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002780:	2180      	movs	r1, #128	@ 0x80
 8002782:	0309      	lsls	r1, r1, #12
 8002784:	430a      	orrs	r2, r1
 8002786:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002788:	4b73      	ldr	r3, [pc, #460]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800278a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800278c:	4b72      	ldr	r3, [pc, #456]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800278e:	4975      	ldr	r1, [pc, #468]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002790:	400a      	ands	r2, r1
 8002792:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002794:	4b70      	ldr	r3, [pc, #448]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	2380      	movs	r3, #128	@ 0x80
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4013      	ands	r3, r2
 80027a2:	d014      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7fe fe82 	bl	80014ac <HAL_GetTick>
 80027a8:	0003      	movs	r3, r0
 80027aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027ac:	e009      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7fe fe7d 	bl	80014ac <HAL_GetTick>
 80027b2:	0002      	movs	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	4a6b      	ldr	r2, [pc, #428]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e0c6      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027c2:	4b65      	ldr	r3, [pc, #404]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027c6:	2380      	movs	r3, #128	@ 0x80
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4013      	ands	r3, r2
 80027cc:	d0ef      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	2380      	movs	r3, #128	@ 0x80
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	4013      	ands	r3, r2
 80027d8:	d01f      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	23c0      	movs	r3, #192	@ 0xc0
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	401a      	ands	r2, r3
 80027e4:	23c0      	movs	r3, #192	@ 0xc0
 80027e6:	029b      	lsls	r3, r3, #10
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d10c      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80027ec:	4b5a      	ldr	r3, [pc, #360]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a5e      	ldr	r2, [pc, #376]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	23c0      	movs	r3, #192	@ 0xc0
 80027fc:	039b      	lsls	r3, r3, #14
 80027fe:	401a      	ands	r2, r3
 8002800:	4b55      	ldr	r3, [pc, #340]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002802:	430a      	orrs	r2, r1
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	4b54      	ldr	r3, [pc, #336]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002808:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	23c0      	movs	r3, #192	@ 0xc0
 8002810:	029b      	lsls	r3, r3, #10
 8002812:	401a      	ands	r2, r3
 8002814:	4b50      	ldr	r3, [pc, #320]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002816:	430a      	orrs	r2, r1
 8002818:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2220      	movs	r2, #32
 8002820:	4013      	ands	r3, r2
 8002822:	d01f      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	23c0      	movs	r3, #192	@ 0xc0
 800282a:	029b      	lsls	r3, r3, #10
 800282c:	401a      	ands	r2, r3
 800282e:	23c0      	movs	r3, #192	@ 0xc0
 8002830:	029b      	lsls	r3, r3, #10
 8002832:	429a      	cmp	r2, r3
 8002834:	d10c      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002836:	4b48      	ldr	r3, [pc, #288]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a4c      	ldr	r2, [pc, #304]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800283c:	4013      	ands	r3, r2
 800283e:	0019      	movs	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	23c0      	movs	r3, #192	@ 0xc0
 8002846:	039b      	lsls	r3, r3, #14
 8002848:	401a      	ands	r2, r3
 800284a:	4b43      	ldr	r3, [pc, #268]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	4b41      	ldr	r3, [pc, #260]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002852:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	23c0      	movs	r3, #192	@ 0xc0
 800285a:	029b      	lsls	r3, r3, #10
 800285c:	401a      	ands	r2, r3
 800285e:	4b3e      	ldr	r3, [pc, #248]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002860:	430a      	orrs	r2, r1
 8002862:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002864:	2317      	movs	r3, #23
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d105      	bne.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286e:	4b3a      	ldr	r3, [pc, #232]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002872:	4b39      	ldr	r3, [pc, #228]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002874:	493e      	ldr	r1, [pc, #248]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002876:	400a      	ands	r2, r1
 8002878:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2201      	movs	r2, #1
 8002880:	4013      	ands	r3, r2
 8002882:	d009      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002884:	4b34      	ldr	r3, [pc, #208]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002888:	2203      	movs	r2, #3
 800288a:	4393      	bics	r3, r2
 800288c:	0019      	movs	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	4b31      	ldr	r3, [pc, #196]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002894:	430a      	orrs	r2, r1
 8002896:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2202      	movs	r2, #2
 800289e:	4013      	ands	r3, r2
 80028a0:	d009      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a6:	220c      	movs	r2, #12
 80028a8:	4393      	bics	r3, r2
 80028aa:	0019      	movs	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	4b29      	ldr	r3, [pc, #164]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028b2:	430a      	orrs	r2, r1
 80028b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2204      	movs	r2, #4
 80028bc:	4013      	ands	r3, r2
 80028be:	d009      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028c0:	4b25      	ldr	r3, [pc, #148]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	0019      	movs	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	4b22      	ldr	r3, [pc, #136]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028d0:	430a      	orrs	r2, r1
 80028d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2208      	movs	r2, #8
 80028da:	4013      	ands	r3, r2
 80028dc:	d009      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028de:	4b1e      	ldr	r3, [pc, #120]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e2:	4a25      	ldr	r2, [pc, #148]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699a      	ldr	r2, [r3, #24]
 80028ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028ee:	430a      	orrs	r2, r1
 80028f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	2380      	movs	r3, #128	@ 0x80
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4013      	ands	r3, r2
 80028fc:	d009      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028fe:	4b16      	ldr	r3, [pc, #88]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002902:	4a17      	ldr	r2, [pc, #92]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002904:	4013      	ands	r3, r2
 8002906:	0019      	movs	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69da      	ldr	r2, [r3, #28]
 800290c:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800290e:	430a      	orrs	r2, r1
 8002910:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2240      	movs	r2, #64	@ 0x40
 8002918:	4013      	ands	r3, r2
 800291a:	d009      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800291c:	4b0e      	ldr	r3, [pc, #56]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800291e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002920:	4a16      	ldr	r2, [pc, #88]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002922:	4013      	ands	r3, r2
 8002924:	0019      	movs	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800292a:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800292c:	430a      	orrs	r2, r1
 800292e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2280      	movs	r2, #128	@ 0x80
 8002936:	4013      	ands	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800293a:	4b07      	ldr	r3, [pc, #28]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293e:	4a10      	ldr	r2, [pc, #64]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002940:	4013      	ands	r3, r2
 8002942:	0019      	movs	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1a      	ldr	r2, [r3, #32]
 8002948:	4b03      	ldr	r3, [pc, #12]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800294a:	430a      	orrs	r2, r1
 800294c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b006      	add	sp, #24
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	40007000 	.word	0x40007000
 8002960:	fffcffff 	.word	0xfffcffff
 8002964:	fff7ffff 	.word	0xfff7ffff
 8002968:	00001388 	.word	0x00001388
 800296c:	ffcfffff 	.word	0xffcfffff
 8002970:	efffffff 	.word	0xefffffff
 8002974:	fffff3ff 	.word	0xfffff3ff
 8002978:	ffffcfff 	.word	0xffffcfff
 800297c:	fbffffff 	.word	0xfbffffff
 8002980:	fff3ffff 	.word	0xfff3ffff

08002984 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e044      	b.n	8002a20 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800299a:	2b00      	cmp	r3, #0
 800299c:	d107      	bne.n	80029ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2278      	movs	r2, #120	@ 0x78
 80029a2:	2100      	movs	r1, #0
 80029a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7fe fbb3 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2224      	movs	r2, #36	@ 0x24
 80029b2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2101      	movs	r1, #1
 80029c0:	438a      	bics	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	0018      	movs	r0, r3
 80029d0:	f000 faca 	bl	8002f68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 f828 	bl	8002a2c <UART_SetConfig>
 80029dc:	0003      	movs	r3, r0
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e01c      	b.n	8002a20 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	490d      	ldr	r1, [pc, #52]	@ (8002a28 <HAL_UART_Init+0xa4>)
 80029f2:	400a      	ands	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	212a      	movs	r1, #42	@ 0x2a
 8002a02:	438a      	bics	r2, r1
 8002a04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2101      	movs	r1, #1
 8002a12:	430a      	orrs	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f000 fb59 	bl	80030d0 <UART_CheckIdleState>
 8002a1e:	0003      	movs	r3, r0
}
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b002      	add	sp, #8
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	ffffb7ff 	.word	0xffffb7ff

08002a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a2c:	b5b0      	push	{r4, r5, r7, lr}
 8002a2e:	b08e      	sub	sp, #56	@ 0x38
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a34:	231a      	movs	r3, #26
 8002a36:	2218      	movs	r2, #24
 8002a38:	189b      	adds	r3, r3, r2
 8002a3a:	19db      	adds	r3, r3, r7
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4ac3      	ldr	r2, [pc, #780]	@ (8002d6c <UART_SetConfig+0x340>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	0019      	movs	r1, r3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4abe      	ldr	r2, [pc, #760]	@ (8002d70 <UART_SetConfig+0x344>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	0019      	movs	r1, r3
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4ab8      	ldr	r2, [pc, #736]	@ (8002d74 <UART_SetConfig+0x348>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d004      	beq.n	8002aa0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	4ab4      	ldr	r2, [pc, #720]	@ (8002d78 <UART_SetConfig+0x34c>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	0019      	movs	r1, r3
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4ab0      	ldr	r2, [pc, #704]	@ (8002d7c <UART_SetConfig+0x350>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d131      	bne.n	8002b24 <UART_SetConfig+0xf8>
 8002ac0:	4baf      	ldr	r3, [pc, #700]	@ (8002d80 <UART_SetConfig+0x354>)
 8002ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d01d      	beq.n	8002b08 <UART_SetConfig+0xdc>
 8002acc:	d823      	bhi.n	8002b16 <UART_SetConfig+0xea>
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d00c      	beq.n	8002aec <UART_SetConfig+0xc0>
 8002ad2:	d820      	bhi.n	8002b16 <UART_SetConfig+0xea>
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <UART_SetConfig+0xb2>
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d00e      	beq.n	8002afa <UART_SetConfig+0xce>
 8002adc:	e01b      	b.n	8002b16 <UART_SetConfig+0xea>
 8002ade:	231b      	movs	r3, #27
 8002ae0:	2218      	movs	r2, #24
 8002ae2:	189b      	adds	r3, r3, r2
 8002ae4:	19db      	adds	r3, r3, r7
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	e0b4      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002aec:	231b      	movs	r3, #27
 8002aee:	2218      	movs	r2, #24
 8002af0:	189b      	adds	r3, r3, r2
 8002af2:	19db      	adds	r3, r3, r7
 8002af4:	2202      	movs	r2, #2
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e0ad      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002afa:	231b      	movs	r3, #27
 8002afc:	2218      	movs	r2, #24
 8002afe:	189b      	adds	r3, r3, r2
 8002b00:	19db      	adds	r3, r3, r7
 8002b02:	2204      	movs	r2, #4
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e0a6      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002b08:	231b      	movs	r3, #27
 8002b0a:	2218      	movs	r2, #24
 8002b0c:	189b      	adds	r3, r3, r2
 8002b0e:	19db      	adds	r3, r3, r7
 8002b10:	2208      	movs	r2, #8
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	e09f      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002b16:	231b      	movs	r3, #27
 8002b18:	2218      	movs	r2, #24
 8002b1a:	189b      	adds	r3, r3, r2
 8002b1c:	19db      	adds	r3, r3, r7
 8002b1e:	2210      	movs	r2, #16
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	e098      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a96      	ldr	r2, [pc, #600]	@ (8002d84 <UART_SetConfig+0x358>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d131      	bne.n	8002b92 <UART_SetConfig+0x166>
 8002b2e:	4b94      	ldr	r3, [pc, #592]	@ (8002d80 <UART_SetConfig+0x354>)
 8002b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b32:	220c      	movs	r2, #12
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	d01d      	beq.n	8002b76 <UART_SetConfig+0x14a>
 8002b3a:	d823      	bhi.n	8002b84 <UART_SetConfig+0x158>
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d00c      	beq.n	8002b5a <UART_SetConfig+0x12e>
 8002b40:	d820      	bhi.n	8002b84 <UART_SetConfig+0x158>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <UART_SetConfig+0x120>
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d00e      	beq.n	8002b68 <UART_SetConfig+0x13c>
 8002b4a:	e01b      	b.n	8002b84 <UART_SetConfig+0x158>
 8002b4c:	231b      	movs	r3, #27
 8002b4e:	2218      	movs	r2, #24
 8002b50:	189b      	adds	r3, r3, r2
 8002b52:	19db      	adds	r3, r3, r7
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
 8002b58:	e07d      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002b5a:	231b      	movs	r3, #27
 8002b5c:	2218      	movs	r2, #24
 8002b5e:	189b      	adds	r3, r3, r2
 8002b60:	19db      	adds	r3, r3, r7
 8002b62:	2202      	movs	r2, #2
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	e076      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002b68:	231b      	movs	r3, #27
 8002b6a:	2218      	movs	r2, #24
 8002b6c:	189b      	adds	r3, r3, r2
 8002b6e:	19db      	adds	r3, r3, r7
 8002b70:	2204      	movs	r2, #4
 8002b72:	701a      	strb	r2, [r3, #0]
 8002b74:	e06f      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002b76:	231b      	movs	r3, #27
 8002b78:	2218      	movs	r2, #24
 8002b7a:	189b      	adds	r3, r3, r2
 8002b7c:	19db      	adds	r3, r3, r7
 8002b7e:	2208      	movs	r2, #8
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e068      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002b84:	231b      	movs	r3, #27
 8002b86:	2218      	movs	r2, #24
 8002b88:	189b      	adds	r3, r3, r2
 8002b8a:	19db      	adds	r3, r3, r7
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	e061      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a7c      	ldr	r2, [pc, #496]	@ (8002d88 <UART_SetConfig+0x35c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d106      	bne.n	8002baa <UART_SetConfig+0x17e>
 8002b9c:	231b      	movs	r3, #27
 8002b9e:	2218      	movs	r2, #24
 8002ba0:	189b      	adds	r3, r3, r2
 8002ba2:	19db      	adds	r3, r3, r7
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	e055      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a77      	ldr	r2, [pc, #476]	@ (8002d8c <UART_SetConfig+0x360>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d106      	bne.n	8002bc2 <UART_SetConfig+0x196>
 8002bb4:	231b      	movs	r3, #27
 8002bb6:	2218      	movs	r2, #24
 8002bb8:	189b      	adds	r3, r3, r2
 8002bba:	19db      	adds	r3, r3, r7
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
 8002bc0:	e049      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a6b      	ldr	r2, [pc, #428]	@ (8002d74 <UART_SetConfig+0x348>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d13e      	bne.n	8002c4a <UART_SetConfig+0x21e>
 8002bcc:	4b6c      	ldr	r3, [pc, #432]	@ (8002d80 <UART_SetConfig+0x354>)
 8002bce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002bd0:	23c0      	movs	r3, #192	@ 0xc0
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	22c0      	movs	r2, #192	@ 0xc0
 8002bd8:	0112      	lsls	r2, r2, #4
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d027      	beq.n	8002c2e <UART_SetConfig+0x202>
 8002bde:	22c0      	movs	r2, #192	@ 0xc0
 8002be0:	0112      	lsls	r2, r2, #4
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d82a      	bhi.n	8002c3c <UART_SetConfig+0x210>
 8002be6:	2280      	movs	r2, #128	@ 0x80
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d011      	beq.n	8002c12 <UART_SetConfig+0x1e6>
 8002bee:	2280      	movs	r2, #128	@ 0x80
 8002bf0:	0112      	lsls	r2, r2, #4
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d822      	bhi.n	8002c3c <UART_SetConfig+0x210>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d004      	beq.n	8002c04 <UART_SetConfig+0x1d8>
 8002bfa:	2280      	movs	r2, #128	@ 0x80
 8002bfc:	00d2      	lsls	r2, r2, #3
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00e      	beq.n	8002c20 <UART_SetConfig+0x1f4>
 8002c02:	e01b      	b.n	8002c3c <UART_SetConfig+0x210>
 8002c04:	231b      	movs	r3, #27
 8002c06:	2218      	movs	r2, #24
 8002c08:	189b      	adds	r3, r3, r2
 8002c0a:	19db      	adds	r3, r3, r7
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	e021      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002c12:	231b      	movs	r3, #27
 8002c14:	2218      	movs	r2, #24
 8002c16:	189b      	adds	r3, r3, r2
 8002c18:	19db      	adds	r3, r3, r7
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	701a      	strb	r2, [r3, #0]
 8002c1e:	e01a      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002c20:	231b      	movs	r3, #27
 8002c22:	2218      	movs	r2, #24
 8002c24:	189b      	adds	r3, r3, r2
 8002c26:	19db      	adds	r3, r3, r7
 8002c28:	2204      	movs	r2, #4
 8002c2a:	701a      	strb	r2, [r3, #0]
 8002c2c:	e013      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002c2e:	231b      	movs	r3, #27
 8002c30:	2218      	movs	r2, #24
 8002c32:	189b      	adds	r3, r3, r2
 8002c34:	19db      	adds	r3, r3, r7
 8002c36:	2208      	movs	r2, #8
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	e00c      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002c3c:	231b      	movs	r3, #27
 8002c3e:	2218      	movs	r2, #24
 8002c40:	189b      	adds	r3, r3, r2
 8002c42:	19db      	adds	r3, r3, r7
 8002c44:	2210      	movs	r2, #16
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e005      	b.n	8002c56 <UART_SetConfig+0x22a>
 8002c4a:	231b      	movs	r3, #27
 8002c4c:	2218      	movs	r2, #24
 8002c4e:	189b      	adds	r3, r3, r2
 8002c50:	19db      	adds	r3, r3, r7
 8002c52:	2210      	movs	r2, #16
 8002c54:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a46      	ldr	r2, [pc, #280]	@ (8002d74 <UART_SetConfig+0x348>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d000      	beq.n	8002c62 <UART_SetConfig+0x236>
 8002c60:	e09a      	b.n	8002d98 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c62:	231b      	movs	r3, #27
 8002c64:	2218      	movs	r2, #24
 8002c66:	189b      	adds	r3, r3, r2
 8002c68:	19db      	adds	r3, r3, r7
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d01d      	beq.n	8002cac <UART_SetConfig+0x280>
 8002c70:	dc20      	bgt.n	8002cb4 <UART_SetConfig+0x288>
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d015      	beq.n	8002ca2 <UART_SetConfig+0x276>
 8002c76:	dc1d      	bgt.n	8002cb4 <UART_SetConfig+0x288>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <UART_SetConfig+0x256>
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d005      	beq.n	8002c8c <UART_SetConfig+0x260>
 8002c80:	e018      	b.n	8002cb4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c82:	f7ff fcb5 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 8002c86:	0003      	movs	r3, r0
 8002c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002c8a:	e01c      	b.n	8002cc6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d80 <UART_SetConfig+0x354>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2210      	movs	r2, #16
 8002c92:	4013      	ands	r3, r2
 8002c94:	d002      	beq.n	8002c9c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c96:	4b3e      	ldr	r3, [pc, #248]	@ (8002d90 <UART_SetConfig+0x364>)
 8002c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c9a:	e014      	b.n	8002cc6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8002c9c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d94 <UART_SetConfig+0x368>)
 8002c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ca0:	e011      	b.n	8002cc6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ca2:	f7ff fc15 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002caa:	e00c      	b.n	8002cc6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cac:	2380      	movs	r3, #128	@ 0x80
 8002cae:	021b      	lsls	r3, r3, #8
 8002cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002cb2:	e008      	b.n	8002cc6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002cb8:	231a      	movs	r3, #26
 8002cba:	2218      	movs	r2, #24
 8002cbc:	189b      	adds	r3, r3, r2
 8002cbe:	19db      	adds	r3, r3, r7
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
        break;
 8002cc4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d100      	bne.n	8002cce <UART_SetConfig+0x2a2>
 8002ccc:	e133      	b.n	8002f36 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	0013      	movs	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	189b      	adds	r3, r3, r2
 8002cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d305      	bcc.n	8002cea <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d906      	bls.n	8002cf8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8002cea:	231a      	movs	r3, #26
 8002cec:	2218      	movs	r2, #24
 8002cee:	189b      	adds	r3, r3, r2
 8002cf0:	19db      	adds	r3, r3, r7
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e11e      	b.n	8002f36 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	6939      	ldr	r1, [r7, #16]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	000b      	movs	r3, r1
 8002d06:	0e1b      	lsrs	r3, r3, #24
 8002d08:	0010      	movs	r0, r2
 8002d0a:	0205      	lsls	r5, r0, #8
 8002d0c:	431d      	orrs	r5, r3
 8002d0e:	000b      	movs	r3, r1
 8002d10:	021c      	lsls	r4, r3, #8
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68b8      	ldr	r0, [r7, #8]
 8002d20:	68f9      	ldr	r1, [r7, #12]
 8002d22:	1900      	adds	r0, r0, r4
 8002d24:	4169      	adcs	r1, r5
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f7fd fb68 	bl	8000408 <__aeabi_uldivmod>
 8002d38:	0002      	movs	r2, r0
 8002d3a:	000b      	movs	r3, r1
 8002d3c:	0013      	movs	r3, r2
 8002d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d42:	23c0      	movs	r3, #192	@ 0xc0
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d309      	bcc.n	8002d5e <UART_SetConfig+0x332>
 8002d4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d4c:	2380      	movs	r3, #128	@ 0x80
 8002d4e:	035b      	lsls	r3, r3, #13
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d204      	bcs.n	8002d5e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	e0eb      	b.n	8002f36 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8002d5e:	231a      	movs	r3, #26
 8002d60:	2218      	movs	r2, #24
 8002d62:	189b      	adds	r3, r3, r2
 8002d64:	19db      	adds	r3, r3, r7
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	e0e4      	b.n	8002f36 <UART_SetConfig+0x50a>
 8002d6c:	efff69f3 	.word	0xefff69f3
 8002d70:	ffffcfff 	.word	0xffffcfff
 8002d74:	40004800 	.word	0x40004800
 8002d78:	fffff4ff 	.word	0xfffff4ff
 8002d7c:	40013800 	.word	0x40013800
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40004400 	.word	0x40004400
 8002d88:	40004c00 	.word	0x40004c00
 8002d8c:	40005000 	.word	0x40005000
 8002d90:	003d0900 	.word	0x003d0900
 8002d94:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	021b      	lsls	r3, r3, #8
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d000      	beq.n	8002da6 <UART_SetConfig+0x37a>
 8002da4:	e070      	b.n	8002e88 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8002da6:	231b      	movs	r3, #27
 8002da8:	2218      	movs	r2, #24
 8002daa:	189b      	adds	r3, r3, r2
 8002dac:	19db      	adds	r3, r3, r7
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d822      	bhi.n	8002dfa <UART_SetConfig+0x3ce>
 8002db4:	009a      	lsls	r2, r3, #2
 8002db6:	4b67      	ldr	r3, [pc, #412]	@ (8002f54 <UART_SetConfig+0x528>)
 8002db8:	18d3      	adds	r3, r2, r3
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dbe:	f7ff fc17 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 8002dc2:	0003      	movs	r3, r0
 8002dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002dc6:	e021      	b.n	8002e0c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dc8:	f7ff fc28 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002dd0:	e01c      	b.n	8002e0c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dd2:	4b61      	ldr	r3, [pc, #388]	@ (8002f58 <UART_SetConfig+0x52c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2210      	movs	r2, #16
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d002      	beq.n	8002de2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ddc:	4b5f      	ldr	r3, [pc, #380]	@ (8002f5c <UART_SetConfig+0x530>)
 8002dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002de0:	e014      	b.n	8002e0c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8002de2:	4b5f      	ldr	r3, [pc, #380]	@ (8002f60 <UART_SetConfig+0x534>)
 8002de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002de6:	e011      	b.n	8002e0c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002de8:	f7ff fb72 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8002dec:	0003      	movs	r3, r0
 8002dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002df0:	e00c      	b.n	8002e0c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002df2:	2380      	movs	r3, #128	@ 0x80
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002df8:	e008      	b.n	8002e0c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002dfe:	231a      	movs	r3, #26
 8002e00:	2218      	movs	r2, #24
 8002e02:	189b      	adds	r3, r3, r2
 8002e04:	19db      	adds	r3, r3, r7
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
        break;
 8002e0a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d100      	bne.n	8002e14 <UART_SetConfig+0x3e8>
 8002e12:	e090      	b.n	8002f36 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e16:	005a      	lsls	r2, r3, #1
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	18d2      	adds	r2, r2, r3
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	0019      	movs	r1, r3
 8002e26:	0010      	movs	r0, r2
 8002e28:	f7fd f978 	bl	800011c <__udivsi3>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e32:	2b0f      	cmp	r3, #15
 8002e34:	d921      	bls.n	8002e7a <UART_SetConfig+0x44e>
 8002e36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	025b      	lsls	r3, r3, #9
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d21c      	bcs.n	8002e7a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	200e      	movs	r0, #14
 8002e46:	2418      	movs	r4, #24
 8002e48:	1903      	adds	r3, r0, r4
 8002e4a:	19db      	adds	r3, r3, r7
 8002e4c:	210f      	movs	r1, #15
 8002e4e:	438a      	bics	r2, r1
 8002e50:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e54:	085b      	lsrs	r3, r3, #1
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2207      	movs	r2, #7
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	b299      	uxth	r1, r3
 8002e5e:	1903      	adds	r3, r0, r4
 8002e60:	19db      	adds	r3, r3, r7
 8002e62:	1902      	adds	r2, r0, r4
 8002e64:	19d2      	adds	r2, r2, r7
 8002e66:	8812      	ldrh	r2, [r2, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	1902      	adds	r2, r0, r4
 8002e72:	19d2      	adds	r2, r2, r7
 8002e74:	8812      	ldrh	r2, [r2, #0]
 8002e76:	60da      	str	r2, [r3, #12]
 8002e78:	e05d      	b.n	8002f36 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8002e7a:	231a      	movs	r3, #26
 8002e7c:	2218      	movs	r2, #24
 8002e7e:	189b      	adds	r3, r3, r2
 8002e80:	19db      	adds	r3, r3, r7
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	e056      	b.n	8002f36 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e88:	231b      	movs	r3, #27
 8002e8a:	2218      	movs	r2, #24
 8002e8c:	189b      	adds	r3, r3, r2
 8002e8e:	19db      	adds	r3, r3, r7
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d822      	bhi.n	8002edc <UART_SetConfig+0x4b0>
 8002e96:	009a      	lsls	r2, r3, #2
 8002e98:	4b32      	ldr	r3, [pc, #200]	@ (8002f64 <UART_SetConfig+0x538>)
 8002e9a:	18d3      	adds	r3, r2, r3
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea0:	f7ff fba6 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ea8:	e021      	b.n	8002eee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eaa:	f7ff fbb7 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002eb2:	e01c      	b.n	8002eee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002eb4:	4b28      	ldr	r3, [pc, #160]	@ (8002f58 <UART_SetConfig+0x52c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2210      	movs	r2, #16
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d002      	beq.n	8002ec4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ebe:	4b27      	ldr	r3, [pc, #156]	@ (8002f5c <UART_SetConfig+0x530>)
 8002ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ec2:	e014      	b.n	8002eee <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8002ec4:	4b26      	ldr	r3, [pc, #152]	@ (8002f60 <UART_SetConfig+0x534>)
 8002ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ec8:	e011      	b.n	8002eee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eca:	f7ff fb01 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ed2:	e00c      	b.n	8002eee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ed4:	2380      	movs	r3, #128	@ 0x80
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002eda:	e008      	b.n	8002eee <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002ee0:	231a      	movs	r3, #26
 8002ee2:	2218      	movs	r2, #24
 8002ee4:	189b      	adds	r3, r3, r2
 8002ee6:	19db      	adds	r3, r3, r7
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
        break;
 8002eec:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d020      	beq.n	8002f36 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	085a      	lsrs	r2, r3, #1
 8002efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002efc:	18d2      	adds	r2, r2, r3
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	0019      	movs	r1, r3
 8002f04:	0010      	movs	r0, r2
 8002f06:	f7fd f909 	bl	800011c <__udivsi3>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f10:	2b0f      	cmp	r3, #15
 8002f12:	d90a      	bls.n	8002f2a <UART_SetConfig+0x4fe>
 8002f14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f16:	2380      	movs	r3, #128	@ 0x80
 8002f18:	025b      	lsls	r3, r3, #9
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d205      	bcs.n	8002f2a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	e005      	b.n	8002f36 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8002f2a:	231a      	movs	r3, #26
 8002f2c:	2218      	movs	r2, #24
 8002f2e:	189b      	adds	r3, r3, r2
 8002f30:	19db      	adds	r3, r3, r7
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002f42:	231a      	movs	r3, #26
 8002f44:	2218      	movs	r2, #24
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	19db      	adds	r3, r3, r7
 8002f4a:	781b      	ldrb	r3, [r3, #0]
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b00e      	add	sp, #56	@ 0x38
 8002f52:	bdb0      	pop	{r4, r5, r7, pc}
 8002f54:	080044ac 	.word	0x080044ac
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	003d0900 	.word	0x003d0900
 8002f60:	00f42400 	.word	0x00f42400
 8002f64:	080044d0 	.word	0x080044d0

08002f68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	2208      	movs	r2, #8
 8002f76:	4013      	ands	r3, r2
 8002f78:	d00b      	beq.n	8002f92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4a4a      	ldr	r2, [pc, #296]	@ (80030ac <UART_AdvFeatureConfig+0x144>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	0019      	movs	r1, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	2201      	movs	r2, #1
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d00b      	beq.n	8002fb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4a43      	ldr	r2, [pc, #268]	@ (80030b0 <UART_AdvFeatureConfig+0x148>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	2202      	movs	r2, #2
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d00b      	beq.n	8002fd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a3b      	ldr	r2, [pc, #236]	@ (80030b4 <UART_AdvFeatureConfig+0x14c>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	0019      	movs	r1, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	2204      	movs	r2, #4
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d00b      	beq.n	8002ff8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4a34      	ldr	r2, [pc, #208]	@ (80030b8 <UART_AdvFeatureConfig+0x150>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	0019      	movs	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	2210      	movs	r2, #16
 8002ffe:	4013      	ands	r3, r2
 8003000:	d00b      	beq.n	800301a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	4a2c      	ldr	r2, [pc, #176]	@ (80030bc <UART_AdvFeatureConfig+0x154>)
 800300a:	4013      	ands	r3, r2
 800300c:	0019      	movs	r1, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301e:	2220      	movs	r2, #32
 8003020:	4013      	ands	r3, r2
 8003022:	d00b      	beq.n	800303c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	4a25      	ldr	r2, [pc, #148]	@ (80030c0 <UART_AdvFeatureConfig+0x158>)
 800302c:	4013      	ands	r3, r2
 800302e:	0019      	movs	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	2240      	movs	r2, #64	@ 0x40
 8003042:	4013      	ands	r3, r2
 8003044:	d01d      	beq.n	8003082 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4a1d      	ldr	r2, [pc, #116]	@ (80030c4 <UART_AdvFeatureConfig+0x15c>)
 800304e:	4013      	ands	r3, r2
 8003050:	0019      	movs	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	035b      	lsls	r3, r3, #13
 8003066:	429a      	cmp	r2, r3
 8003068:	d10b      	bne.n	8003082 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4a15      	ldr	r2, [pc, #84]	@ (80030c8 <UART_AdvFeatureConfig+0x160>)
 8003072:	4013      	ands	r3, r2
 8003074:	0019      	movs	r1, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	2280      	movs	r2, #128	@ 0x80
 8003088:	4013      	ands	r3, r2
 800308a:	d00b      	beq.n	80030a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4a0e      	ldr	r2, [pc, #56]	@ (80030cc <UART_AdvFeatureConfig+0x164>)
 8003094:	4013      	ands	r3, r2
 8003096:	0019      	movs	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	605a      	str	r2, [r3, #4]
  }
}
 80030a4:	46c0      	nop			@ (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b002      	add	sp, #8
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	ffff7fff 	.word	0xffff7fff
 80030b0:	fffdffff 	.word	0xfffdffff
 80030b4:	fffeffff 	.word	0xfffeffff
 80030b8:	fffbffff 	.word	0xfffbffff
 80030bc:	ffffefff 	.word	0xffffefff
 80030c0:	ffffdfff 	.word	0xffffdfff
 80030c4:	ffefffff 	.word	0xffefffff
 80030c8:	ff9fffff 	.word	0xff9fffff
 80030cc:	fff7ffff 	.word	0xfff7ffff

080030d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b092      	sub	sp, #72	@ 0x48
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2284      	movs	r2, #132	@ 0x84
 80030dc:	2100      	movs	r1, #0
 80030de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030e0:	f7fe f9e4 	bl	80014ac <HAL_GetTick>
 80030e4:	0003      	movs	r3, r0
 80030e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2208      	movs	r2, #8
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d12c      	bne.n	8003150 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030f8:	2280      	movs	r2, #128	@ 0x80
 80030fa:	0391      	lsls	r1, r2, #14
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	4a46      	ldr	r2, [pc, #280]	@ (8003218 <UART_CheckIdleState+0x148>)
 8003100:	9200      	str	r2, [sp, #0]
 8003102:	2200      	movs	r2, #0
 8003104:	f000 f88c 	bl	8003220 <UART_WaitOnFlagUntilTimeout>
 8003108:	1e03      	subs	r3, r0, #0
 800310a:	d021      	beq.n	8003150 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800310c:	f3ef 8310 	mrs	r3, PRIMASK
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003114:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003116:	2301      	movs	r3, #1
 8003118:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311c:	f383 8810 	msr	PRIMASK, r3
}
 8003120:	46c0      	nop			@ (mov r8, r8)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2180      	movs	r1, #128	@ 0x80
 800312e:	438a      	bics	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003134:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003138:	f383 8810 	msr	PRIMASK, r3
}
 800313c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2220      	movs	r2, #32
 8003142:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2278      	movs	r2, #120	@ 0x78
 8003148:	2100      	movs	r1, #0
 800314a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e05f      	b.n	8003210 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2204      	movs	r2, #4
 8003158:	4013      	ands	r3, r2
 800315a:	2b04      	cmp	r3, #4
 800315c:	d146      	bne.n	80031ec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800315e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003160:	2280      	movs	r2, #128	@ 0x80
 8003162:	03d1      	lsls	r1, r2, #15
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4a2c      	ldr	r2, [pc, #176]	@ (8003218 <UART_CheckIdleState+0x148>)
 8003168:	9200      	str	r2, [sp, #0]
 800316a:	2200      	movs	r2, #0
 800316c:	f000 f858 	bl	8003220 <UART_WaitOnFlagUntilTimeout>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d03b      	beq.n	80031ec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003174:	f3ef 8310 	mrs	r3, PRIMASK
 8003178:	60fb      	str	r3, [r7, #12]
  return(result);
 800317a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800317c:	637b      	str	r3, [r7, #52]	@ 0x34
 800317e:	2301      	movs	r3, #1
 8003180:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f383 8810 	msr	PRIMASK, r3
}
 8003188:	46c0      	nop			@ (mov r8, r8)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4921      	ldr	r1, [pc, #132]	@ (800321c <UART_CheckIdleState+0x14c>)
 8003196:	400a      	ands	r2, r1
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f383 8810 	msr	PRIMASK, r3
}
 80031a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031a6:	f3ef 8310 	mrs	r3, PRIMASK
 80031aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80031ac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80031b0:	2301      	movs	r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f383 8810 	msr	PRIMASK, r3
}
 80031ba:	46c0      	nop			@ (mov r8, r8)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2101      	movs	r1, #1
 80031c8:	438a      	bics	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	f383 8810 	msr	PRIMASK, r3
}
 80031d6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2280      	movs	r2, #128	@ 0x80
 80031dc:	2120      	movs	r1, #32
 80031de:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2278      	movs	r2, #120	@ 0x78
 80031e4:	2100      	movs	r1, #0
 80031e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e011      	b.n	8003210 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2280      	movs	r2, #128	@ 0x80
 80031f6:	2120      	movs	r1, #32
 80031f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2278      	movs	r2, #120	@ 0x78
 800320a:	2100      	movs	r1, #0
 800320c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	b010      	add	sp, #64	@ 0x40
 8003216:	bd80      	pop	{r7, pc}
 8003218:	01ffffff 	.word	0x01ffffff
 800321c:	fffffedf 	.word	0xfffffedf

08003220 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	1dfb      	adds	r3, r7, #7
 800322e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003230:	e051      	b.n	80032d6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	3301      	adds	r3, #1
 8003236:	d04e      	beq.n	80032d6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003238:	f7fe f938 	bl	80014ac <HAL_GetTick>
 800323c:	0002      	movs	r2, r0
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	429a      	cmp	r2, r3
 8003246:	d302      	bcc.n	800324e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e051      	b.n	80032f6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2204      	movs	r2, #4
 800325a:	4013      	ands	r3, r2
 800325c:	d03b      	beq.n	80032d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b80      	cmp	r3, #128	@ 0x80
 8003262:	d038      	beq.n	80032d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b40      	cmp	r3, #64	@ 0x40
 8003268:	d035      	beq.n	80032d6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	2208      	movs	r2, #8
 8003272:	4013      	ands	r3, r2
 8003274:	2b08      	cmp	r3, #8
 8003276:	d111      	bne.n	800329c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2208      	movs	r2, #8
 800327e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	0018      	movs	r0, r3
 8003284:	f000 f83c 	bl	8003300 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2284      	movs	r2, #132	@ 0x84
 800328c:	2108      	movs	r1, #8
 800328e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2278      	movs	r2, #120	@ 0x78
 8003294:	2100      	movs	r1, #0
 8003296:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e02c      	b.n	80032f6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69da      	ldr	r2, [r3, #28]
 80032a2:	2380      	movs	r3, #128	@ 0x80
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	401a      	ands	r2, r3
 80032a8:	2380      	movs	r3, #128	@ 0x80
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d112      	bne.n	80032d6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2280      	movs	r2, #128	@ 0x80
 80032b6:	0112      	lsls	r2, r2, #4
 80032b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	0018      	movs	r0, r3
 80032be:	f000 f81f 	bl	8003300 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2284      	movs	r2, #132	@ 0x84
 80032c6:	2120      	movs	r1, #32
 80032c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2278      	movs	r2, #120	@ 0x78
 80032ce:	2100      	movs	r1, #0
 80032d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e00f      	b.n	80032f6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	4013      	ands	r3, r2
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	425a      	negs	r2, r3
 80032e6:	4153      	adcs	r3, r2
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	001a      	movs	r2, r3
 80032ec:	1dfb      	adds	r3, r7, #7
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d09e      	beq.n	8003232 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	0018      	movs	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b004      	add	sp, #16
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08e      	sub	sp, #56	@ 0x38
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003308:	f3ef 8310 	mrs	r3, PRIMASK
 800330c:	617b      	str	r3, [r7, #20]
  return(result);
 800330e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003310:	637b      	str	r3, [r7, #52]	@ 0x34
 8003312:	2301      	movs	r3, #1
 8003314:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f383 8810 	msr	PRIMASK, r3
}
 800331c:	46c0      	nop			@ (mov r8, r8)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4926      	ldr	r1, [pc, #152]	@ (80033c4 <UART_EndRxTransfer+0xc4>)
 800332a:	400a      	ands	r2, r1
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003330:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f383 8810 	msr	PRIMASK, r3
}
 8003338:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800333a:	f3ef 8310 	mrs	r3, PRIMASK
 800333e:	623b      	str	r3, [r7, #32]
  return(result);
 8003340:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003342:	633b      	str	r3, [r7, #48]	@ 0x30
 8003344:	2301      	movs	r3, #1
 8003346:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334a:	f383 8810 	msr	PRIMASK, r3
}
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2101      	movs	r1, #1
 800335c:	438a      	bics	r2, r1
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003362:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003366:	f383 8810 	msr	PRIMASK, r3
}
 800336a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003370:	2b01      	cmp	r3, #1
 8003372:	d118      	bne.n	80033a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003374:	f3ef 8310 	mrs	r3, PRIMASK
 8003378:	60bb      	str	r3, [r7, #8]
  return(result);
 800337a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800337c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800337e:	2301      	movs	r3, #1
 8003380:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f383 8810 	msr	PRIMASK, r3
}
 8003388:	46c0      	nop			@ (mov r8, r8)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2110      	movs	r1, #16
 8003396:	438a      	bics	r2, r1
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f383 8810 	msr	PRIMASK, r3
}
 80033a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2280      	movs	r2, #128	@ 0x80
 80033aa:	2120      	movs	r1, #32
 80033ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80033ba:	46c0      	nop			@ (mov r8, r8)
 80033bc:	46bd      	mov	sp, r7
 80033be:	b00e      	add	sp, #56	@ 0x38
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	46c0      	nop			@ (mov r8, r8)
 80033c4:	fffffedf 	.word	0xfffffedf

080033c8 <srand>:
 80033c8:	4b11      	ldr	r3, [pc, #68]	@ (8003410 <srand+0x48>)
 80033ca:	b570      	push	{r4, r5, r6, lr}
 80033cc:	681d      	ldr	r5, [r3, #0]
 80033ce:	0004      	movs	r4, r0
 80033d0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <srand+0x3c>
 80033d6:	2018      	movs	r0, #24
 80033d8:	f000 f97c 	bl	80036d4 <malloc>
 80033dc:	1e02      	subs	r2, r0, #0
 80033de:	6328      	str	r0, [r5, #48]	@ 0x30
 80033e0:	d104      	bne.n	80033ec <srand+0x24>
 80033e2:	2146      	movs	r1, #70	@ 0x46
 80033e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003414 <srand+0x4c>)
 80033e6:	480c      	ldr	r0, [pc, #48]	@ (8003418 <srand+0x50>)
 80033e8:	f000 f956 	bl	8003698 <__assert_func>
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <srand+0x54>)
 80033ee:	2100      	movs	r1, #0
 80033f0:	6003      	str	r3, [r0, #0]
 80033f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <srand+0x58>)
 80033f4:	6043      	str	r3, [r0, #4]
 80033f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003424 <srand+0x5c>)
 80033f8:	6083      	str	r3, [r0, #8]
 80033fa:	230b      	movs	r3, #11
 80033fc:	8183      	strh	r3, [r0, #12]
 80033fe:	2001      	movs	r0, #1
 8003400:	6110      	str	r0, [r2, #16]
 8003402:	6151      	str	r1, [r2, #20]
 8003404:	2200      	movs	r2, #0
 8003406:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003408:	611c      	str	r4, [r3, #16]
 800340a:	615a      	str	r2, [r3, #20]
 800340c:	bd70      	pop	{r4, r5, r6, pc}
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	20000018 	.word	0x20000018
 8003414:	080044f4 	.word	0x080044f4
 8003418:	0800450b 	.word	0x0800450b
 800341c:	abcd330e 	.word	0xabcd330e
 8003420:	e66d1234 	.word	0xe66d1234
 8003424:	0005deec 	.word	0x0005deec

08003428 <rand>:
 8003428:	4b16      	ldr	r3, [pc, #88]	@ (8003484 <rand+0x5c>)
 800342a:	b510      	push	{r4, lr}
 800342c:	681c      	ldr	r4, [r3, #0]
 800342e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003430:	2b00      	cmp	r3, #0
 8003432:	d116      	bne.n	8003462 <rand+0x3a>
 8003434:	2018      	movs	r0, #24
 8003436:	f000 f94d 	bl	80036d4 <malloc>
 800343a:	1e02      	subs	r2, r0, #0
 800343c:	6320      	str	r0, [r4, #48]	@ 0x30
 800343e:	d104      	bne.n	800344a <rand+0x22>
 8003440:	2152      	movs	r1, #82	@ 0x52
 8003442:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <rand+0x60>)
 8003444:	4811      	ldr	r0, [pc, #68]	@ (800348c <rand+0x64>)
 8003446:	f000 f927 	bl	8003698 <__assert_func>
 800344a:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <rand+0x68>)
 800344c:	2100      	movs	r1, #0
 800344e:	6003      	str	r3, [r0, #0]
 8003450:	4b10      	ldr	r3, [pc, #64]	@ (8003494 <rand+0x6c>)
 8003452:	6043      	str	r3, [r0, #4]
 8003454:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <rand+0x70>)
 8003456:	6083      	str	r3, [r0, #8]
 8003458:	230b      	movs	r3, #11
 800345a:	8183      	strh	r3, [r0, #12]
 800345c:	2001      	movs	r0, #1
 800345e:	6110      	str	r0, [r2, #16]
 8003460:	6151      	str	r1, [r2, #20]
 8003462:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8003464:	4a0d      	ldr	r2, [pc, #52]	@ (800349c <rand+0x74>)
 8003466:	6920      	ldr	r0, [r4, #16]
 8003468:	6961      	ldr	r1, [r4, #20]
 800346a:	4b0d      	ldr	r3, [pc, #52]	@ (80034a0 <rand+0x78>)
 800346c:	f7fc ffec 	bl	8000448 <__aeabi_lmul>
 8003470:	2201      	movs	r2, #1
 8003472:	2300      	movs	r3, #0
 8003474:	1880      	adds	r0, r0, r2
 8003476:	4159      	adcs	r1, r3
 8003478:	6120      	str	r0, [r4, #16]
 800347a:	6161      	str	r1, [r4, #20]
 800347c:	0048      	lsls	r0, r1, #1
 800347e:	0840      	lsrs	r0, r0, #1
 8003480:	bd10      	pop	{r4, pc}
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	20000018 	.word	0x20000018
 8003488:	080044f4 	.word	0x080044f4
 800348c:	0800450b 	.word	0x0800450b
 8003490:	abcd330e 	.word	0xabcd330e
 8003494:	e66d1234 	.word	0xe66d1234
 8003498:	0005deec 	.word	0x0005deec
 800349c:	4c957f2d 	.word	0x4c957f2d
 80034a0:	5851f42d 	.word	0x5851f42d

080034a4 <std>:
 80034a4:	2300      	movs	r3, #0
 80034a6:	b510      	push	{r4, lr}
 80034a8:	0004      	movs	r4, r0
 80034aa:	6003      	str	r3, [r0, #0]
 80034ac:	6043      	str	r3, [r0, #4]
 80034ae:	6083      	str	r3, [r0, #8]
 80034b0:	8181      	strh	r1, [r0, #12]
 80034b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80034b4:	81c2      	strh	r2, [r0, #14]
 80034b6:	6103      	str	r3, [r0, #16]
 80034b8:	6143      	str	r3, [r0, #20]
 80034ba:	6183      	str	r3, [r0, #24]
 80034bc:	0019      	movs	r1, r3
 80034be:	2208      	movs	r2, #8
 80034c0:	305c      	adds	r0, #92	@ 0x5c
 80034c2:	f000 f8b3 	bl	800362c <memset>
 80034c6:	4b0b      	ldr	r3, [pc, #44]	@ (80034f4 <std+0x50>)
 80034c8:	6224      	str	r4, [r4, #32]
 80034ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80034cc:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <std+0x54>)
 80034ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80034d0:	4b0a      	ldr	r3, [pc, #40]	@ (80034fc <std+0x58>)
 80034d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80034d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003500 <std+0x5c>)
 80034d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80034d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003504 <std+0x60>)
 80034da:	429c      	cmp	r4, r3
 80034dc:	d005      	beq.n	80034ea <std+0x46>
 80034de:	4b0a      	ldr	r3, [pc, #40]	@ (8003508 <std+0x64>)
 80034e0:	429c      	cmp	r4, r3
 80034e2:	d002      	beq.n	80034ea <std+0x46>
 80034e4:	4b09      	ldr	r3, [pc, #36]	@ (800350c <std+0x68>)
 80034e6:	429c      	cmp	r4, r3
 80034e8:	d103      	bne.n	80034f2 <std+0x4e>
 80034ea:	0020      	movs	r0, r4
 80034ec:	3058      	adds	r0, #88	@ 0x58
 80034ee:	f000 f8cf 	bl	8003690 <__retarget_lock_init_recursive>
 80034f2:	bd10      	pop	{r4, pc}
 80034f4:	080039b1 	.word	0x080039b1
 80034f8:	080039d9 	.word	0x080039d9
 80034fc:	08003a11 	.word	0x08003a11
 8003500:	08003a3d 	.word	0x08003a3d
 8003504:	20000130 	.word	0x20000130
 8003508:	20000198 	.word	0x20000198
 800350c:	20000200 	.word	0x20000200

08003510 <stdio_exit_handler>:
 8003510:	b510      	push	{r4, lr}
 8003512:	4a03      	ldr	r2, [pc, #12]	@ (8003520 <stdio_exit_handler+0x10>)
 8003514:	4903      	ldr	r1, [pc, #12]	@ (8003524 <stdio_exit_handler+0x14>)
 8003516:	4804      	ldr	r0, [pc, #16]	@ (8003528 <stdio_exit_handler+0x18>)
 8003518:	f000 f86c 	bl	80035f4 <_fwalk_sglue>
 800351c:	bd10      	pop	{r4, pc}
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	2000000c 	.word	0x2000000c
 8003524:	08003939 	.word	0x08003939
 8003528:	2000001c 	.word	0x2000001c

0800352c <cleanup_stdio>:
 800352c:	6841      	ldr	r1, [r0, #4]
 800352e:	4b0b      	ldr	r3, [pc, #44]	@ (800355c <cleanup_stdio+0x30>)
 8003530:	b510      	push	{r4, lr}
 8003532:	0004      	movs	r4, r0
 8003534:	4299      	cmp	r1, r3
 8003536:	d001      	beq.n	800353c <cleanup_stdio+0x10>
 8003538:	f000 f9fe 	bl	8003938 <_fflush_r>
 800353c:	68a1      	ldr	r1, [r4, #8]
 800353e:	4b08      	ldr	r3, [pc, #32]	@ (8003560 <cleanup_stdio+0x34>)
 8003540:	4299      	cmp	r1, r3
 8003542:	d002      	beq.n	800354a <cleanup_stdio+0x1e>
 8003544:	0020      	movs	r0, r4
 8003546:	f000 f9f7 	bl	8003938 <_fflush_r>
 800354a:	68e1      	ldr	r1, [r4, #12]
 800354c:	4b05      	ldr	r3, [pc, #20]	@ (8003564 <cleanup_stdio+0x38>)
 800354e:	4299      	cmp	r1, r3
 8003550:	d002      	beq.n	8003558 <cleanup_stdio+0x2c>
 8003552:	0020      	movs	r0, r4
 8003554:	f000 f9f0 	bl	8003938 <_fflush_r>
 8003558:	bd10      	pop	{r4, pc}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	20000130 	.word	0x20000130
 8003560:	20000198 	.word	0x20000198
 8003564:	20000200 	.word	0x20000200

08003568 <global_stdio_init.part.0>:
 8003568:	b510      	push	{r4, lr}
 800356a:	4b09      	ldr	r3, [pc, #36]	@ (8003590 <global_stdio_init.part.0+0x28>)
 800356c:	4a09      	ldr	r2, [pc, #36]	@ (8003594 <global_stdio_init.part.0+0x2c>)
 800356e:	2104      	movs	r1, #4
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	4809      	ldr	r0, [pc, #36]	@ (8003598 <global_stdio_init.part.0+0x30>)
 8003574:	2200      	movs	r2, #0
 8003576:	f7ff ff95 	bl	80034a4 <std>
 800357a:	2201      	movs	r2, #1
 800357c:	2109      	movs	r1, #9
 800357e:	4807      	ldr	r0, [pc, #28]	@ (800359c <global_stdio_init.part.0+0x34>)
 8003580:	f7ff ff90 	bl	80034a4 <std>
 8003584:	2202      	movs	r2, #2
 8003586:	2112      	movs	r1, #18
 8003588:	4805      	ldr	r0, [pc, #20]	@ (80035a0 <global_stdio_init.part.0+0x38>)
 800358a:	f7ff ff8b 	bl	80034a4 <std>
 800358e:	bd10      	pop	{r4, pc}
 8003590:	20000268 	.word	0x20000268
 8003594:	08003511 	.word	0x08003511
 8003598:	20000130 	.word	0x20000130
 800359c:	20000198 	.word	0x20000198
 80035a0:	20000200 	.word	0x20000200

080035a4 <__sfp_lock_acquire>:
 80035a4:	b510      	push	{r4, lr}
 80035a6:	4802      	ldr	r0, [pc, #8]	@ (80035b0 <__sfp_lock_acquire+0xc>)
 80035a8:	f000 f873 	bl	8003692 <__retarget_lock_acquire_recursive>
 80035ac:	bd10      	pop	{r4, pc}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	2000026d 	.word	0x2000026d

080035b4 <__sfp_lock_release>:
 80035b4:	b510      	push	{r4, lr}
 80035b6:	4802      	ldr	r0, [pc, #8]	@ (80035c0 <__sfp_lock_release+0xc>)
 80035b8:	f000 f86c 	bl	8003694 <__retarget_lock_release_recursive>
 80035bc:	bd10      	pop	{r4, pc}
 80035be:	46c0      	nop			@ (mov r8, r8)
 80035c0:	2000026d 	.word	0x2000026d

080035c4 <__sinit>:
 80035c4:	b510      	push	{r4, lr}
 80035c6:	0004      	movs	r4, r0
 80035c8:	f7ff ffec 	bl	80035a4 <__sfp_lock_acquire>
 80035cc:	6a23      	ldr	r3, [r4, #32]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <__sinit+0x14>
 80035d2:	f7ff ffef 	bl	80035b4 <__sfp_lock_release>
 80035d6:	bd10      	pop	{r4, pc}
 80035d8:	4b04      	ldr	r3, [pc, #16]	@ (80035ec <__sinit+0x28>)
 80035da:	6223      	str	r3, [r4, #32]
 80035dc:	4b04      	ldr	r3, [pc, #16]	@ (80035f0 <__sinit+0x2c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f6      	bne.n	80035d2 <__sinit+0xe>
 80035e4:	f7ff ffc0 	bl	8003568 <global_stdio_init.part.0>
 80035e8:	e7f3      	b.n	80035d2 <__sinit+0xe>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	0800352d 	.word	0x0800352d
 80035f0:	20000268 	.word	0x20000268

080035f4 <_fwalk_sglue>:
 80035f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035f6:	0014      	movs	r4, r2
 80035f8:	2600      	movs	r6, #0
 80035fa:	9000      	str	r0, [sp, #0]
 80035fc:	9101      	str	r1, [sp, #4]
 80035fe:	68a5      	ldr	r5, [r4, #8]
 8003600:	6867      	ldr	r7, [r4, #4]
 8003602:	3f01      	subs	r7, #1
 8003604:	d504      	bpl.n	8003610 <_fwalk_sglue+0x1c>
 8003606:	6824      	ldr	r4, [r4, #0]
 8003608:	2c00      	cmp	r4, #0
 800360a:	d1f8      	bne.n	80035fe <_fwalk_sglue+0xa>
 800360c:	0030      	movs	r0, r6
 800360e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003610:	89ab      	ldrh	r3, [r5, #12]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d908      	bls.n	8003628 <_fwalk_sglue+0x34>
 8003616:	220e      	movs	r2, #14
 8003618:	5eab      	ldrsh	r3, [r5, r2]
 800361a:	3301      	adds	r3, #1
 800361c:	d004      	beq.n	8003628 <_fwalk_sglue+0x34>
 800361e:	0029      	movs	r1, r5
 8003620:	9800      	ldr	r0, [sp, #0]
 8003622:	9b01      	ldr	r3, [sp, #4]
 8003624:	4798      	blx	r3
 8003626:	4306      	orrs	r6, r0
 8003628:	3568      	adds	r5, #104	@ 0x68
 800362a:	e7ea      	b.n	8003602 <_fwalk_sglue+0xe>

0800362c <memset>:
 800362c:	0003      	movs	r3, r0
 800362e:	1882      	adds	r2, r0, r2
 8003630:	4293      	cmp	r3, r2
 8003632:	d100      	bne.n	8003636 <memset+0xa>
 8003634:	4770      	bx	lr
 8003636:	7019      	strb	r1, [r3, #0]
 8003638:	3301      	adds	r3, #1
 800363a:	e7f9      	b.n	8003630 <memset+0x4>

0800363c <__errno>:
 800363c:	4b01      	ldr	r3, [pc, #4]	@ (8003644 <__errno+0x8>)
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	4770      	bx	lr
 8003642:	46c0      	nop			@ (mov r8, r8)
 8003644:	20000018 	.word	0x20000018

08003648 <__libc_init_array>:
 8003648:	b570      	push	{r4, r5, r6, lr}
 800364a:	2600      	movs	r6, #0
 800364c:	4c0c      	ldr	r4, [pc, #48]	@ (8003680 <__libc_init_array+0x38>)
 800364e:	4d0d      	ldr	r5, [pc, #52]	@ (8003684 <__libc_init_array+0x3c>)
 8003650:	1b64      	subs	r4, r4, r5
 8003652:	10a4      	asrs	r4, r4, #2
 8003654:	42a6      	cmp	r6, r4
 8003656:	d109      	bne.n	800366c <__libc_init_array+0x24>
 8003658:	2600      	movs	r6, #0
 800365a:	f000 fefb 	bl	8004454 <_init>
 800365e:	4c0a      	ldr	r4, [pc, #40]	@ (8003688 <__libc_init_array+0x40>)
 8003660:	4d0a      	ldr	r5, [pc, #40]	@ (800368c <__libc_init_array+0x44>)
 8003662:	1b64      	subs	r4, r4, r5
 8003664:	10a4      	asrs	r4, r4, #2
 8003666:	42a6      	cmp	r6, r4
 8003668:	d105      	bne.n	8003676 <__libc_init_array+0x2e>
 800366a:	bd70      	pop	{r4, r5, r6, pc}
 800366c:	00b3      	lsls	r3, r6, #2
 800366e:	58eb      	ldr	r3, [r5, r3]
 8003670:	4798      	blx	r3
 8003672:	3601      	adds	r6, #1
 8003674:	e7ee      	b.n	8003654 <__libc_init_array+0xc>
 8003676:	00b3      	lsls	r3, r6, #2
 8003678:	58eb      	ldr	r3, [r5, r3]
 800367a:	4798      	blx	r3
 800367c:	3601      	adds	r6, #1
 800367e:	e7f2      	b.n	8003666 <__libc_init_array+0x1e>
 8003680:	080045dc 	.word	0x080045dc
 8003684:	080045dc 	.word	0x080045dc
 8003688:	080045e0 	.word	0x080045e0
 800368c:	080045dc 	.word	0x080045dc

08003690 <__retarget_lock_init_recursive>:
 8003690:	4770      	bx	lr

08003692 <__retarget_lock_acquire_recursive>:
 8003692:	4770      	bx	lr

08003694 <__retarget_lock_release_recursive>:
 8003694:	4770      	bx	lr
	...

08003698 <__assert_func>:
 8003698:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800369a:	0014      	movs	r4, r2
 800369c:	001a      	movs	r2, r3
 800369e:	4b09      	ldr	r3, [pc, #36]	@ (80036c4 <__assert_func+0x2c>)
 80036a0:	0005      	movs	r5, r0
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	000e      	movs	r6, r1
 80036a6:	68d8      	ldr	r0, [r3, #12]
 80036a8:	4b07      	ldr	r3, [pc, #28]	@ (80036c8 <__assert_func+0x30>)
 80036aa:	2c00      	cmp	r4, #0
 80036ac:	d101      	bne.n	80036b2 <__assert_func+0x1a>
 80036ae:	4b07      	ldr	r3, [pc, #28]	@ (80036cc <__assert_func+0x34>)
 80036b0:	001c      	movs	r4, r3
 80036b2:	4907      	ldr	r1, [pc, #28]	@ (80036d0 <__assert_func+0x38>)
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	9402      	str	r4, [sp, #8]
 80036b8:	002b      	movs	r3, r5
 80036ba:	9600      	str	r6, [sp, #0]
 80036bc:	f000 f9c4 	bl	8003a48 <fiprintf>
 80036c0:	f000 fa32 	bl	8003b28 <abort>
 80036c4:	20000018 	.word	0x20000018
 80036c8:	08004563 	.word	0x08004563
 80036cc:	0800459e 	.word	0x0800459e
 80036d0:	08004570 	.word	0x08004570

080036d4 <malloc>:
 80036d4:	b510      	push	{r4, lr}
 80036d6:	4b03      	ldr	r3, [pc, #12]	@ (80036e4 <malloc+0x10>)
 80036d8:	0001      	movs	r1, r0
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	f000 f826 	bl	800372c <_malloc_r>
 80036e0:	bd10      	pop	{r4, pc}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	20000018 	.word	0x20000018

080036e8 <sbrk_aligned>:
 80036e8:	b570      	push	{r4, r5, r6, lr}
 80036ea:	4e0f      	ldr	r6, [pc, #60]	@ (8003728 <sbrk_aligned+0x40>)
 80036ec:	000d      	movs	r5, r1
 80036ee:	6831      	ldr	r1, [r6, #0]
 80036f0:	0004      	movs	r4, r0
 80036f2:	2900      	cmp	r1, #0
 80036f4:	d102      	bne.n	80036fc <sbrk_aligned+0x14>
 80036f6:	f000 f9df 	bl	8003ab8 <_sbrk_r>
 80036fa:	6030      	str	r0, [r6, #0]
 80036fc:	0029      	movs	r1, r5
 80036fe:	0020      	movs	r0, r4
 8003700:	f000 f9da 	bl	8003ab8 <_sbrk_r>
 8003704:	1c43      	adds	r3, r0, #1
 8003706:	d103      	bne.n	8003710 <sbrk_aligned+0x28>
 8003708:	2501      	movs	r5, #1
 800370a:	426d      	negs	r5, r5
 800370c:	0028      	movs	r0, r5
 800370e:	bd70      	pop	{r4, r5, r6, pc}
 8003710:	2303      	movs	r3, #3
 8003712:	1cc5      	adds	r5, r0, #3
 8003714:	439d      	bics	r5, r3
 8003716:	42a8      	cmp	r0, r5
 8003718:	d0f8      	beq.n	800370c <sbrk_aligned+0x24>
 800371a:	1a29      	subs	r1, r5, r0
 800371c:	0020      	movs	r0, r4
 800371e:	f000 f9cb 	bl	8003ab8 <_sbrk_r>
 8003722:	3001      	adds	r0, #1
 8003724:	d1f2      	bne.n	800370c <sbrk_aligned+0x24>
 8003726:	e7ef      	b.n	8003708 <sbrk_aligned+0x20>
 8003728:	20000270 	.word	0x20000270

0800372c <_malloc_r>:
 800372c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800372e:	2203      	movs	r2, #3
 8003730:	1ccb      	adds	r3, r1, #3
 8003732:	4393      	bics	r3, r2
 8003734:	3308      	adds	r3, #8
 8003736:	0005      	movs	r5, r0
 8003738:	001f      	movs	r7, r3
 800373a:	2b0c      	cmp	r3, #12
 800373c:	d234      	bcs.n	80037a8 <_malloc_r+0x7c>
 800373e:	270c      	movs	r7, #12
 8003740:	42b9      	cmp	r1, r7
 8003742:	d833      	bhi.n	80037ac <_malloc_r+0x80>
 8003744:	0028      	movs	r0, r5
 8003746:	f000 f923 	bl	8003990 <__malloc_lock>
 800374a:	4e37      	ldr	r6, [pc, #220]	@ (8003828 <_malloc_r+0xfc>)
 800374c:	6833      	ldr	r3, [r6, #0]
 800374e:	001c      	movs	r4, r3
 8003750:	2c00      	cmp	r4, #0
 8003752:	d12f      	bne.n	80037b4 <_malloc_r+0x88>
 8003754:	0039      	movs	r1, r7
 8003756:	0028      	movs	r0, r5
 8003758:	f7ff ffc6 	bl	80036e8 <sbrk_aligned>
 800375c:	0004      	movs	r4, r0
 800375e:	1c43      	adds	r3, r0, #1
 8003760:	d15f      	bne.n	8003822 <_malloc_r+0xf6>
 8003762:	6834      	ldr	r4, [r6, #0]
 8003764:	9400      	str	r4, [sp, #0]
 8003766:	9b00      	ldr	r3, [sp, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d14a      	bne.n	8003802 <_malloc_r+0xd6>
 800376c:	2c00      	cmp	r4, #0
 800376e:	d052      	beq.n	8003816 <_malloc_r+0xea>
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	0028      	movs	r0, r5
 8003774:	18e3      	adds	r3, r4, r3
 8003776:	9900      	ldr	r1, [sp, #0]
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	f000 f99d 	bl	8003ab8 <_sbrk_r>
 800377e:	9b01      	ldr	r3, [sp, #4]
 8003780:	4283      	cmp	r3, r0
 8003782:	d148      	bne.n	8003816 <_malloc_r+0xea>
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	0028      	movs	r0, r5
 8003788:	1aff      	subs	r7, r7, r3
 800378a:	0039      	movs	r1, r7
 800378c:	f7ff ffac 	bl	80036e8 <sbrk_aligned>
 8003790:	3001      	adds	r0, #1
 8003792:	d040      	beq.n	8003816 <_malloc_r+0xea>
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	19db      	adds	r3, r3, r7
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	6833      	ldr	r3, [r6, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	2a00      	cmp	r2, #0
 80037a0:	d133      	bne.n	800380a <_malloc_r+0xde>
 80037a2:	9b00      	ldr	r3, [sp, #0]
 80037a4:	6033      	str	r3, [r6, #0]
 80037a6:	e019      	b.n	80037dc <_malloc_r+0xb0>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	dac9      	bge.n	8003740 <_malloc_r+0x14>
 80037ac:	230c      	movs	r3, #12
 80037ae:	602b      	str	r3, [r5, #0]
 80037b0:	2000      	movs	r0, #0
 80037b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037b4:	6821      	ldr	r1, [r4, #0]
 80037b6:	1bc9      	subs	r1, r1, r7
 80037b8:	d420      	bmi.n	80037fc <_malloc_r+0xd0>
 80037ba:	290b      	cmp	r1, #11
 80037bc:	d90a      	bls.n	80037d4 <_malloc_r+0xa8>
 80037be:	19e2      	adds	r2, r4, r7
 80037c0:	6027      	str	r7, [r4, #0]
 80037c2:	42a3      	cmp	r3, r4
 80037c4:	d104      	bne.n	80037d0 <_malloc_r+0xa4>
 80037c6:	6032      	str	r2, [r6, #0]
 80037c8:	6863      	ldr	r3, [r4, #4]
 80037ca:	6011      	str	r1, [r2, #0]
 80037cc:	6053      	str	r3, [r2, #4]
 80037ce:	e005      	b.n	80037dc <_malloc_r+0xb0>
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	e7f9      	b.n	80037c8 <_malloc_r+0x9c>
 80037d4:	6862      	ldr	r2, [r4, #4]
 80037d6:	42a3      	cmp	r3, r4
 80037d8:	d10e      	bne.n	80037f8 <_malloc_r+0xcc>
 80037da:	6032      	str	r2, [r6, #0]
 80037dc:	0028      	movs	r0, r5
 80037de:	f000 f8df 	bl	80039a0 <__malloc_unlock>
 80037e2:	0020      	movs	r0, r4
 80037e4:	2207      	movs	r2, #7
 80037e6:	300b      	adds	r0, #11
 80037e8:	1d23      	adds	r3, r4, #4
 80037ea:	4390      	bics	r0, r2
 80037ec:	1ac2      	subs	r2, r0, r3
 80037ee:	4298      	cmp	r0, r3
 80037f0:	d0df      	beq.n	80037b2 <_malloc_r+0x86>
 80037f2:	1a1b      	subs	r3, r3, r0
 80037f4:	50a3      	str	r3, [r4, r2]
 80037f6:	e7dc      	b.n	80037b2 <_malloc_r+0x86>
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	e7ef      	b.n	80037dc <_malloc_r+0xb0>
 80037fc:	0023      	movs	r3, r4
 80037fe:	6864      	ldr	r4, [r4, #4]
 8003800:	e7a6      	b.n	8003750 <_malloc_r+0x24>
 8003802:	9c00      	ldr	r4, [sp, #0]
 8003804:	6863      	ldr	r3, [r4, #4]
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	e7ad      	b.n	8003766 <_malloc_r+0x3a>
 800380a:	001a      	movs	r2, r3
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	42a3      	cmp	r3, r4
 8003810:	d1fb      	bne.n	800380a <_malloc_r+0xde>
 8003812:	2300      	movs	r3, #0
 8003814:	e7da      	b.n	80037cc <_malloc_r+0xa0>
 8003816:	230c      	movs	r3, #12
 8003818:	0028      	movs	r0, r5
 800381a:	602b      	str	r3, [r5, #0]
 800381c:	f000 f8c0 	bl	80039a0 <__malloc_unlock>
 8003820:	e7c6      	b.n	80037b0 <_malloc_r+0x84>
 8003822:	6007      	str	r7, [r0, #0]
 8003824:	e7da      	b.n	80037dc <_malloc_r+0xb0>
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	20000274 	.word	0x20000274

0800382c <__sflush_r>:
 800382c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800382e:	220c      	movs	r2, #12
 8003830:	5e8b      	ldrsh	r3, [r1, r2]
 8003832:	0005      	movs	r5, r0
 8003834:	000c      	movs	r4, r1
 8003836:	071a      	lsls	r2, r3, #28
 8003838:	d456      	bmi.n	80038e8 <__sflush_r+0xbc>
 800383a:	684a      	ldr	r2, [r1, #4]
 800383c:	2a00      	cmp	r2, #0
 800383e:	dc02      	bgt.n	8003846 <__sflush_r+0x1a>
 8003840:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003842:	2a00      	cmp	r2, #0
 8003844:	dd4e      	ble.n	80038e4 <__sflush_r+0xb8>
 8003846:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003848:	2f00      	cmp	r7, #0
 800384a:	d04b      	beq.n	80038e4 <__sflush_r+0xb8>
 800384c:	2200      	movs	r2, #0
 800384e:	2080      	movs	r0, #128	@ 0x80
 8003850:	682e      	ldr	r6, [r5, #0]
 8003852:	602a      	str	r2, [r5, #0]
 8003854:	001a      	movs	r2, r3
 8003856:	0140      	lsls	r0, r0, #5
 8003858:	6a21      	ldr	r1, [r4, #32]
 800385a:	4002      	ands	r2, r0
 800385c:	4203      	tst	r3, r0
 800385e:	d033      	beq.n	80038c8 <__sflush_r+0x9c>
 8003860:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003862:	89a3      	ldrh	r3, [r4, #12]
 8003864:	075b      	lsls	r3, r3, #29
 8003866:	d506      	bpl.n	8003876 <__sflush_r+0x4a>
 8003868:	6863      	ldr	r3, [r4, #4]
 800386a:	1ad2      	subs	r2, r2, r3
 800386c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <__sflush_r+0x4a>
 8003872:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003874:	1ad2      	subs	r2, r2, r3
 8003876:	2300      	movs	r3, #0
 8003878:	0028      	movs	r0, r5
 800387a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800387c:	6a21      	ldr	r1, [r4, #32]
 800387e:	47b8      	blx	r7
 8003880:	89a2      	ldrh	r2, [r4, #12]
 8003882:	1c43      	adds	r3, r0, #1
 8003884:	d106      	bne.n	8003894 <__sflush_r+0x68>
 8003886:	6829      	ldr	r1, [r5, #0]
 8003888:	291d      	cmp	r1, #29
 800388a:	d846      	bhi.n	800391a <__sflush_r+0xee>
 800388c:	4b29      	ldr	r3, [pc, #164]	@ (8003934 <__sflush_r+0x108>)
 800388e:	40cb      	lsrs	r3, r1
 8003890:	07db      	lsls	r3, r3, #31
 8003892:	d542      	bpl.n	800391a <__sflush_r+0xee>
 8003894:	2300      	movs	r3, #0
 8003896:	6063      	str	r3, [r4, #4]
 8003898:	6923      	ldr	r3, [r4, #16]
 800389a:	6023      	str	r3, [r4, #0]
 800389c:	04d2      	lsls	r2, r2, #19
 800389e:	d505      	bpl.n	80038ac <__sflush_r+0x80>
 80038a0:	1c43      	adds	r3, r0, #1
 80038a2:	d102      	bne.n	80038aa <__sflush_r+0x7e>
 80038a4:	682b      	ldr	r3, [r5, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d100      	bne.n	80038ac <__sflush_r+0x80>
 80038aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80038ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038ae:	602e      	str	r6, [r5, #0]
 80038b0:	2900      	cmp	r1, #0
 80038b2:	d017      	beq.n	80038e4 <__sflush_r+0xb8>
 80038b4:	0023      	movs	r3, r4
 80038b6:	3344      	adds	r3, #68	@ 0x44
 80038b8:	4299      	cmp	r1, r3
 80038ba:	d002      	beq.n	80038c2 <__sflush_r+0x96>
 80038bc:	0028      	movs	r0, r5
 80038be:	f000 f93b 	bl	8003b38 <_free_r>
 80038c2:	2300      	movs	r3, #0
 80038c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80038c6:	e00d      	b.n	80038e4 <__sflush_r+0xb8>
 80038c8:	2301      	movs	r3, #1
 80038ca:	0028      	movs	r0, r5
 80038cc:	47b8      	blx	r7
 80038ce:	0002      	movs	r2, r0
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d1c6      	bne.n	8003862 <__sflush_r+0x36>
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0c3      	beq.n	8003862 <__sflush_r+0x36>
 80038da:	2b1d      	cmp	r3, #29
 80038dc:	d001      	beq.n	80038e2 <__sflush_r+0xb6>
 80038de:	2b16      	cmp	r3, #22
 80038e0:	d11a      	bne.n	8003918 <__sflush_r+0xec>
 80038e2:	602e      	str	r6, [r5, #0]
 80038e4:	2000      	movs	r0, #0
 80038e6:	e01e      	b.n	8003926 <__sflush_r+0xfa>
 80038e8:	690e      	ldr	r6, [r1, #16]
 80038ea:	2e00      	cmp	r6, #0
 80038ec:	d0fa      	beq.n	80038e4 <__sflush_r+0xb8>
 80038ee:	680f      	ldr	r7, [r1, #0]
 80038f0:	600e      	str	r6, [r1, #0]
 80038f2:	1bba      	subs	r2, r7, r6
 80038f4:	9201      	str	r2, [sp, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	079b      	lsls	r3, r3, #30
 80038fa:	d100      	bne.n	80038fe <__sflush_r+0xd2>
 80038fc:	694a      	ldr	r2, [r1, #20]
 80038fe:	60a2      	str	r2, [r4, #8]
 8003900:	9b01      	ldr	r3, [sp, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	ddee      	ble.n	80038e4 <__sflush_r+0xb8>
 8003906:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003908:	0032      	movs	r2, r6
 800390a:	001f      	movs	r7, r3
 800390c:	0028      	movs	r0, r5
 800390e:	9b01      	ldr	r3, [sp, #4]
 8003910:	6a21      	ldr	r1, [r4, #32]
 8003912:	47b8      	blx	r7
 8003914:	2800      	cmp	r0, #0
 8003916:	dc07      	bgt.n	8003928 <__sflush_r+0xfc>
 8003918:	89a2      	ldrh	r2, [r4, #12]
 800391a:	2340      	movs	r3, #64	@ 0x40
 800391c:	2001      	movs	r0, #1
 800391e:	4313      	orrs	r3, r2
 8003920:	b21b      	sxth	r3, r3
 8003922:	81a3      	strh	r3, [r4, #12]
 8003924:	4240      	negs	r0, r0
 8003926:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003928:	9b01      	ldr	r3, [sp, #4]
 800392a:	1836      	adds	r6, r6, r0
 800392c:	1a1b      	subs	r3, r3, r0
 800392e:	9301      	str	r3, [sp, #4]
 8003930:	e7e6      	b.n	8003900 <__sflush_r+0xd4>
 8003932:	46c0      	nop			@ (mov r8, r8)
 8003934:	20400001 	.word	0x20400001

08003938 <_fflush_r>:
 8003938:	690b      	ldr	r3, [r1, #16]
 800393a:	b570      	push	{r4, r5, r6, lr}
 800393c:	0005      	movs	r5, r0
 800393e:	000c      	movs	r4, r1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <_fflush_r+0x12>
 8003944:	2500      	movs	r5, #0
 8003946:	0028      	movs	r0, r5
 8003948:	bd70      	pop	{r4, r5, r6, pc}
 800394a:	2800      	cmp	r0, #0
 800394c:	d004      	beq.n	8003958 <_fflush_r+0x20>
 800394e:	6a03      	ldr	r3, [r0, #32]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <_fflush_r+0x20>
 8003954:	f7ff fe36 	bl	80035c4 <__sinit>
 8003958:	220c      	movs	r2, #12
 800395a:	5ea3      	ldrsh	r3, [r4, r2]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f1      	beq.n	8003944 <_fflush_r+0xc>
 8003960:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003962:	07d2      	lsls	r2, r2, #31
 8003964:	d404      	bmi.n	8003970 <_fflush_r+0x38>
 8003966:	059b      	lsls	r3, r3, #22
 8003968:	d402      	bmi.n	8003970 <_fflush_r+0x38>
 800396a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800396c:	f7ff fe91 	bl	8003692 <__retarget_lock_acquire_recursive>
 8003970:	0028      	movs	r0, r5
 8003972:	0021      	movs	r1, r4
 8003974:	f7ff ff5a 	bl	800382c <__sflush_r>
 8003978:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800397a:	0005      	movs	r5, r0
 800397c:	07db      	lsls	r3, r3, #31
 800397e:	d4e2      	bmi.n	8003946 <_fflush_r+0xe>
 8003980:	89a3      	ldrh	r3, [r4, #12]
 8003982:	059b      	lsls	r3, r3, #22
 8003984:	d4df      	bmi.n	8003946 <_fflush_r+0xe>
 8003986:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003988:	f7ff fe84 	bl	8003694 <__retarget_lock_release_recursive>
 800398c:	e7db      	b.n	8003946 <_fflush_r+0xe>
	...

08003990 <__malloc_lock>:
 8003990:	b510      	push	{r4, lr}
 8003992:	4802      	ldr	r0, [pc, #8]	@ (800399c <__malloc_lock+0xc>)
 8003994:	f7ff fe7d 	bl	8003692 <__retarget_lock_acquire_recursive>
 8003998:	bd10      	pop	{r4, pc}
 800399a:	46c0      	nop			@ (mov r8, r8)
 800399c:	2000026c 	.word	0x2000026c

080039a0 <__malloc_unlock>:
 80039a0:	b510      	push	{r4, lr}
 80039a2:	4802      	ldr	r0, [pc, #8]	@ (80039ac <__malloc_unlock+0xc>)
 80039a4:	f7ff fe76 	bl	8003694 <__retarget_lock_release_recursive>
 80039a8:	bd10      	pop	{r4, pc}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	2000026c 	.word	0x2000026c

080039b0 <__sread>:
 80039b0:	b570      	push	{r4, r5, r6, lr}
 80039b2:	000c      	movs	r4, r1
 80039b4:	250e      	movs	r5, #14
 80039b6:	5f49      	ldrsh	r1, [r1, r5]
 80039b8:	f000 f86a 	bl	8003a90 <_read_r>
 80039bc:	2800      	cmp	r0, #0
 80039be:	db03      	blt.n	80039c8 <__sread+0x18>
 80039c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039c2:	181b      	adds	r3, r3, r0
 80039c4:	6563      	str	r3, [r4, #84]	@ 0x54
 80039c6:	bd70      	pop	{r4, r5, r6, pc}
 80039c8:	89a3      	ldrh	r3, [r4, #12]
 80039ca:	4a02      	ldr	r2, [pc, #8]	@ (80039d4 <__sread+0x24>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	81a3      	strh	r3, [r4, #12]
 80039d0:	e7f9      	b.n	80039c6 <__sread+0x16>
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	ffffefff 	.word	0xffffefff

080039d8 <__swrite>:
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	001f      	movs	r7, r3
 80039dc:	898b      	ldrh	r3, [r1, #12]
 80039de:	0005      	movs	r5, r0
 80039e0:	000c      	movs	r4, r1
 80039e2:	0016      	movs	r6, r2
 80039e4:	05db      	lsls	r3, r3, #23
 80039e6:	d505      	bpl.n	80039f4 <__swrite+0x1c>
 80039e8:	230e      	movs	r3, #14
 80039ea:	5ec9      	ldrsh	r1, [r1, r3]
 80039ec:	2200      	movs	r2, #0
 80039ee:	2302      	movs	r3, #2
 80039f0:	f000 f83a 	bl	8003a68 <_lseek_r>
 80039f4:	89a3      	ldrh	r3, [r4, #12]
 80039f6:	4a05      	ldr	r2, [pc, #20]	@ (8003a0c <__swrite+0x34>)
 80039f8:	0028      	movs	r0, r5
 80039fa:	4013      	ands	r3, r2
 80039fc:	81a3      	strh	r3, [r4, #12]
 80039fe:	0032      	movs	r2, r6
 8003a00:	230e      	movs	r3, #14
 8003a02:	5ee1      	ldrsh	r1, [r4, r3]
 8003a04:	003b      	movs	r3, r7
 8003a06:	f000 f869 	bl	8003adc <_write_r>
 8003a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a0c:	ffffefff 	.word	0xffffefff

08003a10 <__sseek>:
 8003a10:	b570      	push	{r4, r5, r6, lr}
 8003a12:	000c      	movs	r4, r1
 8003a14:	250e      	movs	r5, #14
 8003a16:	5f49      	ldrsh	r1, [r1, r5]
 8003a18:	f000 f826 	bl	8003a68 <_lseek_r>
 8003a1c:	89a3      	ldrh	r3, [r4, #12]
 8003a1e:	1c42      	adds	r2, r0, #1
 8003a20:	d103      	bne.n	8003a2a <__sseek+0x1a>
 8003a22:	4a05      	ldr	r2, [pc, #20]	@ (8003a38 <__sseek+0x28>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	81a3      	strh	r3, [r4, #12]
 8003a28:	bd70      	pop	{r4, r5, r6, pc}
 8003a2a:	2280      	movs	r2, #128	@ 0x80
 8003a2c:	0152      	lsls	r2, r2, #5
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	81a3      	strh	r3, [r4, #12]
 8003a32:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a34:	e7f8      	b.n	8003a28 <__sseek+0x18>
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	ffffefff 	.word	0xffffefff

08003a3c <__sclose>:
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	230e      	movs	r3, #14
 8003a40:	5ec9      	ldrsh	r1, [r1, r3]
 8003a42:	f000 f85f 	bl	8003b04 <_close_r>
 8003a46:	bd10      	pop	{r4, pc}

08003a48 <fiprintf>:
 8003a48:	b40e      	push	{r1, r2, r3}
 8003a4a:	b517      	push	{r0, r1, r2, r4, lr}
 8003a4c:	4c05      	ldr	r4, [pc, #20]	@ (8003a64 <fiprintf+0x1c>)
 8003a4e:	ab05      	add	r3, sp, #20
 8003a50:	cb04      	ldmia	r3!, {r2}
 8003a52:	0001      	movs	r1, r0
 8003a54:	6820      	ldr	r0, [r4, #0]
 8003a56:	9301      	str	r3, [sp, #4]
 8003a58:	f000 f8e0 	bl	8003c1c <_vfiprintf_r>
 8003a5c:	bc1e      	pop	{r1, r2, r3, r4}
 8003a5e:	bc08      	pop	{r3}
 8003a60:	b003      	add	sp, #12
 8003a62:	4718      	bx	r3
 8003a64:	20000018 	.word	0x20000018

08003a68 <_lseek_r>:
 8003a68:	b570      	push	{r4, r5, r6, lr}
 8003a6a:	0004      	movs	r4, r0
 8003a6c:	0008      	movs	r0, r1
 8003a6e:	0011      	movs	r1, r2
 8003a70:	001a      	movs	r2, r3
 8003a72:	2300      	movs	r3, #0
 8003a74:	4d05      	ldr	r5, [pc, #20]	@ (8003a8c <_lseek_r+0x24>)
 8003a76:	602b      	str	r3, [r5, #0]
 8003a78:	f7fd fc41 	bl	80012fe <_lseek>
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	d103      	bne.n	8003a88 <_lseek_r+0x20>
 8003a80:	682b      	ldr	r3, [r5, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d000      	beq.n	8003a88 <_lseek_r+0x20>
 8003a86:	6023      	str	r3, [r4, #0]
 8003a88:	bd70      	pop	{r4, r5, r6, pc}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	20000278 	.word	0x20000278

08003a90 <_read_r>:
 8003a90:	b570      	push	{r4, r5, r6, lr}
 8003a92:	0004      	movs	r4, r0
 8003a94:	0008      	movs	r0, r1
 8003a96:	0011      	movs	r1, r2
 8003a98:	001a      	movs	r2, r3
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	4d05      	ldr	r5, [pc, #20]	@ (8003ab4 <_read_r+0x24>)
 8003a9e:	602b      	str	r3, [r5, #0]
 8003aa0:	f7fd fbd3 	bl	800124a <_read>
 8003aa4:	1c43      	adds	r3, r0, #1
 8003aa6:	d103      	bne.n	8003ab0 <_read_r+0x20>
 8003aa8:	682b      	ldr	r3, [r5, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d000      	beq.n	8003ab0 <_read_r+0x20>
 8003aae:	6023      	str	r3, [r4, #0]
 8003ab0:	bd70      	pop	{r4, r5, r6, pc}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	20000278 	.word	0x20000278

08003ab8 <_sbrk_r>:
 8003ab8:	2300      	movs	r3, #0
 8003aba:	b570      	push	{r4, r5, r6, lr}
 8003abc:	4d06      	ldr	r5, [pc, #24]	@ (8003ad8 <_sbrk_r+0x20>)
 8003abe:	0004      	movs	r4, r0
 8003ac0:	0008      	movs	r0, r1
 8003ac2:	602b      	str	r3, [r5, #0]
 8003ac4:	f7fd fc26 	bl	8001314 <_sbrk>
 8003ac8:	1c43      	adds	r3, r0, #1
 8003aca:	d103      	bne.n	8003ad4 <_sbrk_r+0x1c>
 8003acc:	682b      	ldr	r3, [r5, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d000      	beq.n	8003ad4 <_sbrk_r+0x1c>
 8003ad2:	6023      	str	r3, [r4, #0]
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	20000278 	.word	0x20000278

08003adc <_write_r>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	0004      	movs	r4, r0
 8003ae0:	0008      	movs	r0, r1
 8003ae2:	0011      	movs	r1, r2
 8003ae4:	001a      	movs	r2, r3
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	4d05      	ldr	r5, [pc, #20]	@ (8003b00 <_write_r+0x24>)
 8003aea:	602b      	str	r3, [r5, #0]
 8003aec:	f7fd fbca 	bl	8001284 <_write>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d103      	bne.n	8003afc <_write_r+0x20>
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d000      	beq.n	8003afc <_write_r+0x20>
 8003afa:	6023      	str	r3, [r4, #0]
 8003afc:	bd70      	pop	{r4, r5, r6, pc}
 8003afe:	46c0      	nop			@ (mov r8, r8)
 8003b00:	20000278 	.word	0x20000278

08003b04 <_close_r>:
 8003b04:	2300      	movs	r3, #0
 8003b06:	b570      	push	{r4, r5, r6, lr}
 8003b08:	4d06      	ldr	r5, [pc, #24]	@ (8003b24 <_close_r+0x20>)
 8003b0a:	0004      	movs	r4, r0
 8003b0c:	0008      	movs	r0, r1
 8003b0e:	602b      	str	r3, [r5, #0]
 8003b10:	f7fd fbd4 	bl	80012bc <_close>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d103      	bne.n	8003b20 <_close_r+0x1c>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d000      	beq.n	8003b20 <_close_r+0x1c>
 8003b1e:	6023      	str	r3, [r4, #0]
 8003b20:	bd70      	pop	{r4, r5, r6, pc}
 8003b22:	46c0      	nop			@ (mov r8, r8)
 8003b24:	20000278 	.word	0x20000278

08003b28 <abort>:
 8003b28:	2006      	movs	r0, #6
 8003b2a:	b510      	push	{r4, lr}
 8003b2c:	f000 fc42 	bl	80043b4 <raise>
 8003b30:	2001      	movs	r0, #1
 8003b32:	f7fd fb7d 	bl	8001230 <_exit>
	...

08003b38 <_free_r>:
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	0005      	movs	r5, r0
 8003b3c:	1e0c      	subs	r4, r1, #0
 8003b3e:	d010      	beq.n	8003b62 <_free_r+0x2a>
 8003b40:	3c04      	subs	r4, #4
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	da00      	bge.n	8003b4a <_free_r+0x12>
 8003b48:	18e4      	adds	r4, r4, r3
 8003b4a:	0028      	movs	r0, r5
 8003b4c:	f7ff ff20 	bl	8003990 <__malloc_lock>
 8003b50:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc8 <_free_r+0x90>)
 8003b52:	6813      	ldr	r3, [r2, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d105      	bne.n	8003b64 <_free_r+0x2c>
 8003b58:	6063      	str	r3, [r4, #4]
 8003b5a:	6014      	str	r4, [r2, #0]
 8003b5c:	0028      	movs	r0, r5
 8003b5e:	f7ff ff1f 	bl	80039a0 <__malloc_unlock>
 8003b62:	bd70      	pop	{r4, r5, r6, pc}
 8003b64:	42a3      	cmp	r3, r4
 8003b66:	d908      	bls.n	8003b7a <_free_r+0x42>
 8003b68:	6820      	ldr	r0, [r4, #0]
 8003b6a:	1821      	adds	r1, r4, r0
 8003b6c:	428b      	cmp	r3, r1
 8003b6e:	d1f3      	bne.n	8003b58 <_free_r+0x20>
 8003b70:	6819      	ldr	r1, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	1809      	adds	r1, r1, r0
 8003b76:	6021      	str	r1, [r4, #0]
 8003b78:	e7ee      	b.n	8003b58 <_free_r+0x20>
 8003b7a:	001a      	movs	r2, r3
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <_free_r+0x4e>
 8003b82:	42a3      	cmp	r3, r4
 8003b84:	d9f9      	bls.n	8003b7a <_free_r+0x42>
 8003b86:	6811      	ldr	r1, [r2, #0]
 8003b88:	1850      	adds	r0, r2, r1
 8003b8a:	42a0      	cmp	r0, r4
 8003b8c:	d10b      	bne.n	8003ba6 <_free_r+0x6e>
 8003b8e:	6820      	ldr	r0, [r4, #0]
 8003b90:	1809      	adds	r1, r1, r0
 8003b92:	1850      	adds	r0, r2, r1
 8003b94:	6011      	str	r1, [r2, #0]
 8003b96:	4283      	cmp	r3, r0
 8003b98:	d1e0      	bne.n	8003b5c <_free_r+0x24>
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	1841      	adds	r1, r0, r1
 8003ba0:	6011      	str	r1, [r2, #0]
 8003ba2:	6053      	str	r3, [r2, #4]
 8003ba4:	e7da      	b.n	8003b5c <_free_r+0x24>
 8003ba6:	42a0      	cmp	r0, r4
 8003ba8:	d902      	bls.n	8003bb0 <_free_r+0x78>
 8003baa:	230c      	movs	r3, #12
 8003bac:	602b      	str	r3, [r5, #0]
 8003bae:	e7d5      	b.n	8003b5c <_free_r+0x24>
 8003bb0:	6820      	ldr	r0, [r4, #0]
 8003bb2:	1821      	adds	r1, r4, r0
 8003bb4:	428b      	cmp	r3, r1
 8003bb6:	d103      	bne.n	8003bc0 <_free_r+0x88>
 8003bb8:	6819      	ldr	r1, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	1809      	adds	r1, r1, r0
 8003bbe:	6021      	str	r1, [r4, #0]
 8003bc0:	6063      	str	r3, [r4, #4]
 8003bc2:	6054      	str	r4, [r2, #4]
 8003bc4:	e7ca      	b.n	8003b5c <_free_r+0x24>
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	20000274 	.word	0x20000274

08003bcc <__sfputc_r>:
 8003bcc:	6893      	ldr	r3, [r2, #8]
 8003bce:	b510      	push	{r4, lr}
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	6093      	str	r3, [r2, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	da04      	bge.n	8003be2 <__sfputc_r+0x16>
 8003bd8:	6994      	ldr	r4, [r2, #24]
 8003bda:	42a3      	cmp	r3, r4
 8003bdc:	db07      	blt.n	8003bee <__sfputc_r+0x22>
 8003bde:	290a      	cmp	r1, #10
 8003be0:	d005      	beq.n	8003bee <__sfputc_r+0x22>
 8003be2:	6813      	ldr	r3, [r2, #0]
 8003be4:	1c58      	adds	r0, r3, #1
 8003be6:	6010      	str	r0, [r2, #0]
 8003be8:	7019      	strb	r1, [r3, #0]
 8003bea:	0008      	movs	r0, r1
 8003bec:	bd10      	pop	{r4, pc}
 8003bee:	f000 faad 	bl	800414c <__swbuf_r>
 8003bf2:	0001      	movs	r1, r0
 8003bf4:	e7f9      	b.n	8003bea <__sfputc_r+0x1e>

08003bf6 <__sfputs_r>:
 8003bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf8:	0006      	movs	r6, r0
 8003bfa:	000f      	movs	r7, r1
 8003bfc:	0014      	movs	r4, r2
 8003bfe:	18d5      	adds	r5, r2, r3
 8003c00:	42ac      	cmp	r4, r5
 8003c02:	d101      	bne.n	8003c08 <__sfputs_r+0x12>
 8003c04:	2000      	movs	r0, #0
 8003c06:	e007      	b.n	8003c18 <__sfputs_r+0x22>
 8003c08:	7821      	ldrb	r1, [r4, #0]
 8003c0a:	003a      	movs	r2, r7
 8003c0c:	0030      	movs	r0, r6
 8003c0e:	f7ff ffdd 	bl	8003bcc <__sfputc_r>
 8003c12:	3401      	adds	r4, #1
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	d1f3      	bne.n	8003c00 <__sfputs_r+0xa>
 8003c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c1c <_vfiprintf_r>:
 8003c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c1e:	b0a1      	sub	sp, #132	@ 0x84
 8003c20:	000f      	movs	r7, r1
 8003c22:	0015      	movs	r5, r2
 8003c24:	001e      	movs	r6, r3
 8003c26:	9003      	str	r0, [sp, #12]
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d004      	beq.n	8003c36 <_vfiprintf_r+0x1a>
 8003c2c:	6a03      	ldr	r3, [r0, #32]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <_vfiprintf_r+0x1a>
 8003c32:	f7ff fcc7 	bl	80035c4 <__sinit>
 8003c36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c38:	07db      	lsls	r3, r3, #31
 8003c3a:	d405      	bmi.n	8003c48 <_vfiprintf_r+0x2c>
 8003c3c:	89bb      	ldrh	r3, [r7, #12]
 8003c3e:	059b      	lsls	r3, r3, #22
 8003c40:	d402      	bmi.n	8003c48 <_vfiprintf_r+0x2c>
 8003c42:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003c44:	f7ff fd25 	bl	8003692 <__retarget_lock_acquire_recursive>
 8003c48:	89bb      	ldrh	r3, [r7, #12]
 8003c4a:	071b      	lsls	r3, r3, #28
 8003c4c:	d502      	bpl.n	8003c54 <_vfiprintf_r+0x38>
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d113      	bne.n	8003c7c <_vfiprintf_r+0x60>
 8003c54:	0039      	movs	r1, r7
 8003c56:	9803      	ldr	r0, [sp, #12]
 8003c58:	f000 faba 	bl	80041d0 <__swsetup_r>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d00d      	beq.n	8003c7c <_vfiprintf_r+0x60>
 8003c60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c62:	07db      	lsls	r3, r3, #31
 8003c64:	d503      	bpl.n	8003c6e <_vfiprintf_r+0x52>
 8003c66:	2001      	movs	r0, #1
 8003c68:	4240      	negs	r0, r0
 8003c6a:	b021      	add	sp, #132	@ 0x84
 8003c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c6e:	89bb      	ldrh	r3, [r7, #12]
 8003c70:	059b      	lsls	r3, r3, #22
 8003c72:	d4f8      	bmi.n	8003c66 <_vfiprintf_r+0x4a>
 8003c74:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003c76:	f7ff fd0d 	bl	8003694 <__retarget_lock_release_recursive>
 8003c7a:	e7f4      	b.n	8003c66 <_vfiprintf_r+0x4a>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	ac08      	add	r4, sp, #32
 8003c80:	6163      	str	r3, [r4, #20]
 8003c82:	3320      	adds	r3, #32
 8003c84:	7663      	strb	r3, [r4, #25]
 8003c86:	3310      	adds	r3, #16
 8003c88:	76a3      	strb	r3, [r4, #26]
 8003c8a:	9607      	str	r6, [sp, #28]
 8003c8c:	002e      	movs	r6, r5
 8003c8e:	7833      	ldrb	r3, [r6, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <_vfiprintf_r+0x7c>
 8003c94:	2b25      	cmp	r3, #37	@ 0x25
 8003c96:	d148      	bne.n	8003d2a <_vfiprintf_r+0x10e>
 8003c98:	1b73      	subs	r3, r6, r5
 8003c9a:	9305      	str	r3, [sp, #20]
 8003c9c:	42ae      	cmp	r6, r5
 8003c9e:	d00b      	beq.n	8003cb8 <_vfiprintf_r+0x9c>
 8003ca0:	002a      	movs	r2, r5
 8003ca2:	0039      	movs	r1, r7
 8003ca4:	9803      	ldr	r0, [sp, #12]
 8003ca6:	f7ff ffa6 	bl	8003bf6 <__sfputs_r>
 8003caa:	3001      	adds	r0, #1
 8003cac:	d100      	bne.n	8003cb0 <_vfiprintf_r+0x94>
 8003cae:	e0ae      	b.n	8003e0e <_vfiprintf_r+0x1f2>
 8003cb0:	6963      	ldr	r3, [r4, #20]
 8003cb2:	9a05      	ldr	r2, [sp, #20]
 8003cb4:	189b      	adds	r3, r3, r2
 8003cb6:	6163      	str	r3, [r4, #20]
 8003cb8:	7833      	ldrb	r3, [r6, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d100      	bne.n	8003cc0 <_vfiprintf_r+0xa4>
 8003cbe:	e0a6      	b.n	8003e0e <_vfiprintf_r+0x1f2>
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	4252      	negs	r2, r2
 8003cc6:	6062      	str	r2, [r4, #4]
 8003cc8:	a904      	add	r1, sp, #16
 8003cca:	3254      	adds	r2, #84	@ 0x54
 8003ccc:	1852      	adds	r2, r2, r1
 8003cce:	1c75      	adds	r5, r6, #1
 8003cd0:	6023      	str	r3, [r4, #0]
 8003cd2:	60e3      	str	r3, [r4, #12]
 8003cd4:	60a3      	str	r3, [r4, #8]
 8003cd6:	7013      	strb	r3, [r2, #0]
 8003cd8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003cda:	4b59      	ldr	r3, [pc, #356]	@ (8003e40 <_vfiprintf_r+0x224>)
 8003cdc:	2205      	movs	r2, #5
 8003cde:	0018      	movs	r0, r3
 8003ce0:	7829      	ldrb	r1, [r5, #0]
 8003ce2:	9305      	str	r3, [sp, #20]
 8003ce4:	f000 fbaa 	bl	800443c <memchr>
 8003ce8:	1c6e      	adds	r6, r5, #1
 8003cea:	2800      	cmp	r0, #0
 8003cec:	d11f      	bne.n	8003d2e <_vfiprintf_r+0x112>
 8003cee:	6822      	ldr	r2, [r4, #0]
 8003cf0:	06d3      	lsls	r3, r2, #27
 8003cf2:	d504      	bpl.n	8003cfe <_vfiprintf_r+0xe2>
 8003cf4:	2353      	movs	r3, #83	@ 0x53
 8003cf6:	a904      	add	r1, sp, #16
 8003cf8:	185b      	adds	r3, r3, r1
 8003cfa:	2120      	movs	r1, #32
 8003cfc:	7019      	strb	r1, [r3, #0]
 8003cfe:	0713      	lsls	r3, r2, #28
 8003d00:	d504      	bpl.n	8003d0c <_vfiprintf_r+0xf0>
 8003d02:	2353      	movs	r3, #83	@ 0x53
 8003d04:	a904      	add	r1, sp, #16
 8003d06:	185b      	adds	r3, r3, r1
 8003d08:	212b      	movs	r1, #43	@ 0x2b
 8003d0a:	7019      	strb	r1, [r3, #0]
 8003d0c:	782b      	ldrb	r3, [r5, #0]
 8003d0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d10:	d016      	beq.n	8003d40 <_vfiprintf_r+0x124>
 8003d12:	002e      	movs	r6, r5
 8003d14:	2100      	movs	r1, #0
 8003d16:	200a      	movs	r0, #10
 8003d18:	68e3      	ldr	r3, [r4, #12]
 8003d1a:	7832      	ldrb	r2, [r6, #0]
 8003d1c:	1c75      	adds	r5, r6, #1
 8003d1e:	3a30      	subs	r2, #48	@ 0x30
 8003d20:	2a09      	cmp	r2, #9
 8003d22:	d950      	bls.n	8003dc6 <_vfiprintf_r+0x1aa>
 8003d24:	2900      	cmp	r1, #0
 8003d26:	d111      	bne.n	8003d4c <_vfiprintf_r+0x130>
 8003d28:	e017      	b.n	8003d5a <_vfiprintf_r+0x13e>
 8003d2a:	3601      	adds	r6, #1
 8003d2c:	e7af      	b.n	8003c8e <_vfiprintf_r+0x72>
 8003d2e:	9b05      	ldr	r3, [sp, #20]
 8003d30:	6822      	ldr	r2, [r4, #0]
 8003d32:	1ac0      	subs	r0, r0, r3
 8003d34:	2301      	movs	r3, #1
 8003d36:	4083      	lsls	r3, r0
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	0035      	movs	r5, r6
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	e7cc      	b.n	8003cda <_vfiprintf_r+0xbe>
 8003d40:	9b07      	ldr	r3, [sp, #28]
 8003d42:	1d19      	adds	r1, r3, #4
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	9107      	str	r1, [sp, #28]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	db01      	blt.n	8003d50 <_vfiprintf_r+0x134>
 8003d4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d4e:	e004      	b.n	8003d5a <_vfiprintf_r+0x13e>
 8003d50:	425b      	negs	r3, r3
 8003d52:	60e3      	str	r3, [r4, #12]
 8003d54:	2302      	movs	r3, #2
 8003d56:	4313      	orrs	r3, r2
 8003d58:	6023      	str	r3, [r4, #0]
 8003d5a:	7833      	ldrb	r3, [r6, #0]
 8003d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d5e:	d10c      	bne.n	8003d7a <_vfiprintf_r+0x15e>
 8003d60:	7873      	ldrb	r3, [r6, #1]
 8003d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d64:	d134      	bne.n	8003dd0 <_vfiprintf_r+0x1b4>
 8003d66:	9b07      	ldr	r3, [sp, #28]
 8003d68:	3602      	adds	r6, #2
 8003d6a:	1d1a      	adds	r2, r3, #4
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	9207      	str	r2, [sp, #28]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	da01      	bge.n	8003d78 <_vfiprintf_r+0x15c>
 8003d74:	2301      	movs	r3, #1
 8003d76:	425b      	negs	r3, r3
 8003d78:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d7a:	4d32      	ldr	r5, [pc, #200]	@ (8003e44 <_vfiprintf_r+0x228>)
 8003d7c:	2203      	movs	r2, #3
 8003d7e:	0028      	movs	r0, r5
 8003d80:	7831      	ldrb	r1, [r6, #0]
 8003d82:	f000 fb5b 	bl	800443c <memchr>
 8003d86:	2800      	cmp	r0, #0
 8003d88:	d006      	beq.n	8003d98 <_vfiprintf_r+0x17c>
 8003d8a:	2340      	movs	r3, #64	@ 0x40
 8003d8c:	1b40      	subs	r0, r0, r5
 8003d8e:	4083      	lsls	r3, r0
 8003d90:	6822      	ldr	r2, [r4, #0]
 8003d92:	3601      	adds	r6, #1
 8003d94:	4313      	orrs	r3, r2
 8003d96:	6023      	str	r3, [r4, #0]
 8003d98:	7831      	ldrb	r1, [r6, #0]
 8003d9a:	2206      	movs	r2, #6
 8003d9c:	482a      	ldr	r0, [pc, #168]	@ (8003e48 <_vfiprintf_r+0x22c>)
 8003d9e:	1c75      	adds	r5, r6, #1
 8003da0:	7621      	strb	r1, [r4, #24]
 8003da2:	f000 fb4b 	bl	800443c <memchr>
 8003da6:	2800      	cmp	r0, #0
 8003da8:	d040      	beq.n	8003e2c <_vfiprintf_r+0x210>
 8003daa:	4b28      	ldr	r3, [pc, #160]	@ (8003e4c <_vfiprintf_r+0x230>)
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d122      	bne.n	8003df6 <_vfiprintf_r+0x1da>
 8003db0:	2207      	movs	r2, #7
 8003db2:	9b07      	ldr	r3, [sp, #28]
 8003db4:	3307      	adds	r3, #7
 8003db6:	4393      	bics	r3, r2
 8003db8:	3308      	adds	r3, #8
 8003dba:	9307      	str	r3, [sp, #28]
 8003dbc:	6963      	ldr	r3, [r4, #20]
 8003dbe:	9a04      	ldr	r2, [sp, #16]
 8003dc0:	189b      	adds	r3, r3, r2
 8003dc2:	6163      	str	r3, [r4, #20]
 8003dc4:	e762      	b.n	8003c8c <_vfiprintf_r+0x70>
 8003dc6:	4343      	muls	r3, r0
 8003dc8:	002e      	movs	r6, r5
 8003dca:	2101      	movs	r1, #1
 8003dcc:	189b      	adds	r3, r3, r2
 8003dce:	e7a4      	b.n	8003d1a <_vfiprintf_r+0xfe>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	200a      	movs	r0, #10
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	3601      	adds	r6, #1
 8003dd8:	6063      	str	r3, [r4, #4]
 8003dda:	7832      	ldrb	r2, [r6, #0]
 8003ddc:	1c75      	adds	r5, r6, #1
 8003dde:	3a30      	subs	r2, #48	@ 0x30
 8003de0:	2a09      	cmp	r2, #9
 8003de2:	d903      	bls.n	8003dec <_vfiprintf_r+0x1d0>
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0c8      	beq.n	8003d7a <_vfiprintf_r+0x15e>
 8003de8:	9109      	str	r1, [sp, #36]	@ 0x24
 8003dea:	e7c6      	b.n	8003d7a <_vfiprintf_r+0x15e>
 8003dec:	4341      	muls	r1, r0
 8003dee:	002e      	movs	r6, r5
 8003df0:	2301      	movs	r3, #1
 8003df2:	1889      	adds	r1, r1, r2
 8003df4:	e7f1      	b.n	8003dda <_vfiprintf_r+0x1be>
 8003df6:	aa07      	add	r2, sp, #28
 8003df8:	9200      	str	r2, [sp, #0]
 8003dfa:	0021      	movs	r1, r4
 8003dfc:	003a      	movs	r2, r7
 8003dfe:	4b14      	ldr	r3, [pc, #80]	@ (8003e50 <_vfiprintf_r+0x234>)
 8003e00:	9803      	ldr	r0, [sp, #12]
 8003e02:	e000      	b.n	8003e06 <_vfiprintf_r+0x1ea>
 8003e04:	bf00      	nop
 8003e06:	9004      	str	r0, [sp, #16]
 8003e08:	9b04      	ldr	r3, [sp, #16]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	d1d6      	bne.n	8003dbc <_vfiprintf_r+0x1a0>
 8003e0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e10:	07db      	lsls	r3, r3, #31
 8003e12:	d405      	bmi.n	8003e20 <_vfiprintf_r+0x204>
 8003e14:	89bb      	ldrh	r3, [r7, #12]
 8003e16:	059b      	lsls	r3, r3, #22
 8003e18:	d402      	bmi.n	8003e20 <_vfiprintf_r+0x204>
 8003e1a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003e1c:	f7ff fc3a 	bl	8003694 <__retarget_lock_release_recursive>
 8003e20:	89bb      	ldrh	r3, [r7, #12]
 8003e22:	065b      	lsls	r3, r3, #25
 8003e24:	d500      	bpl.n	8003e28 <_vfiprintf_r+0x20c>
 8003e26:	e71e      	b.n	8003c66 <_vfiprintf_r+0x4a>
 8003e28:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003e2a:	e71e      	b.n	8003c6a <_vfiprintf_r+0x4e>
 8003e2c:	aa07      	add	r2, sp, #28
 8003e2e:	9200      	str	r2, [sp, #0]
 8003e30:	0021      	movs	r1, r4
 8003e32:	003a      	movs	r2, r7
 8003e34:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <_vfiprintf_r+0x234>)
 8003e36:	9803      	ldr	r0, [sp, #12]
 8003e38:	f000 f87c 	bl	8003f34 <_printf_i>
 8003e3c:	e7e3      	b.n	8003e06 <_vfiprintf_r+0x1ea>
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	0800459f 	.word	0x0800459f
 8003e44:	080045a5 	.word	0x080045a5
 8003e48:	080045a9 	.word	0x080045a9
 8003e4c:	00000000 	.word	0x00000000
 8003e50:	08003bf7 	.word	0x08003bf7

08003e54 <_printf_common>:
 8003e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e56:	0016      	movs	r6, r2
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	688a      	ldr	r2, [r1, #8]
 8003e5c:	690b      	ldr	r3, [r1, #16]
 8003e5e:	000c      	movs	r4, r1
 8003e60:	9000      	str	r0, [sp, #0]
 8003e62:	4293      	cmp	r3, r2
 8003e64:	da00      	bge.n	8003e68 <_printf_common+0x14>
 8003e66:	0013      	movs	r3, r2
 8003e68:	0022      	movs	r2, r4
 8003e6a:	6033      	str	r3, [r6, #0]
 8003e6c:	3243      	adds	r2, #67	@ 0x43
 8003e6e:	7812      	ldrb	r2, [r2, #0]
 8003e70:	2a00      	cmp	r2, #0
 8003e72:	d001      	beq.n	8003e78 <_printf_common+0x24>
 8003e74:	3301      	adds	r3, #1
 8003e76:	6033      	str	r3, [r6, #0]
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	069b      	lsls	r3, r3, #26
 8003e7c:	d502      	bpl.n	8003e84 <_printf_common+0x30>
 8003e7e:	6833      	ldr	r3, [r6, #0]
 8003e80:	3302      	adds	r3, #2
 8003e82:	6033      	str	r3, [r6, #0]
 8003e84:	6822      	ldr	r2, [r4, #0]
 8003e86:	2306      	movs	r3, #6
 8003e88:	0015      	movs	r5, r2
 8003e8a:	401d      	ands	r5, r3
 8003e8c:	421a      	tst	r2, r3
 8003e8e:	d027      	beq.n	8003ee0 <_printf_common+0x8c>
 8003e90:	0023      	movs	r3, r4
 8003e92:	3343      	adds	r3, #67	@ 0x43
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	1e5a      	subs	r2, r3, #1
 8003e98:	4193      	sbcs	r3, r2
 8003e9a:	6822      	ldr	r2, [r4, #0]
 8003e9c:	0692      	lsls	r2, r2, #26
 8003e9e:	d430      	bmi.n	8003f02 <_printf_common+0xae>
 8003ea0:	0022      	movs	r2, r4
 8003ea2:	9901      	ldr	r1, [sp, #4]
 8003ea4:	9800      	ldr	r0, [sp, #0]
 8003ea6:	9d08      	ldr	r5, [sp, #32]
 8003ea8:	3243      	adds	r2, #67	@ 0x43
 8003eaa:	47a8      	blx	r5
 8003eac:	3001      	adds	r0, #1
 8003eae:	d025      	beq.n	8003efc <_printf_common+0xa8>
 8003eb0:	2206      	movs	r2, #6
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	2500      	movs	r5, #0
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d105      	bne.n	8003ec8 <_printf_common+0x74>
 8003ebc:	6833      	ldr	r3, [r6, #0]
 8003ebe:	68e5      	ldr	r5, [r4, #12]
 8003ec0:	1aed      	subs	r5, r5, r3
 8003ec2:	43eb      	mvns	r3, r5
 8003ec4:	17db      	asrs	r3, r3, #31
 8003ec6:	401d      	ands	r5, r3
 8003ec8:	68a3      	ldr	r3, [r4, #8]
 8003eca:	6922      	ldr	r2, [r4, #16]
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	dd01      	ble.n	8003ed4 <_printf_common+0x80>
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	18ed      	adds	r5, r5, r3
 8003ed4:	2600      	movs	r6, #0
 8003ed6:	42b5      	cmp	r5, r6
 8003ed8:	d120      	bne.n	8003f1c <_printf_common+0xc8>
 8003eda:	2000      	movs	r0, #0
 8003edc:	e010      	b.n	8003f00 <_printf_common+0xac>
 8003ede:	3501      	adds	r5, #1
 8003ee0:	68e3      	ldr	r3, [r4, #12]
 8003ee2:	6832      	ldr	r2, [r6, #0]
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	42ab      	cmp	r3, r5
 8003ee8:	ddd2      	ble.n	8003e90 <_printf_common+0x3c>
 8003eea:	0022      	movs	r2, r4
 8003eec:	2301      	movs	r3, #1
 8003eee:	9901      	ldr	r1, [sp, #4]
 8003ef0:	9800      	ldr	r0, [sp, #0]
 8003ef2:	9f08      	ldr	r7, [sp, #32]
 8003ef4:	3219      	adds	r2, #25
 8003ef6:	47b8      	blx	r7
 8003ef8:	3001      	adds	r0, #1
 8003efa:	d1f0      	bne.n	8003ede <_printf_common+0x8a>
 8003efc:	2001      	movs	r0, #1
 8003efe:	4240      	negs	r0, r0
 8003f00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f02:	2030      	movs	r0, #48	@ 0x30
 8003f04:	18e1      	adds	r1, r4, r3
 8003f06:	3143      	adds	r1, #67	@ 0x43
 8003f08:	7008      	strb	r0, [r1, #0]
 8003f0a:	0021      	movs	r1, r4
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	3145      	adds	r1, #69	@ 0x45
 8003f10:	7809      	ldrb	r1, [r1, #0]
 8003f12:	18a2      	adds	r2, r4, r2
 8003f14:	3243      	adds	r2, #67	@ 0x43
 8003f16:	3302      	adds	r3, #2
 8003f18:	7011      	strb	r1, [r2, #0]
 8003f1a:	e7c1      	b.n	8003ea0 <_printf_common+0x4c>
 8003f1c:	0022      	movs	r2, r4
 8003f1e:	2301      	movs	r3, #1
 8003f20:	9901      	ldr	r1, [sp, #4]
 8003f22:	9800      	ldr	r0, [sp, #0]
 8003f24:	9f08      	ldr	r7, [sp, #32]
 8003f26:	321a      	adds	r2, #26
 8003f28:	47b8      	blx	r7
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d0e6      	beq.n	8003efc <_printf_common+0xa8>
 8003f2e:	3601      	adds	r6, #1
 8003f30:	e7d1      	b.n	8003ed6 <_printf_common+0x82>
	...

08003f34 <_printf_i>:
 8003f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f36:	b08b      	sub	sp, #44	@ 0x2c
 8003f38:	9206      	str	r2, [sp, #24]
 8003f3a:	000a      	movs	r2, r1
 8003f3c:	3243      	adds	r2, #67	@ 0x43
 8003f3e:	9307      	str	r3, [sp, #28]
 8003f40:	9005      	str	r0, [sp, #20]
 8003f42:	9203      	str	r2, [sp, #12]
 8003f44:	7e0a      	ldrb	r2, [r1, #24]
 8003f46:	000c      	movs	r4, r1
 8003f48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003f4a:	2a78      	cmp	r2, #120	@ 0x78
 8003f4c:	d809      	bhi.n	8003f62 <_printf_i+0x2e>
 8003f4e:	2a62      	cmp	r2, #98	@ 0x62
 8003f50:	d80b      	bhi.n	8003f6a <_printf_i+0x36>
 8003f52:	2a00      	cmp	r2, #0
 8003f54:	d100      	bne.n	8003f58 <_printf_i+0x24>
 8003f56:	e0ba      	b.n	80040ce <_printf_i+0x19a>
 8003f58:	497a      	ldr	r1, [pc, #488]	@ (8004144 <_printf_i+0x210>)
 8003f5a:	9104      	str	r1, [sp, #16]
 8003f5c:	2a58      	cmp	r2, #88	@ 0x58
 8003f5e:	d100      	bne.n	8003f62 <_printf_i+0x2e>
 8003f60:	e08e      	b.n	8004080 <_printf_i+0x14c>
 8003f62:	0025      	movs	r5, r4
 8003f64:	3542      	adds	r5, #66	@ 0x42
 8003f66:	702a      	strb	r2, [r5, #0]
 8003f68:	e022      	b.n	8003fb0 <_printf_i+0x7c>
 8003f6a:	0010      	movs	r0, r2
 8003f6c:	3863      	subs	r0, #99	@ 0x63
 8003f6e:	2815      	cmp	r0, #21
 8003f70:	d8f7      	bhi.n	8003f62 <_printf_i+0x2e>
 8003f72:	f7fc f8c9 	bl	8000108 <__gnu_thumb1_case_shi>
 8003f76:	0016      	.short	0x0016
 8003f78:	fff6001f 	.word	0xfff6001f
 8003f7c:	fff6fff6 	.word	0xfff6fff6
 8003f80:	001ffff6 	.word	0x001ffff6
 8003f84:	fff6fff6 	.word	0xfff6fff6
 8003f88:	fff6fff6 	.word	0xfff6fff6
 8003f8c:	0036009f 	.word	0x0036009f
 8003f90:	fff6007e 	.word	0xfff6007e
 8003f94:	00b0fff6 	.word	0x00b0fff6
 8003f98:	0036fff6 	.word	0x0036fff6
 8003f9c:	fff6fff6 	.word	0xfff6fff6
 8003fa0:	0082      	.short	0x0082
 8003fa2:	0025      	movs	r5, r4
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	3542      	adds	r5, #66	@ 0x42
 8003fa8:	1d11      	adds	r1, r2, #4
 8003faa:	6019      	str	r1, [r3, #0]
 8003fac:	6813      	ldr	r3, [r2, #0]
 8003fae:	702b      	strb	r3, [r5, #0]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e09e      	b.n	80040f2 <_printf_i+0x1be>
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	6809      	ldr	r1, [r1, #0]
 8003fb8:	1d02      	adds	r2, r0, #4
 8003fba:	060d      	lsls	r5, r1, #24
 8003fbc:	d50b      	bpl.n	8003fd6 <_printf_i+0xa2>
 8003fbe:	6806      	ldr	r6, [r0, #0]
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	2e00      	cmp	r6, #0
 8003fc4:	da03      	bge.n	8003fce <_printf_i+0x9a>
 8003fc6:	232d      	movs	r3, #45	@ 0x2d
 8003fc8:	9a03      	ldr	r2, [sp, #12]
 8003fca:	4276      	negs	r6, r6
 8003fcc:	7013      	strb	r3, [r2, #0]
 8003fce:	4b5d      	ldr	r3, [pc, #372]	@ (8004144 <_printf_i+0x210>)
 8003fd0:	270a      	movs	r7, #10
 8003fd2:	9304      	str	r3, [sp, #16]
 8003fd4:	e018      	b.n	8004008 <_printf_i+0xd4>
 8003fd6:	6806      	ldr	r6, [r0, #0]
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	0649      	lsls	r1, r1, #25
 8003fdc:	d5f1      	bpl.n	8003fc2 <_printf_i+0x8e>
 8003fde:	b236      	sxth	r6, r6
 8003fe0:	e7ef      	b.n	8003fc2 <_printf_i+0x8e>
 8003fe2:	6808      	ldr	r0, [r1, #0]
 8003fe4:	6819      	ldr	r1, [r3, #0]
 8003fe6:	c940      	ldmia	r1!, {r6}
 8003fe8:	0605      	lsls	r5, r0, #24
 8003fea:	d402      	bmi.n	8003ff2 <_printf_i+0xbe>
 8003fec:	0640      	lsls	r0, r0, #25
 8003fee:	d500      	bpl.n	8003ff2 <_printf_i+0xbe>
 8003ff0:	b2b6      	uxth	r6, r6
 8003ff2:	6019      	str	r1, [r3, #0]
 8003ff4:	4b53      	ldr	r3, [pc, #332]	@ (8004144 <_printf_i+0x210>)
 8003ff6:	270a      	movs	r7, #10
 8003ff8:	9304      	str	r3, [sp, #16]
 8003ffa:	2a6f      	cmp	r2, #111	@ 0x6f
 8003ffc:	d100      	bne.n	8004000 <_printf_i+0xcc>
 8003ffe:	3f02      	subs	r7, #2
 8004000:	0023      	movs	r3, r4
 8004002:	2200      	movs	r2, #0
 8004004:	3343      	adds	r3, #67	@ 0x43
 8004006:	701a      	strb	r2, [r3, #0]
 8004008:	6863      	ldr	r3, [r4, #4]
 800400a:	60a3      	str	r3, [r4, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	db06      	blt.n	800401e <_printf_i+0xea>
 8004010:	2104      	movs	r1, #4
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	9d03      	ldr	r5, [sp, #12]
 8004016:	438a      	bics	r2, r1
 8004018:	6022      	str	r2, [r4, #0]
 800401a:	4333      	orrs	r3, r6
 800401c:	d00c      	beq.n	8004038 <_printf_i+0x104>
 800401e:	9d03      	ldr	r5, [sp, #12]
 8004020:	0030      	movs	r0, r6
 8004022:	0039      	movs	r1, r7
 8004024:	f7fc f900 	bl	8000228 <__aeabi_uidivmod>
 8004028:	9b04      	ldr	r3, [sp, #16]
 800402a:	3d01      	subs	r5, #1
 800402c:	5c5b      	ldrb	r3, [r3, r1]
 800402e:	702b      	strb	r3, [r5, #0]
 8004030:	0033      	movs	r3, r6
 8004032:	0006      	movs	r6, r0
 8004034:	429f      	cmp	r7, r3
 8004036:	d9f3      	bls.n	8004020 <_printf_i+0xec>
 8004038:	2f08      	cmp	r7, #8
 800403a:	d109      	bne.n	8004050 <_printf_i+0x11c>
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	07db      	lsls	r3, r3, #31
 8004040:	d506      	bpl.n	8004050 <_printf_i+0x11c>
 8004042:	6862      	ldr	r2, [r4, #4]
 8004044:	6923      	ldr	r3, [r4, #16]
 8004046:	429a      	cmp	r2, r3
 8004048:	dc02      	bgt.n	8004050 <_printf_i+0x11c>
 800404a:	2330      	movs	r3, #48	@ 0x30
 800404c:	3d01      	subs	r5, #1
 800404e:	702b      	strb	r3, [r5, #0]
 8004050:	9b03      	ldr	r3, [sp, #12]
 8004052:	1b5b      	subs	r3, r3, r5
 8004054:	6123      	str	r3, [r4, #16]
 8004056:	9b07      	ldr	r3, [sp, #28]
 8004058:	0021      	movs	r1, r4
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	9805      	ldr	r0, [sp, #20]
 800405e:	9b06      	ldr	r3, [sp, #24]
 8004060:	aa09      	add	r2, sp, #36	@ 0x24
 8004062:	f7ff fef7 	bl	8003e54 <_printf_common>
 8004066:	3001      	adds	r0, #1
 8004068:	d148      	bne.n	80040fc <_printf_i+0x1c8>
 800406a:	2001      	movs	r0, #1
 800406c:	4240      	negs	r0, r0
 800406e:	b00b      	add	sp, #44	@ 0x2c
 8004070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004072:	2220      	movs	r2, #32
 8004074:	6809      	ldr	r1, [r1, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	6022      	str	r2, [r4, #0]
 800407a:	2278      	movs	r2, #120	@ 0x78
 800407c:	4932      	ldr	r1, [pc, #200]	@ (8004148 <_printf_i+0x214>)
 800407e:	9104      	str	r1, [sp, #16]
 8004080:	0021      	movs	r1, r4
 8004082:	3145      	adds	r1, #69	@ 0x45
 8004084:	700a      	strb	r2, [r1, #0]
 8004086:	6819      	ldr	r1, [r3, #0]
 8004088:	6822      	ldr	r2, [r4, #0]
 800408a:	c940      	ldmia	r1!, {r6}
 800408c:	0610      	lsls	r0, r2, #24
 800408e:	d402      	bmi.n	8004096 <_printf_i+0x162>
 8004090:	0650      	lsls	r0, r2, #25
 8004092:	d500      	bpl.n	8004096 <_printf_i+0x162>
 8004094:	b2b6      	uxth	r6, r6
 8004096:	6019      	str	r1, [r3, #0]
 8004098:	07d3      	lsls	r3, r2, #31
 800409a:	d502      	bpl.n	80040a2 <_printf_i+0x16e>
 800409c:	2320      	movs	r3, #32
 800409e:	4313      	orrs	r3, r2
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	2e00      	cmp	r6, #0
 80040a4:	d001      	beq.n	80040aa <_printf_i+0x176>
 80040a6:	2710      	movs	r7, #16
 80040a8:	e7aa      	b.n	8004000 <_printf_i+0xcc>
 80040aa:	2220      	movs	r2, #32
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	4393      	bics	r3, r2
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	e7f8      	b.n	80040a6 <_printf_i+0x172>
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	680d      	ldr	r5, [r1, #0]
 80040b8:	1d10      	adds	r0, r2, #4
 80040ba:	6949      	ldr	r1, [r1, #20]
 80040bc:	6018      	str	r0, [r3, #0]
 80040be:	6813      	ldr	r3, [r2, #0]
 80040c0:	062e      	lsls	r6, r5, #24
 80040c2:	d501      	bpl.n	80040c8 <_printf_i+0x194>
 80040c4:	6019      	str	r1, [r3, #0]
 80040c6:	e002      	b.n	80040ce <_printf_i+0x19a>
 80040c8:	066d      	lsls	r5, r5, #25
 80040ca:	d5fb      	bpl.n	80040c4 <_printf_i+0x190>
 80040cc:	8019      	strh	r1, [r3, #0]
 80040ce:	2300      	movs	r3, #0
 80040d0:	9d03      	ldr	r5, [sp, #12]
 80040d2:	6123      	str	r3, [r4, #16]
 80040d4:	e7bf      	b.n	8004056 <_printf_i+0x122>
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	1d11      	adds	r1, r2, #4
 80040da:	6019      	str	r1, [r3, #0]
 80040dc:	6815      	ldr	r5, [r2, #0]
 80040de:	2100      	movs	r1, #0
 80040e0:	0028      	movs	r0, r5
 80040e2:	6862      	ldr	r2, [r4, #4]
 80040e4:	f000 f9aa 	bl	800443c <memchr>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d001      	beq.n	80040f0 <_printf_i+0x1bc>
 80040ec:	1b40      	subs	r0, r0, r5
 80040ee:	6060      	str	r0, [r4, #4]
 80040f0:	6863      	ldr	r3, [r4, #4]
 80040f2:	6123      	str	r3, [r4, #16]
 80040f4:	2300      	movs	r3, #0
 80040f6:	9a03      	ldr	r2, [sp, #12]
 80040f8:	7013      	strb	r3, [r2, #0]
 80040fa:	e7ac      	b.n	8004056 <_printf_i+0x122>
 80040fc:	002a      	movs	r2, r5
 80040fe:	6923      	ldr	r3, [r4, #16]
 8004100:	9906      	ldr	r1, [sp, #24]
 8004102:	9805      	ldr	r0, [sp, #20]
 8004104:	9d07      	ldr	r5, [sp, #28]
 8004106:	47a8      	blx	r5
 8004108:	3001      	adds	r0, #1
 800410a:	d0ae      	beq.n	800406a <_printf_i+0x136>
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	079b      	lsls	r3, r3, #30
 8004110:	d415      	bmi.n	800413e <_printf_i+0x20a>
 8004112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004114:	68e0      	ldr	r0, [r4, #12]
 8004116:	4298      	cmp	r0, r3
 8004118:	daa9      	bge.n	800406e <_printf_i+0x13a>
 800411a:	0018      	movs	r0, r3
 800411c:	e7a7      	b.n	800406e <_printf_i+0x13a>
 800411e:	0022      	movs	r2, r4
 8004120:	2301      	movs	r3, #1
 8004122:	9906      	ldr	r1, [sp, #24]
 8004124:	9805      	ldr	r0, [sp, #20]
 8004126:	9e07      	ldr	r6, [sp, #28]
 8004128:	3219      	adds	r2, #25
 800412a:	47b0      	blx	r6
 800412c:	3001      	adds	r0, #1
 800412e:	d09c      	beq.n	800406a <_printf_i+0x136>
 8004130:	3501      	adds	r5, #1
 8004132:	68e3      	ldr	r3, [r4, #12]
 8004134:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	42ab      	cmp	r3, r5
 800413a:	dcf0      	bgt.n	800411e <_printf_i+0x1ea>
 800413c:	e7e9      	b.n	8004112 <_printf_i+0x1de>
 800413e:	2500      	movs	r5, #0
 8004140:	e7f7      	b.n	8004132 <_printf_i+0x1fe>
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	080045b0 	.word	0x080045b0
 8004148:	080045c1 	.word	0x080045c1

0800414c <__swbuf_r>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	0006      	movs	r6, r0
 8004150:	000d      	movs	r5, r1
 8004152:	0014      	movs	r4, r2
 8004154:	2800      	cmp	r0, #0
 8004156:	d004      	beq.n	8004162 <__swbuf_r+0x16>
 8004158:	6a03      	ldr	r3, [r0, #32]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <__swbuf_r+0x16>
 800415e:	f7ff fa31 	bl	80035c4 <__sinit>
 8004162:	69a3      	ldr	r3, [r4, #24]
 8004164:	60a3      	str	r3, [r4, #8]
 8004166:	89a3      	ldrh	r3, [r4, #12]
 8004168:	071b      	lsls	r3, r3, #28
 800416a:	d502      	bpl.n	8004172 <__swbuf_r+0x26>
 800416c:	6923      	ldr	r3, [r4, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <__swbuf_r+0x3a>
 8004172:	0021      	movs	r1, r4
 8004174:	0030      	movs	r0, r6
 8004176:	f000 f82b 	bl	80041d0 <__swsetup_r>
 800417a:	2800      	cmp	r0, #0
 800417c:	d003      	beq.n	8004186 <__swbuf_r+0x3a>
 800417e:	2501      	movs	r5, #1
 8004180:	426d      	negs	r5, r5
 8004182:	0028      	movs	r0, r5
 8004184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004186:	6923      	ldr	r3, [r4, #16]
 8004188:	6820      	ldr	r0, [r4, #0]
 800418a:	b2ef      	uxtb	r7, r5
 800418c:	1ac0      	subs	r0, r0, r3
 800418e:	6963      	ldr	r3, [r4, #20]
 8004190:	b2ed      	uxtb	r5, r5
 8004192:	4283      	cmp	r3, r0
 8004194:	dc05      	bgt.n	80041a2 <__swbuf_r+0x56>
 8004196:	0021      	movs	r1, r4
 8004198:	0030      	movs	r0, r6
 800419a:	f7ff fbcd 	bl	8003938 <_fflush_r>
 800419e:	2800      	cmp	r0, #0
 80041a0:	d1ed      	bne.n	800417e <__swbuf_r+0x32>
 80041a2:	68a3      	ldr	r3, [r4, #8]
 80041a4:	3001      	adds	r0, #1
 80041a6:	3b01      	subs	r3, #1
 80041a8:	60a3      	str	r3, [r4, #8]
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	6022      	str	r2, [r4, #0]
 80041b0:	701f      	strb	r7, [r3, #0]
 80041b2:	6963      	ldr	r3, [r4, #20]
 80041b4:	4283      	cmp	r3, r0
 80041b6:	d004      	beq.n	80041c2 <__swbuf_r+0x76>
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	07db      	lsls	r3, r3, #31
 80041bc:	d5e1      	bpl.n	8004182 <__swbuf_r+0x36>
 80041be:	2d0a      	cmp	r5, #10
 80041c0:	d1df      	bne.n	8004182 <__swbuf_r+0x36>
 80041c2:	0021      	movs	r1, r4
 80041c4:	0030      	movs	r0, r6
 80041c6:	f7ff fbb7 	bl	8003938 <_fflush_r>
 80041ca:	2800      	cmp	r0, #0
 80041cc:	d0d9      	beq.n	8004182 <__swbuf_r+0x36>
 80041ce:	e7d6      	b.n	800417e <__swbuf_r+0x32>

080041d0 <__swsetup_r>:
 80041d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004288 <__swsetup_r+0xb8>)
 80041d2:	b570      	push	{r4, r5, r6, lr}
 80041d4:	0005      	movs	r5, r0
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	000c      	movs	r4, r1
 80041da:	2800      	cmp	r0, #0
 80041dc:	d004      	beq.n	80041e8 <__swsetup_r+0x18>
 80041de:	6a03      	ldr	r3, [r0, #32]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <__swsetup_r+0x18>
 80041e4:	f7ff f9ee 	bl	80035c4 <__sinit>
 80041e8:	220c      	movs	r2, #12
 80041ea:	5ea3      	ldrsh	r3, [r4, r2]
 80041ec:	071a      	lsls	r2, r3, #28
 80041ee:	d423      	bmi.n	8004238 <__swsetup_r+0x68>
 80041f0:	06da      	lsls	r2, r3, #27
 80041f2:	d407      	bmi.n	8004204 <__swsetup_r+0x34>
 80041f4:	2209      	movs	r2, #9
 80041f6:	602a      	str	r2, [r5, #0]
 80041f8:	2240      	movs	r2, #64	@ 0x40
 80041fa:	2001      	movs	r0, #1
 80041fc:	4313      	orrs	r3, r2
 80041fe:	81a3      	strh	r3, [r4, #12]
 8004200:	4240      	negs	r0, r0
 8004202:	e03a      	b.n	800427a <__swsetup_r+0xaa>
 8004204:	075b      	lsls	r3, r3, #29
 8004206:	d513      	bpl.n	8004230 <__swsetup_r+0x60>
 8004208:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800420a:	2900      	cmp	r1, #0
 800420c:	d008      	beq.n	8004220 <__swsetup_r+0x50>
 800420e:	0023      	movs	r3, r4
 8004210:	3344      	adds	r3, #68	@ 0x44
 8004212:	4299      	cmp	r1, r3
 8004214:	d002      	beq.n	800421c <__swsetup_r+0x4c>
 8004216:	0028      	movs	r0, r5
 8004218:	f7ff fc8e 	bl	8003b38 <_free_r>
 800421c:	2300      	movs	r3, #0
 800421e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004220:	2224      	movs	r2, #36	@ 0x24
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	4393      	bics	r3, r2
 8004226:	81a3      	strh	r3, [r4, #12]
 8004228:	2300      	movs	r3, #0
 800422a:	6063      	str	r3, [r4, #4]
 800422c:	6923      	ldr	r3, [r4, #16]
 800422e:	6023      	str	r3, [r4, #0]
 8004230:	2308      	movs	r3, #8
 8004232:	89a2      	ldrh	r2, [r4, #12]
 8004234:	4313      	orrs	r3, r2
 8004236:	81a3      	strh	r3, [r4, #12]
 8004238:	6923      	ldr	r3, [r4, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10b      	bne.n	8004256 <__swsetup_r+0x86>
 800423e:	21a0      	movs	r1, #160	@ 0xa0
 8004240:	2280      	movs	r2, #128	@ 0x80
 8004242:	89a3      	ldrh	r3, [r4, #12]
 8004244:	0089      	lsls	r1, r1, #2
 8004246:	0092      	lsls	r2, r2, #2
 8004248:	400b      	ands	r3, r1
 800424a:	4293      	cmp	r3, r2
 800424c:	d003      	beq.n	8004256 <__swsetup_r+0x86>
 800424e:	0021      	movs	r1, r4
 8004250:	0028      	movs	r0, r5
 8004252:	f000 f845 	bl	80042e0 <__smakebuf_r>
 8004256:	220c      	movs	r2, #12
 8004258:	5ea3      	ldrsh	r3, [r4, r2]
 800425a:	2101      	movs	r1, #1
 800425c:	001a      	movs	r2, r3
 800425e:	400a      	ands	r2, r1
 8004260:	420b      	tst	r3, r1
 8004262:	d00b      	beq.n	800427c <__swsetup_r+0xac>
 8004264:	2200      	movs	r2, #0
 8004266:	60a2      	str	r2, [r4, #8]
 8004268:	6962      	ldr	r2, [r4, #20]
 800426a:	4252      	negs	r2, r2
 800426c:	61a2      	str	r2, [r4, #24]
 800426e:	2000      	movs	r0, #0
 8004270:	6922      	ldr	r2, [r4, #16]
 8004272:	4282      	cmp	r2, r0
 8004274:	d101      	bne.n	800427a <__swsetup_r+0xaa>
 8004276:	061a      	lsls	r2, r3, #24
 8004278:	d4be      	bmi.n	80041f8 <__swsetup_r+0x28>
 800427a:	bd70      	pop	{r4, r5, r6, pc}
 800427c:	0799      	lsls	r1, r3, #30
 800427e:	d400      	bmi.n	8004282 <__swsetup_r+0xb2>
 8004280:	6962      	ldr	r2, [r4, #20]
 8004282:	60a2      	str	r2, [r4, #8]
 8004284:	e7f3      	b.n	800426e <__swsetup_r+0x9e>
 8004286:	46c0      	nop			@ (mov r8, r8)
 8004288:	20000018 	.word	0x20000018

0800428c <__swhatbuf_r>:
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	000e      	movs	r6, r1
 8004290:	001d      	movs	r5, r3
 8004292:	230e      	movs	r3, #14
 8004294:	5ec9      	ldrsh	r1, [r1, r3]
 8004296:	0014      	movs	r4, r2
 8004298:	b096      	sub	sp, #88	@ 0x58
 800429a:	2900      	cmp	r1, #0
 800429c:	da0c      	bge.n	80042b8 <__swhatbuf_r+0x2c>
 800429e:	89b2      	ldrh	r2, [r6, #12]
 80042a0:	2380      	movs	r3, #128	@ 0x80
 80042a2:	0011      	movs	r1, r2
 80042a4:	4019      	ands	r1, r3
 80042a6:	421a      	tst	r2, r3
 80042a8:	d114      	bne.n	80042d4 <__swhatbuf_r+0x48>
 80042aa:	2380      	movs	r3, #128	@ 0x80
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	2000      	movs	r0, #0
 80042b0:	6029      	str	r1, [r5, #0]
 80042b2:	6023      	str	r3, [r4, #0]
 80042b4:	b016      	add	sp, #88	@ 0x58
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	466a      	mov	r2, sp
 80042ba:	f000 f8ad 	bl	8004418 <_fstat_r>
 80042be:	2800      	cmp	r0, #0
 80042c0:	dbed      	blt.n	800429e <__swhatbuf_r+0x12>
 80042c2:	23f0      	movs	r3, #240	@ 0xf0
 80042c4:	9901      	ldr	r1, [sp, #4]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	4019      	ands	r1, r3
 80042ca:	4b04      	ldr	r3, [pc, #16]	@ (80042dc <__swhatbuf_r+0x50>)
 80042cc:	18c9      	adds	r1, r1, r3
 80042ce:	424b      	negs	r3, r1
 80042d0:	4159      	adcs	r1, r3
 80042d2:	e7ea      	b.n	80042aa <__swhatbuf_r+0x1e>
 80042d4:	2100      	movs	r1, #0
 80042d6:	2340      	movs	r3, #64	@ 0x40
 80042d8:	e7e9      	b.n	80042ae <__swhatbuf_r+0x22>
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	ffffe000 	.word	0xffffe000

080042e0 <__smakebuf_r>:
 80042e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042e2:	2602      	movs	r6, #2
 80042e4:	898b      	ldrh	r3, [r1, #12]
 80042e6:	0005      	movs	r5, r0
 80042e8:	000c      	movs	r4, r1
 80042ea:	b085      	sub	sp, #20
 80042ec:	4233      	tst	r3, r6
 80042ee:	d007      	beq.n	8004300 <__smakebuf_r+0x20>
 80042f0:	0023      	movs	r3, r4
 80042f2:	3347      	adds	r3, #71	@ 0x47
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	6123      	str	r3, [r4, #16]
 80042f8:	2301      	movs	r3, #1
 80042fa:	6163      	str	r3, [r4, #20]
 80042fc:	b005      	add	sp, #20
 80042fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004300:	ab03      	add	r3, sp, #12
 8004302:	aa02      	add	r2, sp, #8
 8004304:	f7ff ffc2 	bl	800428c <__swhatbuf_r>
 8004308:	9f02      	ldr	r7, [sp, #8]
 800430a:	9001      	str	r0, [sp, #4]
 800430c:	0039      	movs	r1, r7
 800430e:	0028      	movs	r0, r5
 8004310:	f7ff fa0c 	bl	800372c <_malloc_r>
 8004314:	2800      	cmp	r0, #0
 8004316:	d108      	bne.n	800432a <__smakebuf_r+0x4a>
 8004318:	220c      	movs	r2, #12
 800431a:	5ea3      	ldrsh	r3, [r4, r2]
 800431c:	059a      	lsls	r2, r3, #22
 800431e:	d4ed      	bmi.n	80042fc <__smakebuf_r+0x1c>
 8004320:	2203      	movs	r2, #3
 8004322:	4393      	bics	r3, r2
 8004324:	431e      	orrs	r6, r3
 8004326:	81a6      	strh	r6, [r4, #12]
 8004328:	e7e2      	b.n	80042f0 <__smakebuf_r+0x10>
 800432a:	2380      	movs	r3, #128	@ 0x80
 800432c:	89a2      	ldrh	r2, [r4, #12]
 800432e:	6020      	str	r0, [r4, #0]
 8004330:	4313      	orrs	r3, r2
 8004332:	81a3      	strh	r3, [r4, #12]
 8004334:	9b03      	ldr	r3, [sp, #12]
 8004336:	6120      	str	r0, [r4, #16]
 8004338:	6167      	str	r7, [r4, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00c      	beq.n	8004358 <__smakebuf_r+0x78>
 800433e:	0028      	movs	r0, r5
 8004340:	230e      	movs	r3, #14
 8004342:	5ee1      	ldrsh	r1, [r4, r3]
 8004344:	f000 f840 	bl	80043c8 <_isatty_r>
 8004348:	2800      	cmp	r0, #0
 800434a:	d005      	beq.n	8004358 <__smakebuf_r+0x78>
 800434c:	2303      	movs	r3, #3
 800434e:	89a2      	ldrh	r2, [r4, #12]
 8004350:	439a      	bics	r2, r3
 8004352:	3b02      	subs	r3, #2
 8004354:	4313      	orrs	r3, r2
 8004356:	81a3      	strh	r3, [r4, #12]
 8004358:	89a3      	ldrh	r3, [r4, #12]
 800435a:	9a01      	ldr	r2, [sp, #4]
 800435c:	4313      	orrs	r3, r2
 800435e:	81a3      	strh	r3, [r4, #12]
 8004360:	e7cc      	b.n	80042fc <__smakebuf_r+0x1c>

08004362 <_raise_r>:
 8004362:	b570      	push	{r4, r5, r6, lr}
 8004364:	0004      	movs	r4, r0
 8004366:	000d      	movs	r5, r1
 8004368:	291f      	cmp	r1, #31
 800436a:	d904      	bls.n	8004376 <_raise_r+0x14>
 800436c:	2316      	movs	r3, #22
 800436e:	6003      	str	r3, [r0, #0]
 8004370:	2001      	movs	r0, #1
 8004372:	4240      	negs	r0, r0
 8004374:	bd70      	pop	{r4, r5, r6, pc}
 8004376:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8004378:	2b00      	cmp	r3, #0
 800437a:	d004      	beq.n	8004386 <_raise_r+0x24>
 800437c:	008a      	lsls	r2, r1, #2
 800437e:	189b      	adds	r3, r3, r2
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	2a00      	cmp	r2, #0
 8004384:	d108      	bne.n	8004398 <_raise_r+0x36>
 8004386:	0020      	movs	r0, r4
 8004388:	f000 f842 	bl	8004410 <_getpid_r>
 800438c:	002a      	movs	r2, r5
 800438e:	0001      	movs	r1, r0
 8004390:	0020      	movs	r0, r4
 8004392:	f000 f82b 	bl	80043ec <_kill_r>
 8004396:	e7ed      	b.n	8004374 <_raise_r+0x12>
 8004398:	2a01      	cmp	r2, #1
 800439a:	d009      	beq.n	80043b0 <_raise_r+0x4e>
 800439c:	1c51      	adds	r1, r2, #1
 800439e:	d103      	bne.n	80043a8 <_raise_r+0x46>
 80043a0:	2316      	movs	r3, #22
 80043a2:	6003      	str	r3, [r0, #0]
 80043a4:	2001      	movs	r0, #1
 80043a6:	e7e5      	b.n	8004374 <_raise_r+0x12>
 80043a8:	2100      	movs	r1, #0
 80043aa:	0028      	movs	r0, r5
 80043ac:	6019      	str	r1, [r3, #0]
 80043ae:	4790      	blx	r2
 80043b0:	2000      	movs	r0, #0
 80043b2:	e7df      	b.n	8004374 <_raise_r+0x12>

080043b4 <raise>:
 80043b4:	b510      	push	{r4, lr}
 80043b6:	4b03      	ldr	r3, [pc, #12]	@ (80043c4 <raise+0x10>)
 80043b8:	0001      	movs	r1, r0
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	f7ff ffd1 	bl	8004362 <_raise_r>
 80043c0:	bd10      	pop	{r4, pc}
 80043c2:	46c0      	nop			@ (mov r8, r8)
 80043c4:	20000018 	.word	0x20000018

080043c8 <_isatty_r>:
 80043c8:	2300      	movs	r3, #0
 80043ca:	b570      	push	{r4, r5, r6, lr}
 80043cc:	4d06      	ldr	r5, [pc, #24]	@ (80043e8 <_isatty_r+0x20>)
 80043ce:	0004      	movs	r4, r0
 80043d0:	0008      	movs	r0, r1
 80043d2:	602b      	str	r3, [r5, #0]
 80043d4:	f7fc ff8a 	bl	80012ec <_isatty>
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	d103      	bne.n	80043e4 <_isatty_r+0x1c>
 80043dc:	682b      	ldr	r3, [r5, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d000      	beq.n	80043e4 <_isatty_r+0x1c>
 80043e2:	6023      	str	r3, [r4, #0]
 80043e4:	bd70      	pop	{r4, r5, r6, pc}
 80043e6:	46c0      	nop			@ (mov r8, r8)
 80043e8:	20000278 	.word	0x20000278

080043ec <_kill_r>:
 80043ec:	2300      	movs	r3, #0
 80043ee:	b570      	push	{r4, r5, r6, lr}
 80043f0:	4d06      	ldr	r5, [pc, #24]	@ (800440c <_kill_r+0x20>)
 80043f2:	0004      	movs	r4, r0
 80043f4:	0008      	movs	r0, r1
 80043f6:	0011      	movs	r1, r2
 80043f8:	602b      	str	r3, [r5, #0]
 80043fa:	f7fc ff09 	bl	8001210 <_kill>
 80043fe:	1c43      	adds	r3, r0, #1
 8004400:	d103      	bne.n	800440a <_kill_r+0x1e>
 8004402:	682b      	ldr	r3, [r5, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d000      	beq.n	800440a <_kill_r+0x1e>
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	bd70      	pop	{r4, r5, r6, pc}
 800440c:	20000278 	.word	0x20000278

08004410 <_getpid_r>:
 8004410:	b510      	push	{r4, lr}
 8004412:	f7fc fef7 	bl	8001204 <_getpid>
 8004416:	bd10      	pop	{r4, pc}

08004418 <_fstat_r>:
 8004418:	2300      	movs	r3, #0
 800441a:	b570      	push	{r4, r5, r6, lr}
 800441c:	4d06      	ldr	r5, [pc, #24]	@ (8004438 <_fstat_r+0x20>)
 800441e:	0004      	movs	r4, r0
 8004420:	0008      	movs	r0, r1
 8004422:	0011      	movs	r1, r2
 8004424:	602b      	str	r3, [r5, #0]
 8004426:	f7fc ff53 	bl	80012d0 <_fstat>
 800442a:	1c43      	adds	r3, r0, #1
 800442c:	d103      	bne.n	8004436 <_fstat_r+0x1e>
 800442e:	682b      	ldr	r3, [r5, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d000      	beq.n	8004436 <_fstat_r+0x1e>
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	bd70      	pop	{r4, r5, r6, pc}
 8004438:	20000278 	.word	0x20000278

0800443c <memchr>:
 800443c:	b2c9      	uxtb	r1, r1
 800443e:	1882      	adds	r2, r0, r2
 8004440:	4290      	cmp	r0, r2
 8004442:	d101      	bne.n	8004448 <memchr+0xc>
 8004444:	2000      	movs	r0, #0
 8004446:	4770      	bx	lr
 8004448:	7803      	ldrb	r3, [r0, #0]
 800444a:	428b      	cmp	r3, r1
 800444c:	d0fb      	beq.n	8004446 <memchr+0xa>
 800444e:	3001      	adds	r0, #1
 8004450:	e7f6      	b.n	8004440 <memchr+0x4>
	...

08004454 <_init>:
 8004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004456:	46c0      	nop			@ (mov r8, r8)
 8004458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800445a:	bc08      	pop	{r3}
 800445c:	469e      	mov	lr, r3
 800445e:	4770      	bx	lr

08004460 <_fini>:
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004462:	46c0      	nop			@ (mov r8, r8)
 8004464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004466:	bc08      	pop	{r3}
 8004468:	469e      	mov	lr, r3
 800446a:	4770      	bx	lr
